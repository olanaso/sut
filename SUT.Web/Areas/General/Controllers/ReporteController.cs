
using CarlosAg.ExcelXmlWriter;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using Microsoft.Reporting.WebForms;
using Remotion.Collections;
using Sut.Entities;
using Sut.IApplicationServices;
using Sut.Log;
using Sut.Web.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Web.Mvc;
using System.Web.Routing;


namespace Sut.Web.Areas.General.Controllers
{
    public class ReporteController : Controller
    {
        public Dictionary<string, Dictionary<string, CuadroCalculo>> cuadro = new Dictionary<string, Dictionary<string, CuadroCalculo>>();
        readonly string path = ConfigurationManager.AppSettings["Sut.PathUpload"].ToString();
        string pathdocumentos = ConfigurationManager.AppSettings["Sut.PathUploadDocumentos"].ToString();
        readonly string pathdocumentosCiudadano = ConfigurationManager.AppSettings["Sut.PathUploadDocumentosCiudadano"].ToString();
        readonly string pathLinkarchivos = ConfigurationManager.AppSettings["Sut.PathLinkarchivos"].ToString();
        /*JJJMSP2*/
        readonly string pathlogoentidad = ConfigurationManager.AppSettings["Sut.PathLogosentidades"].ToString();
        readonly string pathnomlogopcm = "";//ConfigurationManager.AppSettings["Sut.PathNomLogoPcm"].ToString();
        string estadoformulario = "";
        readonly Font fontsTituloNormal = FontFactory.GetFont("Arial", 8, Font.NORMAL);
        readonly Font fontsTituloNegrita = FontFactory.GetFont("Arial", 10, Font.BOLD);
        readonly Font fontsSubTituloNormal = FontFactory.GetFont("Arial", 9, Font.BOLD);
        readonly Font fontsLetraNormal = FontFactory.GetFont("Arial", 7, Font.NORMAL);
        readonly Font fontssubLetraNormal = FontFactory.GetFont("Arial", 6, Font.NORMAL);
        readonly Font fontsNormal = FontFactory.GetFont("Arial", 8, Font.NORMAL);
        readonly Font fontsNormalUnderline = FontFactory.GetFont("Arial", 5, Font.ITALIC + Font.UNDERLINE);
        readonly Font fontsNegrita = FontFactory.GetFont("Arial", 7, Font.BOLD);
        readonly Font fontsUnderline = FontFactory.GetFont("Arial", 5, Font.BOLDITALIC + Font.UNDERLINE);
        readonly Font fontsTransparente = FontFactory.GetFont(FontFactory.TIMES, 5, Font.NORMAL, iTextSharp.text.Color.WHITE);
        readonly Font fontsCabFooter = FontFactory.GetFont("Arial", 8, Font.BOLD);
        readonly Font fontsDetalle = FontFactory.GetFont("Arial", 4, Font.NORMAL);

        ReportDataSource sub_rds1;
        ReportDataSource sub_rds2;
        ReportDataSource sub_rds3;
        ReportDataSource sub_rds4;
        ReportDataSource sub_rds5;
        //ReportDataSource sub_rds8;
        int pagcab;
        int pagcab2;
        int pagcabCompleto;
        int pagcabhoja;
        ReportDataSource sub_rds6;

        public string[] tipo = new string[8];

        private readonly ILogService<ReporteController> _log;
        private readonly IReporteService _reporteService;
        private readonly ITablaAsmeService _tablaAsmeService;
        private readonly IActividadService _actividadService;
        private readonly IProcedimientoService _procedimientoService;
        private readonly IRequisitoService _requisitoService;
        private readonly IBaseLegalService _baseLegalService;
        private readonly IDatoService _datoService;
        private readonly IEntidadService _entidadService;
        private readonly IExpedienteService _expedienteService;
        private readonly ISedeService _sedeService;
        private readonly IExpedienteNormaService _expedienteNormaService;
        private readonly IEnumeradoService _enumeradoService;
        private readonly IArchivoAdjuntoService _archivoAdjuntoService;
        private readonly IUnidadOrganicaService _unidadOrganicaService;
        private readonly ITablaAsmeReproduccionService _tablaAsmeReproduccionService;
        private readonly IPlazoAtencionService _plazoAtencionService;
        private readonly IIncentivosFormulasService _IncentivosFormulasService;
        private readonly IIncentivosFormulasCorteService _IncentivosFormulasCorteService;
        private readonly IIncentivosService _IncentivosService;
        private readonly IIncentivosCorteService _IncentivosCorteService;
        private readonly IAuditoriaService _AuditoriaService;
        private readonly IRecursoCostoService _recursoCostoService;
        private readonly IInductorService _inductorService;
        private readonly IFactorDedicacionService _factorDedicacionService;

        private readonly IInductorValorService _inductorValorService;
        private readonly IInformeService _InformeService;
        private readonly IProcedimientoCargosService _procedimientoCargosService;
        private readonly IProcedimientoCargosApeService _procedimientoCargosApeService;
        private readonly IProcedimientoCargosOtrosService _procedimientoCargosOtrosService;
        private readonly IProcedimientoUndOrgResponsableService _ProcedimientoUndOrgResponsableService;
        public ReporteController(IReporteService reporteService,
                                ITablaAsmeService tablaAsmeService,
                                IActividadService actividadService,
                                IProcedimientoService procedimientoService,
                                IRequisitoService requisitoService,
                                IBaseLegalService baseLegalService,
                                IDatoService datoService,
                                IEntidadService entidadService,
                                IExpedienteService expedienteService,
                                ISedeService sedeService,
                                IExpedienteNormaService expedienteNormaService,
                                IEnumeradoService enumeradoService,
                                IUnidadOrganicaService unidadOrganicaService,
                                IArchivoAdjuntoService archivoAdjuntoService,
                                ITablaAsmeReproduccionService tablaAsmeReproduccionService,
                                IPlazoAtencionService plazoAtencionService,
                                IIncentivosFormulasService IncentivosFormulasService,
                                IIncentivosFormulasCorteService IncentivosFormulasCorteService,
                                IIncentivosService incentivosService,
                                IIncentivosCorteService incentivosCorteService,
                                IAuditoriaService AuditoriaService,
                                IRecursoCostoService recursoCostoService,
                                IInductorService inductorService,
                                IFactorDedicacionService factorDedicacionService,
                                IProcedimientoCargosService procedimientoCargosService,
                                IProcedimientoCargosApeService procedimientoCargosApeService,
                                IProcedimientoUndOrgResponsableService procedimientoUndOrgResponsableService,
                                IProcedimientoCargosOtrosService procedimientoCargosOtrosService,
                                IInformeService informeService,
                                IInductorValorService inductorValorService)
        {
            _log = new LogService<ReporteController>();
            _reporteService = reporteService;
            _tablaAsmeService = tablaAsmeService;
            _actividadService = actividadService;
            _procedimientoService = procedimientoService;
            _requisitoService = requisitoService;
            _baseLegalService = baseLegalService;
            _datoService = datoService;
            _entidadService = entidadService;
            _expedienteService = expedienteService;
            _sedeService = sedeService;
            _expedienteNormaService = expedienteNormaService;
            _enumeradoService = enumeradoService;
            _archivoAdjuntoService = archivoAdjuntoService;
            _unidadOrganicaService = unidadOrganicaService;
            _tablaAsmeReproduccionService = tablaAsmeReproduccionService;
            _plazoAtencionService = plazoAtencionService;
            _IncentivosFormulasService = IncentivosFormulasService;
            _IncentivosFormulasCorteService = IncentivosFormulasCorteService;
            _IncentivosService = incentivosService;
            _IncentivosCorteService = incentivosCorteService;
            _AuditoriaService = AuditoriaService;
            _recursoCostoService = recursoCostoService;
            _inductorService = inductorService;
            _factorDedicacionService = factorDedicacionService;
            _InformeService = informeService;
            _procedimientoCargosService = procedimientoCargosService;
            _procedimientoCargosApeService = procedimientoCargosApeService;
            _ProcedimientoUndOrgResponsableService = procedimientoUndOrgResponsableService;
            _procedimientoCargosOtrosService = procedimientoCargosOtrosService;
            _inductorValorService = inductorValorService;
        }

        public ActionResult RptActividades(long ExpedienteId, int ptiporeporte, string pcampo4, string pcampo5, string pcampo7, string pcampo9, string pcampo12, string pcampo10, string pcampo11)
        {
            try
            {
                var ds = new DataSet1.DescargasDataTable();

                Expediente filtro = new Expediente();
                filtro.ExpedienteId = ExpedienteId;
                filtro.ptiporeporte = ptiporeporte;
                filtro.campo4 = pcampo4;
                filtro.campo5 = pcampo5;
                filtro.campo7 = pcampo7;
                filtro.campo9 = pcampo9;
                if (pcampo12 == "")
                {
                    filtro.campo12 = 0;
                }
                else { filtro.campo12 = Convert.ToInt32(pcampo12); }

                filtro.campo10 = pcampo10;
                filtro.campo11 = pcampo11;

                var data = _expedienteService.GetAllLikePaginRptActividadRPT(filtro);

                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["campo1"] = data[i].campo1;
                    dr["campo2"] = data[i].campo2;
                    dr["campo3"] = data[i].campo3;
                    dr["campo4"] = data[i].campo4;
                    dr["campo5"] = data[i].campo5;
                    dr["campo6"] = data[i].campo6;
                    dr["campo7"] = data[i].campo7;
                    dr["campo8"] = data[i].campo8;
                    dr["campo9"] = data[i].campo9;
                    dr["campo10"] = data[i].campo10;
                    dr["campo11"] = data[i].campo11;
                    dr["campo12"] = data[i].campo12;
                    dr["campo13"] = data[i].campo12;
                    dr["campo14"] = data[i].campo12;
                    dr["campo15"] = data[i].campo12;
                    dr["campo16"] = data[i].campo12;
                    dr["campo17"] = data[i].campo12;
                    dr["campo18"] = data[i].campo12;
                    dr["campo19"] = data[i].campo12;
                    dr["campo20"] = data[i].campo12;
                    dr["campo21"] = data[i].campo12;
                    dr["campo22"] = data[i].campo12;
                    dr["campo23"] = data[i].campo12;
                    ds.Rows.Add(dr);
                }
                var ruta = "";
                var nombre = "";
                if (ptiporeporte == 1)
                {
                    ruta = Server.MapPath("~/Reportes/rptActividades.rdlc");
                    nombre = "Reporte De Duración De Actividades";
                }
                else
                {
                    ruta = Server.MapPath("~/Reportes/rptActividades2.rdlc");
                    nombre = "Reporte de Recursos Asignados a Actividades";
                }
                ReporteModel rpt = new ReporteModel()
                {
                    File = ruta,
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };

                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", nombre, rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult AnexoPersonal(long ExpedienteId)
        {
            try
            {
                var ds = new DataSet1.AnexoPersonalDataTable();
                var data = _reporteService.GetAnexoPeronalByExpediente(ExpedienteId);
                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["AnexoPersonalId"] = data[i].AnexoPersonalId;
                    dr["UnidadOrganica"] = data[i].UnidadOrganica;
                    dr["Nro"] = data[i].Nro;
                    dr["Actividad"] = data[i].Actividad;
                    dr["Cargo"] = data[i].Cargo;
                    dr["EscalaIngreso"] = data[i].EscalaIngreso;
                    dr["Cantidad"] = data[i].Cantidad;
                    dr["Duracion"] = data[i].Duracion;
                    dr["DuracionTotal"] = data[i].DuracionTotal;
                    dr["CostoMinuto"] = data[i].CostoMinuto;
                    dr["CostoTotal"] = data[i].CostoTotal;
                    dr["TablaAsmeId"] = data[i].TablaAsmeId;
                    dr["NomEntidad"] = data[i].Expediente.Entidad.Nombre;
                    dr["NomUndOrgResponsable"] = data[i].TablaAsme.Procedimiento.UndOrgResponsable.Nombre;
                    dr["CodProcedimiento"] = data[i].TablaAsme.Procedimiento.CodigoCorto;
                    dr["NomProcedimiento"] = data[i].TablaAsme.Procedimiento.Denominacion;
                    dr["NomTablaAsme2"] = data[i].TablaAsme.Descripcion;
                    //dr["NomTablaAsme"] = "1";
                    dr["CantModalidades"] = data.Where(x => x.TablaAsme.ProcedimientoId == data[i].TablaAsme.ProcedimientoId)
                                                .Select(x => x.TablaAsmeId)
                                                .Distinct()
                                                .Count();

                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptAnexo01.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Anexo01", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public ActionResult AnexoPersonalPDF(long ExpedienteId)
        {
            try
            {
                var ds = new DataSet1.AnexoPersonalDataTable();
                var data = _reporteService.GetAnexoPeronalByExpediente(ExpedienteId);
                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["AnexoPersonalId"] = data[i].AnexoPersonalId;
                    dr["UnidadOrganica"] = data[i].UnidadOrganica;
                    dr["Nro"] = data[i].Nro;
                    dr["Actividad"] = data[i].Actividad;
                    dr["Cargo"] = data[i].Cargo;
                    dr["EscalaIngreso"] = data[i].EscalaIngreso;
                    dr["Cantidad"] = data[i].Cantidad;
                    dr["Duracion"] = data[i].Duracion;
                    dr["DuracionTotal"] = data[i].DuracionTotal;
                    dr["CostoMinuto"] = data[i].CostoMinuto;
                    dr["CostoTotal"] = data[i].CostoTotal;
                    dr["TablaAsmeId"] = data[i].TablaAsmeId;
                    dr["NomEntidad"] = data[i].Expediente.Entidad.Nombre;
                    dr["NomUndOrgResponsable"] = data[i].TablaAsme.Procedimiento.UndOrgResponsable.Nombre;
                    dr["CodProcedimiento"] = data[i].TablaAsme.Procedimiento.CodigoCorto;
                    dr["NomProcedimiento"] = data[i].TablaAsme.Procedimiento.Denominacion;
                    //dr["NomTablaAsme"] = data[i].TablaAsme.Descripcion;
                    dr["NomTablaAsme"] = "1";
                    dr["CantModalidades"] = data.Where(x => x.TablaAsme.ProcedimientoId == data[i].TablaAsme.ProcedimientoId)
                                                .Select(x => x.TablaAsmeId)
                                                .Distinct()
                                                .Count();

                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptAnexo01.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarPDF());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Anexo01", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public ActionResult AnexoIdentPDF(long ExpedienteId, TipoRecurso tipo)
        {
            try
            {
                var ds = new DataSet1.AnexoIdentificableDataTable();
                var data = _reporteService.GetAnexoIdentificableByExpediente(ExpedienteId, tipo);

                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["AnexoIdentificableId"] = data[i].AnexoIdentificableId;
                    dr["TipoRecursoId"] = (int)data[i].TipoRecurso;
                    dr["TipoRecurso"] = data[i].TipoRecursoNom;
                    dr["TablaAsmeId"] = data[i].TablaAsmeId;
                    dr["UnidadOrganica"] = data[i].UnidadOrganica;
                    dr["Nro"] = data[i].Nro;
                    dr["Actividad"] = data[i].Actividad;
                    dr["Codigo"] = data[i].Codigo;
                    dr["Nombre"] = data[i].Nombre;
                    dr["UnidadMedida"] = data[i].UnidadMedida;
                    dr["Cantidad"] = data[i].Cantidad;
                    dr["CostoUnitario"] = data[i].CostoUnitario;
                    dr["CostoTotal"] = data[i].CostoTotal;
                    dr["NomEntidad"] = data[i].Expediente.Entidad.Nombre;
                    dr["CodProcedimiento"] = data[i].TablaAsme.Procedimiento.CodigoCorto;
                    dr["NomProcedimiento"] = data[i].TablaAsme.Procedimiento.Denominacion;
                    dr["NomUndOrgResponsable"] = data[i].TablaAsme.Procedimiento.UndOrgResponsable.Nombre;
                    dr["NomTablaAsme"] = data[i].TablaAsme.Descripcion;
                    dr["CantModalidades"] = data.Where(x => x.TablaAsme.ProcedimientoId == data[i].TablaAsme.ProcedimientoId)
                                                .Select(x => x.TablaAsmeId)
                                                .Distinct()
                                                .Count();

                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptAnexo23.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarPDF());
                return File(stream, rpt.mimeType, string.Format("Anexo0{0}.{1}", (short)tipo, rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult AnexoNoIdentPDF(long ExpedienteId, TipoRecurso tipo)
        {
            try
            {
                var ds = new DataSet1.AnexoNoIdentificableDataTable();
                var data = _reporteService.GetAnexoNoIdentificableByExpediente(ExpedienteId, tipo);

                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["AnexoNoIdentificableId"] = data[i].AnexoNoIdentificableId;
                    dr["TipoRecursoId"] = (int)data[i].TipoRecurso;
                    dr["TipoRecurso"] = data[i].TipoRecursoNom;
                    dr["TablaAsmeId"] = data[i].TablaAsmeId;
                    dr["Codigo"] = data[i].Codigo;
                    dr["Nombre"] = data[i].Nombre;
                    dr["PctAnual"] = data[i].PctAnual;
                    dr["CostoUnitario"] = data[i].CostoUnitario;
                    dr["CostoTotal"] = data[i].CostoTotal;
                    dr["UnidadMedida"] = data[i].UnidadMedida;
                    dr["NomEntidad"] = data[i].Expediente.Entidad.Nombre;
                    dr["CodProcedimiento"] = data[i].TablaAsme.Procedimiento.CodigoCorto;
                    dr["NomProcedimiento"] = data[i].TablaAsme.Procedimiento.Denominacion;
                    dr["NomUndOrgResponsable"] = data[i].TablaAsme.Procedimiento.UndOrgResponsable.Nombre;
                    dr["NomTablaAsme"] = data[i].TablaAsme.Descripcion;
                    dr["CantModalidades"] = data.Where(x => x.TablaAsme.ProcedimientoId == data[i].TablaAsme.ProcedimientoId)
                                                .Select(x => x.TablaAsmeId)
                                                .Distinct()
                                                .Count();
                    dr["Prestaciones"] = data[i].TablaAsme.Prestaciones;

                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptAnexo4567.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarPDF());
                return File(stream, rpt.mimeType, string.Format("Anexo0{0}.{1}", (short)tipo, rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult ResumenPDF(long ExpedienteId)
        {
            try
            {
                var ds = new DataSet1.ResumenDataTable();
                //var data = _tablaAsmeService.GetByExpediente(ExpedienteId);
                var data = _tablaAsmeService.GetByExpedienteSinEliminados(ExpedienteId);

                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["TablaAsmeId"] = data[i].TablaAsmeId;
                    dr["ProcedimientoId"] = data[i].ProcedimientoId;
                    dr["CodProcedimiento"] = data[i].Procedimiento.CodigoCorto;
                    dr["NomProcedimiento"] = data[i].Procedimiento.Denominacion + " - " + data[i].Descripcion;
                    dr["Prestaciones"] = data[i].Prestaciones;
                    dr["Personal"] = data[i].Personal;
                    dr["MatFungible"] = data[i].MaterialFungible;
                    dr["ServIdentificable"] = data[i].ServicioIdentificable;
                    dr["MatNoFungible"] = data[i].MaterialNoFungible;
                    dr["SerTerceros"] = data[i].ServicioTerceros;
                    dr["Depreciacion"] = data[i].Depreciacion;
                    dr["Fijo"] = data[i].Fijos;
                    dr["CostoUnitatio"] = data[i].CostoUnitario;
                    dr["Descripcion"] = data[i].Descripcion;

                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptResumen.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("dsResumen", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarPDF());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Resumen", rpt.extension));
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                throw ex;
            }
        }
        public ActionResult Incentivos(long EntidadId)
        {
            try
            {
                var ds = new DataSet1.IncentivosFormulasDataTable();
                var data = _IncentivosFormulasService.GetByone(EntidadId);

                {
                    DataRow dr = ds.NewRow();
                    dr["Numero_Licencias_Bajo"] = data.Numero_Licencias_Bajo;
                    dr["Numero_Licencias_medio"] = data.Numero_Licencias_medio;
                    dr["Numero_Licencias_Alto"] = data.Numero_Licencias_Alto;
                    dr["Numero_Licencias_MuyAlto"] = data.Numero_Licencias_MuyAlto;
                    dr["Licencias_Notificaciones_Bajo"] = data.Licencias_Notificaciones_Bajo;
                    dr["Licencias_Notificaciones_Medio"] = data.Licencias_Notificaciones_Medio;
                    dr["Licencias_Emitida_Alto"] = data.Licencias_Emitida_Alto;
                    dr["Licencias_Emitida_MuyAlto"] = data.Licencias_Emitida_MuyAlto;
                    dr["Total_Bajo_Medio"] = data.Total_Bajo_Medio;
                    dr["Total_Alto_MuyAlto"] = data.Total_Alto_MuyAlto;
                    dr["Meta_Total"] = data.Meta_Total;



                    dr["UserCreacion"] = data.UserCreacion;
                    dr["UserModificacion"] = data.UserModificacion;
                    dr["FecCreacion"] = data.FecCreacion;

                    dr["FecModificacion"] = data.FecModificacion;
                    dr["Estado"] = data.Estado;
                    dr["EntidadId"] = data.EntidadId;
                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/Report2.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Incidencia", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult IncentivosCorte(long EntidadId)
        {
            try
            {
                var ds = new DataSet1.IncentivosFormulasCorteDataTable();
                var data = _IncentivosFormulasCorteService.GetByone(EntidadId);

                {
                    DataRow dr = ds.NewRow();
                    dr["Numero_Licencias_Bajo"] = data.Numero_Licencias_Bajo;
                    dr["Numero_Licencias_medio"] = data.Numero_Licencias_medio;
                    dr["Numero_Licencias_Alto"] = data.Numero_Licencias_Alto;
                    dr["Numero_Licencias_MuyAlto"] = data.Numero_Licencias_MuyAlto;
                    dr["Licencias_Notificaciones_Bajo"] = data.Licencias_Notificaciones_Bajo;
                    dr["Licencias_Notificaciones_Medio"] = data.Licencias_Notificaciones_Medio;
                    dr["Licencias_Emitida_Alto"] = data.Licencias_Emitida_Alto;
                    dr["Licencias_Emitida_MuyAlto"] = data.Licencias_Emitida_MuyAlto;
                    dr["Total_Bajo_Medio"] = data.Total_Bajo_Medio;
                    dr["Total_Alto_MuyAlto"] = data.Total_Alto_MuyAlto;
                    dr["Meta_Total"] = data.Meta_Total;



                    dr["UserCreacion"] = data.UserCreacion;
                    dr["UserModificacion"] = data.UserModificacion;
                    dr["FecCreacion"] = data.FecCreacion;

                    dr["FecModificacion"] = data.FecModificacion;
                    dr["Estado"] = data.Estado;
                    dr["EntidadId"] = data.EntidadId;
                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/Report2.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Incidencia", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public ActionResult rptUsuario()
        {
            try
            {

                var ds = new DataSet1.DescargasDataTable();
                var data = _AuditoriaService.ListaRptUsuario();
                {
                    foreach (Auditoria DS in data)
                    {
                        DataRow dr = ds.NewRow();
                        dr["Campo1"] = DS.Campo1;
                        dr["Campo2"] = DS.Campo2;
                        dr["Campo3"] = DS.Campo3;
                        dr["Campo4"] = DS.Campo4;
                        dr["Campo5"] = DS.Campo5;
                        dr["Campo6"] = DS.Campo6;
                        dr["Campo7"] = DS.Campo7;
                        dr["Campo8"] = DS.Campo8;
                        dr["Campo9"] = DS.Campo9;
                        dr["Campo10"] = DS.Campo10;
                        dr["Campo11"] = DS.Campo11;
                        dr["Campo12"] = DS.Campo12;
                        dr["Campo13"] = DS.Campo13;
                        dr["Campo14"] = DS.Campo14;
                        dr["Campo15"] = DS.Campo15;

                        ds.Rows.Add(dr);
                    }
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptUsuario.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Reporte_Usuario", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public ActionResult rptEquipoTrabajo()
        {
            try
            {

                var ds = new DataSet1.DescargasDataTable();
                var data = _AuditoriaService.ListaRptEquipoTrabajo();
                {
                    foreach (Auditoria DS in data)
                    {
                        DataRow dr = ds.NewRow();
                        dr["Campo1"] = DS.Campo1;
                        dr["Campo2"] = DS.Campo2;
                        dr["Campo3"] = DS.Campo3;
                        dr["Campo4"] = DS.Campo4;
                        dr["Campo5"] = DS.Campo5;
                        dr["Campo6"] = DS.Campo6;
                        dr["Campo7"] = DS.Campo7;
                        dr["Campo8"] = DS.Campo8;
                        dr["Campo9"] = DS.Campo9;
                        dr["Campo10"] = DS.Campo10;
                        dr["Campo11"] = DS.Campo11;
                        dr["Campo12"] = DS.Campo12;
                        dr["Campo13"] = DS.Campo13;
                        dr["Campo14"] = DS.Campo14;
                        dr["Campo15"] = DS.Campo15;

                        ds.Rows.Add(dr);
                    }
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptEquipoTrabajo.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Reporte_EquipoTrabajo", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }



        public ActionResult rptExpediente()
        {
            try
            {

                var ds = new DataSet1.DescargasDataTable();
                var data = _AuditoriaService.ListaRptExpediente();
                {
                    foreach (Auditoria DS in data)
                    {
                        DataRow dr = ds.NewRow();
                        dr["Campo1"] = DS.Campo1;
                        dr["Campo2"] = DS.Campo2;
                        dr["Campo3"] = DS.Campo3;
                        dr["Campo4"] = DS.Campo4;
                        dr["Campo5"] = DS.Campo5;
                        dr["Campo6"] = DS.Campo6;
                        dr["Campo7"] = DS.Campo7;
                        dr["Campo8"] = DS.Campo8;
                        dr["Campo9"] = DS.Campo9;
                        dr["Campo10"] = DS.Campo10;
                        dr["Campo11"] = DS.Campo11;
                        dr["Campo12"] = DS.Campo12;
                        dr["Campo13"] = DS.Campo13;
                        dr["Campo14"] = DS.Campo14;
                        dr["Campo15"] = DS.Campo15;
                        dr["Campo16"] = DS.Campo16;
                        dr["Campo17"] = DS.Campo17;
                        dr["Campo18"] = DS.Campo18;
                        dr["Campo19"] = DS.Campo19;
                        dr["Campo20"] = DS.Campo20;
                        dr["Campo21"] = DS.Campo21;
                        dr["Campo22"] = DS.Campo22;
                        dr["Campo23"] = DS.Campo23;
                        ds.Rows.Add(dr);
                    }
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptExpediente.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Reporte_Expediente", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult ImformacionAuditoria(Int64 EntidadId, string nombreEntidad, string Usuario, string Actividad, string Pantalla, string Fecha, int roladmi)
        {
            try
            {
                Auditoria fill = new Auditoria();
                fill.EntidadId = EntidadId;
                fill.NombreEntidad = nombreEntidad;
                fill.Usuario = Usuario;
                fill.Actividad = Actividad;
                fill.Pantalla = Pantalla;
                fill.FecCreaciontexto = Fecha;



                var ds = new DataSet1.AuditoriaDataTable();
                var data = _AuditoriaService.GetAllReporte(fill, roladmi);
                {
                    foreach (Auditoria DS in data)
                    {
                        DataRow dr = ds.NewRow();
                        dr["NombreEntidad"] = DS.Entidad.Nombre.ToUpper();
                        dr["Usuario"] = DS.Usuario.ToUpper();
                        dr["Actividad"] = DS.Actividad;
                        dr["Pantalla"] = DS.Pantalla.ToUpper();
                        dr["FecCreacion"] = DS.FecCreacion;


                        dr["AuditoriaID"] = DS.AuditoriaID;
                        dr["EntidadId"] = DS.EntidadId;
                        dr["SectorId"] = DS.SectorId;
                        dr["ProvinciaId"] = DS.ProvinciaId;
                        dr["UserCreacion"] = DS.UserCreacion;
                        ds.Rows.Add(dr);
                    }
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/Report4.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "ReporteAuditoria", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public ActionResult ImformacionIncentivos(long EntidadId, int Tipoperiodo, Rol Roles)
        {
            try
            {
                var ds = new DataSet1.IncentivosDataTable();
                var data = _IncentivosService.GetByImformacionIncentivos(EntidadId, Tipoperiodo, Roles);
                var nivel = "";
                var Ingreso = "";
                int NUM = 1;
                //elimianar
                //string dateString = "01/01/1999";
                {
                    foreach (Incentivos DS in data)
                    {
                        DataRow dr = ds.NewRow();

                        if (DS.NivelRiesgo == 1)
                        {
                            nivel = "Bajo";
                        }
                        else if (DS.NivelRiesgo == 2)
                        {
                            nivel = "Medio";
                        }
                        else if (DS.NivelRiesgo == 3)
                        {
                            nivel = "Alto";
                        }
                        else
                        {
                            nivel = "Muy Alto";
                        }

                        dr["descripcionnivel"] = nivel;
                        dr["NivelRiesgo"] = DS.NivelRiesgo;
                        dr["Fec_Ing_Sol"] = DS.Fec_Ing_Sol;
                        dr["NumExpediente"] = DS.NumExpediente;
                        dr["Actividadogironegocio"] = DS.Actividadogironegocio;
                        dr["Girocomplementario"] = DS.Girocomplementario;
                        dr["Funcion"] = DS.Funcion;
                        dr["Numeral"] = DS.Numeral;
                        dr["NumRUC"] = DS.NumRUC;
                        dr["Estado"] = NUM;

                        if (DS.Fec_Emision_Licencia_Funcionamiento == null)
                        {
                            //dr["Fec_Emision_Licencia_Funcionamiento"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Emision_Licencia_Funcionamiento"] = DS.Fec_Emision_Licencia_Funcionamiento;
                        }

                        if (DS.Fec_Notificacion_Licencia_Funcionamiento == null)
                        {
                            //dr["Fec_Notificacion_Licencia_Funcionamiento"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Notificacion_Licencia_Funcionamiento"] = DS.Fec_Notificacion_Licencia_Funcionamiento;
                        }

                        if (DS.Fec_Revocacion_Licencia_Funcionamiento == null)
                        {
                            //dr["Fec_Revocacion_Licencia_Funcionamiento"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Revocacion_Licencia_Funcionamiento"] = DS.Fec_Revocacion_Licencia_Funcionamiento;
                        }

                        if (DS.Fec_Suspencion_ITSE_Subsanacion == null)
                        {
                            //dr["Fec_Suspencion_ITSE_Subsanacion"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Suspencion_ITSE_Subsanacion"] = DS.Fec_Suspencion_ITSE_Subsanacion;
                        }


                        if (DS.Fec_Emision_Cert_ITSE == null)
                        {
                            //dr["Fec_Emision_Cert_ITSE"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Emision_Cert_ITSE"] = DS.Fec_Emision_Cert_ITSE;
                        }

                        if (DS.Fec_Notificacion_Cert_ITSE == null)
                        {
                            //dr["Fec_Notificacion_Cert_ITSE"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Notificacion_Cert_ITSE"] = DS.Fec_Notificacion_Cert_ITSE;
                        }

                        if (DS.Cod_Acreditacion_Inspector_ITSE == null)
                        {
                            dr["Cod_Acreditacion_Inspector_ITSE"] = "";
                        }
                        else
                        {
                            dr["Cod_Acreditacion_Inspector_ITSE"] = DS.Cod_Acreditacion_Inspector_ITSE;
                        }


                        dr["EntidadId"] = DS.EntidadId;

                        //dr["Estado"] = DS.Estado;

                        dr["NombreEntidad"] = DS.Entidad.Nombre;
                        dr["Acronimo"] = DS.Entidad.Acronimo;







                        if (DS.Renovacion_ITSE == null)
                        {
                            //dr["Renovacion_ITSE"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Renovacion_ITSE"] = DS.Renovacion_ITSE;
                        }


                        if (DS.EstadoIngreso == 0)
                        {
                            Ingreso = "SI";
                        }
                        else
                        {
                            Ingreso = "NO";
                        }
                        dr["descripcionIngreso"] = Ingreso;

                        dr["EstadoIngreso"] = DS.EstadoIngreso;

                        if (DS.Numero_Revocacion_Licencia_Funcionamiento == null)
                        {
                            dr["Numero_Revocacion_Licencia_Funcionamiento"] = "";
                        }
                        else
                        {
                            dr["Numero_Revocacion_Licencia_Funcionamiento"] = DS.Numero_Revocacion_Licencia_Funcionamiento;
                        }

                        dr["UserCreacion"] = DS.UserCreacion;
                        if (DS.UserModificacion == null)
                        {
                            dr["UserModificacion"] = "";
                        }
                        else
                        {
                            dr["UserModificacion"] = DS.UserModificacion;
                        }



                        //dr["FecModificacion"] = DS.FecModificacion;

                        dr["Archivo_Fec_Ing_Sol"] = 0;
                        dr["Archivo_Fec_Emision_Cert_ITSE"] = 0;
                        dr["Archivo_Fec_Notificacion_Cert_ITSE"] = 0;
                        dr["Archivo_Fec_Emision_Licencia_Funcionamiento"] = 0;
                        dr["Archivo_Fec_Notificacion_Licencia_Funcionamiento"] = 0;
                        dr["Archivo_Fec_Suspencion_ITSE_Subsanacion"] = 0;


                        if (DS.FecModificacion == null)
                        {
                            //dr["FecModificacion"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["FecModificacion"] = DS.FecModificacion;
                        }

                        if (DS.FecCreacion == null)
                        {
                            //dr["FecCreacion"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["FecCreacion"] = DS.FecCreacion;
                        }
                        if (DS.Fec_Suspencion_ITSE == null)
                        {
                            //dr["Fec_Suspencion_ITSE"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Suspencion_ITSE"] = DS.Fec_Suspencion_ITSE;
                        }


                        NUM = NUM++;
                        ds.Rows.Add(dr);
                    }
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/Report3.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "ReporteInformacion", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public ActionResult ImformacionIncentivosCorte(long EntidadId, int Tipoperiodo, Rol Roles)
        {
            try
            {
                var ds = new DataSet1.IncentivosCorteDataTable();
                var data = _IncentivosCorteService.GetByImformacionIncentivosCorte(EntidadId, Tipoperiodo, Roles);
                var nivel = "";
                var Ingreso = "";
                int NUM = 1;
                //elimianar
                //string dateString = "01/01/1999";
                {
                    foreach (IncentivosCorte DS in data)
                    {
                        DataRow dr = ds.NewRow();

                        if (DS.NivelRiesgo == 1)
                        {
                            nivel = "Bajo";
                        }
                        else if (DS.NivelRiesgo == 2)
                        {
                            nivel = "Medio";
                        }
                        else if (DS.NivelRiesgo == 3)
                        {
                            nivel = "Alto";
                        }
                        else
                        {
                            nivel = "Muy Alto";
                        }

                        dr["descripcionnivel"] = nivel;
                        dr["NivelRiesgo"] = DS.NivelRiesgo;
                        dr["Fec_Ing_Sol"] = DS.Fec_Ing_Sol;
                        dr["NumExpediente"] = DS.NumExpediente;
                        dr["Actividadogironegocio"] = DS.Actividadogironegocio;
                        dr["Girocomplementario"] = DS.Girocomplementario;
                        dr["Funcion"] = DS.Funcion;
                        dr["Numeral"] = DS.Numeral;
                        dr["NumRUC"] = DS.NumRUC;
                        dr["Estado"] = NUM;

                        if (DS.Fec_Emision_Licencia_Funcionamiento == null)
                        {
                            //dr["Fec_Emision_Licencia_Funcionamiento"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Emision_Licencia_Funcionamiento"] = DS.Fec_Emision_Licencia_Funcionamiento;
                        }

                        if (DS.Fec_Notificacion_Licencia_Funcionamiento == null)
                        {
                            //dr["Fec_Notificacion_Licencia_Funcionamiento"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Notificacion_Licencia_Funcionamiento"] = DS.Fec_Notificacion_Licencia_Funcionamiento;
                        }

                        if (DS.Fec_Revocacion_Licencia_Funcionamiento == null)
                        {
                            //dr["Fec_Revocacion_Licencia_Funcionamiento"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Revocacion_Licencia_Funcionamiento"] = DS.Fec_Revocacion_Licencia_Funcionamiento;
                        }

                        if (DS.Fec_Suspencion_ITSE_Subsanacion == null)
                        {
                            //dr["Fec_Suspencion_ITSE_Subsanacion"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Suspencion_ITSE_Subsanacion"] = DS.Fec_Suspencion_ITSE_Subsanacion;
                        }

                        if (DS.Fec_Emision_Cert_ITSE == null)
                        {
                            //dr["Fec_Emision_Cert_ITSE"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Emision_Cert_ITSE"] = DS.Fec_Emision_Cert_ITSE;
                        }

                        if (DS.Fec_Notificacion_Cert_ITSE == null)
                        {
                            //dr["Fec_Notificacion_Cert_ITSE"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Notificacion_Cert_ITSE"] = DS.Fec_Notificacion_Cert_ITSE;
                        }

                        if (DS.Cod_Acreditacion_Inspector_ITSE == null)
                        {
                            dr["Cod_Acreditacion_Inspector_ITSE"] = "";
                        }
                        else
                        {
                            dr["Cod_Acreditacion_Inspector_ITSE"] = DS.Cod_Acreditacion_Inspector_ITSE;
                        }

                        dr["EntidadId"] = DS.EntidadId;
                        //dr["Estado"] = DS.Estado;
                        dr["NombreEntidad"] = DS.Entidad.Nombre;
                        dr["Acronimo"] = DS.Entidad.Acronimo;

                        if (DS.Renovacion_ITSE == null)
                        {
                            //dr["Renovacion_ITSE"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Renovacion_ITSE"] = DS.Renovacion_ITSE;
                        }

                        if (DS.EstadoIngreso == 0)
                        {
                            Ingreso = "SI";
                        }
                        else
                        {
                            Ingreso = "NO";
                        }
                        dr["descripcionIngreso"] = Ingreso;

                        dr["EstadoIngreso"] = DS.EstadoIngreso;

                        if (DS.Numero_Revocacion_Licencia_Funcionamiento == null)
                        {
                            dr["Numero_Revocacion_Licencia_Funcionamiento"] = "";
                        }
                        else
                        {
                            dr["Numero_Revocacion_Licencia_Funcionamiento"] = DS.Numero_Revocacion_Licencia_Funcionamiento;
                        }

                        dr["UserCreacion"] = DS.UserCreacion;
                        if (DS.UserModificacion == null)
                        {
                            dr["UserModificacion"] = "";
                        }
                        else
                        {
                            dr["UserModificacion"] = DS.UserModificacion;
                        }

                        //dr["FecModificacion"] = DS.FecModificacion;
                        dr["Archivo_Fec_Ing_Sol"] = 0;
                        dr["Archivo_Fec_Emision_Cert_ITSE"] = 0;
                        dr["Archivo_Fec_Notificacion_Cert_ITSE"] = 0;
                        dr["Archivo_Fec_Emision_Licencia_Funcionamiento"] = 0;
                        dr["Archivo_Fec_Notificacion_Licencia_Funcionamiento"] = 0;
                        dr["Archivo_Fec_Suspencion_ITSE_Subsanacion"] = 0;

                        if (DS.FecModificacion == null)
                        {
                            //dr["FecModificacion"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["FecModificacion"] = DS.FecModificacion;
                        }

                        if (DS.FecCreacion == null)
                        {
                            //dr["FecCreacion"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["FecCreacion"] = DS.FecCreacion;
                        }

                        if (DS.Fec_Suspencion_ITSE == null)
                        {
                            //dr["Fec_Suspencion_ITSE"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["Fec_Suspencion_ITSE"] = DS.Fec_Suspencion_ITSE;
                        }

                        if (DS.FecCorte == null)
                        {
                            //dr["FecCorte"] = DateTime.Parse(dateString);
                        }
                        else
                        {
                            dr["FecCorte"] = DS.FecCorte;
                        }

                        dr["Eva_Fec_doc"] = DS.Eva_Fec_doc;
                        dr["Eva_Doc_corresponde"] = DS.Eva_Doc_corresponde;

                        if (DS.Eva_Comentario == null)
                        {
                            dr["Eva_Comentario"] = "";
                        }
                        else
                        {
                            dr["Eva_Comentario"] = DS.Eva_Comentario;
                        }
                        if (DS.Eva_Observacion == null)
                        {
                            dr["Eva_Observacion"] = "";
                        }
                        else
                        {
                            dr["Eva_Observacion"] = DS.Eva_Observacion;
                        }
                        dr["Eva_Resultado"] = DS.Eva_Resultado;
                        NUM = NUM++;
                        ds.Rows.Add(dr);
                    }
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptIncentivosCorte.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "ReporteInformacion", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult AnexoIdent(long ExpedienteId, TipoRecurso tipo)
        {
            try
            {
                var ds = new DataSet1.AnexoIdentificableDataTable();
                var data = _reporteService.GetAnexoIdentificableByExpediente(ExpedienteId, tipo);

                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["AnexoIdentificableId"] = data[i].AnexoIdentificableId;
                    dr["TipoRecursoId"] = (int)data[i].TipoRecurso;
                    dr["TipoRecurso"] = data[i].TipoRecursoNom;
                    dr["TablaAsmeId"] = data[i].TablaAsmeId;
                    dr["UnidadOrganica"] = data[i].UnidadOrganica;
                    dr["Nro"] = data[i].Nro;
                    dr["Actividad"] = data[i].Actividad;
                    dr["Codigo"] = data[i].Codigo;
                    dr["Nombre"] = data[i].Nombre;
                    dr["UnidadMedida"] = data[i].UnidadMedida;
                    dr["Cantidad"] = data[i].Cantidad;
                    dr["CostoUnitario"] = data[i].CostoUnitario;
                    dr["CostoTotal"] = data[i].CostoTotal;
                    dr["NomEntidad"] = data[i].Expediente.Entidad.Nombre;
                    dr["CodProcedimiento"] = data[i].TablaAsme.Procedimiento.CodigoCorto;
                    dr["NomProcedimiento"] = data[i].TablaAsme.Procedimiento.Denominacion;
                    dr["NomUndOrgResponsable"] = data[i].TablaAsme.Procedimiento.UndOrgResponsable.Nombre;
                    dr["NomTablaAsme"] = data[i].TablaAsme.Descripcion;
                    dr["CantModalidades"] = data.Where(x => x.TablaAsme.ProcedimientoId == data[i].TablaAsme.ProcedimientoId)
                                                .Select(x => x.TablaAsmeId)
                                                .Distinct()
                                                .Count();

                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptAnexo23.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("Anexo0{0}.{1}", (short)tipo, rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public ActionResult AnexoNoIdent(long ExpedienteId, TipoRecurso tipo)
        {
            try
            {
                var ds = new DataSet1.AnexoNoIdentificableDataTable();
                var data = _reporteService.GetAnexoNoIdentificableByExpediente(ExpedienteId, tipo);

                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["AnexoNoIdentificableId"] = data[i].AnexoNoIdentificableId;
                    dr["TipoRecursoId"] = (int)data[i].TipoRecurso;
                    dr["TipoRecurso"] = data[i].TipoRecursoNom;
                    dr["TablaAsmeId"] = data[i].TablaAsmeId;
                    dr["Codigo"] = data[i].Codigo;
                    dr["Nombre"] = data[i].Nombre;
                    dr["PctAnual"] = data[i].PctAnual;
                    dr["CostoUnitario"] = data[i].CostoUnitario;
                    dr["CostoTotal"] = data[i].CostoTotal;
                    dr["UnidadMedida"] = data[i].UnidadMedida;
                    dr["NomEntidad"] = data[i].Expediente.Entidad.Nombre;
                    dr["CodProcedimiento"] = data[i].TablaAsme.Procedimiento.CodigoCorto;
                    dr["NomProcedimiento"] = data[i].TablaAsme.Procedimiento.Denominacion;
                    dr["NomUndOrgResponsable"] = data[i].TablaAsme.Procedimiento.UndOrgResponsable.Nombre;
                    dr["NomTablaAsme"] = data[i].TablaAsme.Descripcion;
                    dr["CantModalidades"] = data.Where(x => x.TablaAsme.ProcedimientoId == data[i].TablaAsme.ProcedimientoId)
                                                .Select(x => x.TablaAsmeId)
                                                .Distinct()
                                                .Count();
                    dr["Prestaciones"] = data[i].TablaAsme.Prestaciones;

                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptAnexo4567.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("DataSet1", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("Anexo0{0}.{1}", (short)tipo, rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public ActionResult TablaAsme(long TablaAsmeId, Security.UsuarioInfo user)
        {
            try
            {
                var dsDataASME = new DataSet1.DataASMEDataTable();
                var dsTotales = new DataSet1.DataASMETotalesDataTable();
                var dsTablaAsme = new DataSet1.TablaASMEDataTable();

                var dataAsme = _actividadService.GetDataByTablaAsme(TablaAsmeId).Where(x => x.Actividad.TipoActividad != TipoActividad.Espera).ToList();
                //var dataAsme = _actividadService.GetDataByTablaAsmeActividad(TablaAsmeId);
                var asme = _tablaAsmeService.GetOne(TablaAsmeId);
                var actividades = asme.Actividad;
                //var espera = _actividadService.GetDataByTablaAsmeActividad(TablaAsmeId).Where(x => x.TipoActividad == TipoActividad.Espera).ToList();

                var espera = _actividadService.GetDataByTablaAsmeActividad(TablaAsmeId).ToList();



                var dataAsmeRecursos = _actividadService.GetDataByTablaAsmeRecursos(user.EntidadId);

                DataRow dr = dsTotales.NewRow();
                dr["Operacion"] = actividades.Count(x => x.TipoActividad == TipoActividad.Operacion);
                dr["Revision"] = actividades.Count(x => x.TipoActividad == TipoActividad.Revision);
                dr["Traslado"] = actividades.Count(x => x.TipoActividad == TipoActividad.Traslado);
                dr["Espera"] = actividades.Count(x => x.TipoActividad == TipoActividad.Espera);
                dr["Archivo"] = actividades.Count(x => x.TipoActividad == TipoActividad.Archivo);
                dr["VA"] = actividades.Count(x => x.TipoValor == TipoValor.VA);
                dr["Control"] = actividades.Count(x => x.TipoValor == TipoValor.Control);
                dr["SVA"] = actividades.Count(x => x.TipoValor == TipoValor.SVA);
                dr["DuracionTotal"] = actividades.Sum(x => x.Duracion);
                dsTotales.Rows.Add(dr);

                if (dataAsme.Count() != 0)
                {
                    //for (int i = 0; i < dataAsmeRecursos.Count(); i++)
                    //{
                    //    for (int hj = 1; hj < 20; hj++)
                    //    { 

                    //        dr = dsDataASME.NewRow();
                    //        dr["Codigo"] = dataAsmeRecursos[i].RecursoId;
                    //        dr["Nombre"] = dataAsmeRecursos[i].Nombre;
                    //        dr["TipoRecursoId"] = (short)dataAsmeRecursos[i].TipoRecurso;
                    //        dr["TipoRecurso"] = dataAsmeRecursos[i].TipoRecurso.ToString();
                    //        dr["Nro"] = hj;
                    //        dr["Descripcion"] = "Nombre actividad "+ hj;
                    //        dr["UnidadOrganica"] = "Código de la unidad Orgánica (Número)";
                    //        dr["Seccion"] = (short)dataAsmeRecursos[i].TipoRecurso < 4 ? "CONTADOR DE RECURSOS" : "IDENTIFICADOR DE RECURSOS";
                    //        dr["Duracion"] = 0;
                    //        dr["TipoActividad"] = 0;
                    //        dr["TipoValor"] = 0;
                    //        dr["Cantidad"] = 0;
                    //        dsDataASME.Rows.Add(dr);
                    //    }
                    //}
                    //}
                    //else
                    //{
                    for (int i = 0; i < dataAsme.Count(); i++)
                    {

                        dr = dsDataASME.NewRow();


                        dr["Codigo"] = dataAsme[i].Recurso.RecursoId;
                        dr["Nombre"] = dataAsme[i].Recurso.Nombre;
                        dr["TipoRecursoId"] = (short)dataAsme[i].Recurso.TipoRecurso;
                        dr["TipoRecurso"] = dataAsme[i].Recurso.TipoRecurso.ToString();
                        dr["Nro"] = dataAsme[i].Actividad.Orden;
                        dr["Descripcion"] = dataAsme[i].Actividad.Descripcion;
                        dr["UnidadOrganica"] = dataAsme[i].Actividad.UnidadOrganica.Nombre;
                        dr["Seccion"] = (short)dataAsme[i].Recurso.TipoRecurso < 4 ? "CONTADOR DE RECURSOS" : "IDENTIFICADOR DE RECURSOS";
                        dr["Duracion"] = dataAsme[i].Actividad.Duracion;
                        dr["TipoActividad"] = (short)dataAsme[i].Actividad.TipoActividad;
                        dr["TipoValor"] = (short)dataAsme[i].Actividad.TipoValor;
                        dr["Cantidad"] = dataAsme[i].Cantidad;
                        dsDataASME.Rows.Add(dr);

                        //dr = dsDataASME.NewRow();

                        //var valoractividad = dataAsme[i].ActividadRecurso;
                        //if (valoractividad.Count() != 0)
                        //{
                        //    dr["Codigo"] = dataAsme[i].ActividadRecurso[0].Recurso.RecursoId;
                        //    dr["Nombre"] = dataAsme[i].ActividadRecurso[0].Recurso.Nombre;
                        //    dr["TipoRecursoId"] = (short)dataAsme[i].ActividadRecurso[0].Recurso.TipoRecurso;
                        //    dr["TipoRecurso"] = dataAsme[i].ActividadRecurso[0].Recurso.TipoRecurso.ToString();
                        //}
                        //else {
                        //    dr["Codigo"] = "";
                        //    dr["Nombre"] = "";
                        //    dr["TipoRecursoId"] =0;
                        //    dr["TipoRecurso"] = "Ninguno";
                        //}
                        //dr["Nro"] = dataAsme[i].Orden;
                        //dr["Descripcion"] = dataAsme[i].Descripcion;
                        //dr["UnidadOrganica"] = dataAsme[i].UnidadOrganica.Nombre;

                        //if (valoractividad.Count() != 0)
                        //{
                        //    dr["Seccion"] = (short)dataAsme[i].ActividadRecurso[0].Recurso.TipoRecurso < 4 ? "CONTADOR DE RECURSOS" : "IDENTIFICADOR DE RECURSOS";
                        //}
                        //else {

                        //    dr["Seccion"] ="";
                        //}

                        //dr["Duracion"] = dataAsme[i].Duracion;
                        //dr["TipoActividad"] = (short)dataAsme[i].TipoActividad;
                        //dr["TipoValor"] = (short)dataAsme[i].TipoValor;

                        //if (valoractividad.Count() != 0)
                        //{
                        //    dr["Cantidad"] = dataAsme[i].ActividadRecurso[0].Cantidad;
                        //}
                        //else
                        //{

                        //    dr["Cantidad"] = 0;
                        //}

                        //dsDataASME.Rows.Add(dr);

                    }
                }


                if (espera.Count() != 0)
                {

                    for (int i = 0; i < espera.Count(); i++)
                    {

                        dr = dsDataASME.NewRow();

                        var valoractividad = espera[i].ActividadRecurso;

                        dr["Codigo"] = "";
                        dr["Nombre"] = "";
                        dr["TipoRecursoId"] = 0;
                        dr["TipoRecurso"] = "";
                        dr["Nro"] = espera[i].Orden;
                        dr["Descripcion"] = espera[i].Descripcion;
                        dr["UnidadOrganica"] = espera[i].UnidadOrganica.Nombre;

                        dr["Seccion"] = "0";
                        dr["Duracion"] = espera[i].Duracion;
                        dr["TipoActividad"] = (short)espera[i].TipoActividad;
                        dr["TipoValor"] = (short)espera[i].TipoValor;

                        dr["Cantidad"] = 0;

                        dsDataASME.Rows.Add(dr);


                    }
                }


                dr = dsTablaAsme.NewRow();
                dr["NomEntidad"] = asme.Procedimiento.Expediente.Entidad.Nombre;
                if (asme.Procedimiento.UndOrgResponsable != null)
                {
                    dr["UnidadOrganica"] = asme.Procedimiento.UndOrgResponsable.Nombre;
                }
                else
                {
                    dr["UnidadOrganica"] = null;
                }
                var des = "-";
                dr["CodProcedimiento"] = asme.Procedimiento.CodigoCorto;
                dr["NomProcedimiento"] = asme.Procedimiento.Denominacion;
                if (asme.Descripcion == "")
                {
                    des = asme.Descripcion;
                }
                dr["NomTablaAsme"] = asme.TablaAsmeId;
                dr["CantModalidades"] = 1;
                dsTablaAsme.Rows.Add(dr);

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptTablaASME.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("dsDataASME", dsDataASME.Rows),
                        new ReportDataSource("dsTotales", dsTotales.Rows),
                        new ReportDataSource("dsTablaAsme", dsTablaAsme.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "TablaASME", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult TablaAsmeTotal(long ExpedienteId, Security.UsuarioInfo user)
        {
            try
            {
                var dsDataASME = new DataSet1.DataASMEDataTable();
                var dsTotales = new DataSet1.DataASMETotalesDataTable();
                var dsTablaAsme = new DataSet1.TablaASMEDataTable();

                //var dataAsme = _actividadService.GetDataByTablaAsmeTotal(ExpedienteId).Where(x => x.Actividad.TipoActividad != TipoActividad.Espera).OrderBy(x => x.Actividad.TablaAsme.Procedimiento.ProcedimientoId).ToList();
                Int32 numero = 0;
                TablaAsme asme = new TablaAsme();
                var lsprocedieminto = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion).ToList();
                DataRow dr = dsTotales.NewRow();
                foreach (Procedimiento r in lsprocedieminto)
                {
                    var lsttablaasme = _tablaAsmeService.GetByProcedimiento(r.ProcedimientoId);
                    foreach (TablaAsme t in lsttablaasme)
                    {
                        numero = numero++;

                        var dataAsme = _actividadService.GetDataByTablaAsme(t.TablaAsmeId).Where(x => x.Actividad.TipoActividad != TipoActividad.Espera).ToList();
                        //var dataAsme = _actividadService.GetDataByTablaAsmeActividad(TablaAsmeId);
                        asme = _tablaAsmeService.GetOne(t.TablaAsmeId);
                        var actividades = asme.Actividad;
                        var espera = _actividadService.GetDataByTablaAsmeActividad(t.TablaAsmeId).Where(x => x.TipoActividad == TipoActividad.Espera).ToList();



                        var dataAsmeRecursos = _actividadService.GetDataByTablaAsmeRecursos(user.EntidadId);

                        if (numero == 1)
                        {
                            dr["Operacion"] = actividades.Count(x => x.TipoActividad == TipoActividad.Operacion);
                            dr["Revision"] = actividades.Count(x => x.TipoActividad == TipoActividad.Revision);
                            dr["Traslado"] = actividades.Count(x => x.TipoActividad == TipoActividad.Traslado);
                            dr["Espera"] = actividades.Count(x => x.TipoActividad == TipoActividad.Espera);
                            dr["Archivo"] = actividades.Count(x => x.TipoActividad == TipoActividad.Archivo);
                            dr["VA"] = actividades.Count(x => x.TipoValor == TipoValor.VA);
                            dr["Control"] = actividades.Count(x => x.TipoValor == TipoValor.Control);
                            dr["SVA"] = actividades.Count(x => x.TipoValor == TipoValor.SVA);
                            dr["DuracionTotal"] = actividades.Sum(x => x.Duracion);
                            dsTotales.Rows.Add(dr);
                        }

                        if (dataAsme.Count() != 0)
                        {
                            for (int i = 0; i < dataAsme.Count(); i++)
                            {

                                dr = dsDataASME.NewRow();

                                dr["CodigoCorto"] = dataAsme[i].Actividad.TablaAsme.Procedimiento.CodigoCorto;
                                dr["Procedimiento"] = dataAsme[i].Actividad.TablaAsme.Procedimiento.Denominacion;
                                dr["Codigo"] = dataAsme[i].Recurso.RecursoId;
                                dr["Nombre"] = dataAsme[i].Recurso.Nombre;
                                dr["TipoRecursoId"] = (short)dataAsme[i].Recurso.TipoRecurso;
                                dr["TipoRecurso"] = dataAsme[i].Recurso.TipoRecurso.ToString();
                                dr["Nro"] = dataAsme[i].Actividad.Orden;
                                dr["Descripcion"] = dataAsme[i].Actividad.Descripcion;
                                dr["UnidadOrganica"] = dataAsme[i].Actividad.UnidadOrganica.Nombre;
                                dr["Seccion"] = (short)dataAsme[i].Recurso.TipoRecurso < 4 ? "CONTADOR DE RECURSOS" : "IDENTIFICADOR DE RECURSOS";
                                dr["Duracion"] = dataAsme[i].Actividad.Duracion;
                                dr["TipoActividad"] = (short)dataAsme[i].Actividad.TipoActividad;
                                dr["TipoValor"] = (short)dataAsme[i].Actividad.TipoValor;
                                dr["Cantidad"] = dataAsme[i].Cantidad;
                                dr["TablaAsmeId"] = dataAsme[i].Actividad.TablaAsmeId;
                                dr["NomEntidad"] = "jorge";
                                dr["CodProcedimiento"] = dataAsme[i].Actividad.TablaAsme.Procedimiento.CodigoCorto;
                                dr["NomProcedimiento"] = dataAsme[i].Actividad.TablaAsme.Procedimiento.Denominacion;
                                dr["CantModalidades"] = 1;
                                if (dataAsme[i].Actividad.TablaAsme.Procedimiento.UndOrgResponsable != null)
                                {
                                    dr["UnidadOrganica"] = dataAsme[i].Actividad.TablaAsme.Procedimiento.UndOrgResponsable.Nombre;
                                }
                                else
                                {
                                    dr["UnidadOrganica"] = null;
                                }
                                dsDataASME.Rows.Add(dr);

                            }
                        }


                        if (espera.Count() != 0)
                        {

                            for (int i = 0; i < espera.Count(); i++)
                            {

                                dr = dsDataASME.NewRow();

                                var valoractividad = espera[i].ActividadRecurso;
                                dr["CodigoCorto"] = espera[i].TablaAsme.Procedimiento.CodigoCorto;
                                dr["Procedimiento"] = espera[i].TablaAsme.Procedimiento.Denominacion;
                                dr["Codigo"] = "";
                                dr["Nombre"] = "";
                                dr["TipoRecursoId"] = 0;
                                dr["TipoRecurso"] = "";
                                dr["Nro"] = espera[i].Orden;
                                dr["Descripcion"] = espera[i].Descripcion;
                                dr["UnidadOrganica"] = espera[i].UnidadOrganica.Nombre;

                                dr["Seccion"] = "0";
                                dr["Duracion"] = espera[i].Duracion;
                                dr["TipoActividad"] = (short)espera[i].TipoActividad;
                                dr["TipoValor"] = (short)espera[i].TipoValor;
                                dr["TablaAsmeId"] = (short)espera[i].TablaAsme.TablaAsmeId;
                                dr["Cantidad"] = 0;

                                dr["NomEntidad"] = "jorge";
                                dr["CodProcedimiento"] = espera[i].TablaAsme.Procedimiento.CodigoCorto;
                                dr["NomProcedimiento"] = espera[i].TablaAsme.Procedimiento.Denominacion;
                                dr["CantModalidades"] = 1;
                                if (espera[i].TablaAsme.Procedimiento.UndOrgResponsable != null)
                                {
                                    dr["UnidadOrganica"] = espera[i].TablaAsme.Procedimiento.UndOrgResponsable.Nombre;
                                }
                                else
                                {
                                    dr["UnidadOrganica"] = null;
                                }

                                dsDataASME.Rows.Add(dr);


                            }
                        }
                    }

                }

                dr = dsTablaAsme.NewRow();
                dr["NomEntidad"] = asme.Procedimiento.Expediente.Entidad.Nombre;
                if (asme.Procedimiento.UndOrgResponsable != null)
                {
                    dr["UnidadOrganica"] = asme.Procedimiento.UndOrgResponsable.Nombre;
                }
                else
                {
                    dr["UnidadOrganica"] = null;
                }
                var des = "-";
                dr["CodProcedimiento"] = asme.Procedimiento.CodigoCorto;
                dr["NomProcedimiento"] = asme.Procedimiento.Denominacion;
                if (asme.Descripcion == "")
                {
                    des = asme.Descripcion;
                }
                dr["NomTablaAsme"] = asme.TablaAsmeId;
                dr["TablaAsmeId"] = asme.TablaAsmeId;
                dr["CantModalidades"] = 1;
                dsTablaAsme.Rows.Add(dr);



                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/Report5.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("dsDataASME", dsDataASME.Rows),
                        //new ReportDataSource("dsTotales", dsTotales.Rows),
                        //new ReportDataSource("dsTablaAsme", dsTablaAsme.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "TablaASME", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult TablaAsmefactortupa(long ExpedienteId, Security.UsuarioInfo user)
        {
            try
            {
                var dsFactorTupa = new DataSet1.FactorTupaDataTable();

                //Int32 numero = 0;
                FactorDedicacion factorDedicacion = new FactorDedicacion();

                var lstFactorTupa = _AuditoriaService.rptFactorTupa_NoTupa(ExpedienteId);

                DataRow dr = dsFactorTupa.NewRow();

                var exp = _expedienteService.GetOne(ExpedienteId);

                var Ind = _inductorService.GetAll(exp.EntidadId).Min(x => x.InductorId);

                foreach (FactorDedicacion r in lstFactorTupa)
                {
                    var Indvalor = _inductorValorService.GetOneValor(Ind, ExpedienteId, r.UnidadOrganicaId);
                    dr = dsFactorTupa.NewRow();
                    dr["Unidadorganicanombre"] = r.Unidadorganicanombre;
                    dr["Unidadorganicaid"] = r.UnidadOrganicaId;
                    dr["Codigo"] = r.Codigo;
                    dr["Procemiento"] = r.Procemiento;
                    dr["Orden"] = r.Orden;
                    dr["Actividad"] = r.Actividad;
                    dr["Duracion"] = r.Duracion;
                    dr["Prestaciones"] = r.Prestaciones;
                    dr["Tipoactividad"] = r.Tipoactividad;
                    dr["Tiporecurso"] = r.Tiporecurso;
                    dr["Recursos"] = r.Recursos;
                    dr["Cantidad"] = r.Cantidad;
                    dr["Expedienteid"] = r.ExpedienteId;
                    dr["Modalidad"] = r.Modalidad;
                    dr["InductorValor"] = Indvalor.Valor;

                    dsFactorTupa.Rows.Add(dr);
                }




                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptFactorTupa.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("dsFactorTupa", dsFactorTupa.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "FactorTupa", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public ActionResult TablaAsmeFormato(long TablaAsmeId, Security.UsuarioInfo user)
        {
            try
            {
                var dsDataASME = new DataSet1.DataASMEDataTable();
                var dsTotales = new DataSet1.DataASMETotalesDataTable();
                var dsTablaAsme = new DataSet1.TablaASMEDataTable();

                var dataAsme = _actividadService.GetDataByTablaAsme(TablaAsmeId);
                var asme = _tablaAsmeService.GetOne(TablaAsmeId);
                var actividades = asme.Actividad;

                var dataAsmeRecursos = _actividadService.GetDataByTablaAsmeRecursos(user.EntidadId);

                DataRow dr = dsTotales.NewRow();
                dr["Operacion"] = 0;
                dr["Revision"] = 0;
                dr["Traslado"] = 0;
                dr["Espera"] = 0;
                dr["Archivo"] = 0;
                dr["VA"] = 0;
                dr["Control"] = 0;
                dr["SVA"] = 0;
                dr["DuracionTotal"] = 0;
                dsTotales.Rows.Add(dr);

                for (int i = 0; i < dataAsmeRecursos.Count(); i++)
                {
                    for (int hj = 1; hj < 20; hj++)
                    {
                        dr = dsDataASME.NewRow();
                        dr["Codigo"] = dataAsmeRecursos[i].RecursoId;
                        dr["Nombre"] = dataAsmeRecursos[i].Nombre;
                        dr["TipoRecursoId"] = (short)dataAsmeRecursos[i].TipoRecurso;
                        dr["TipoRecurso"] = dataAsmeRecursos[i].TipoRecurso.ToString();
                        dr["Nro"] = hj;
                        dr["Descripcion"] = "Nombre actividad " + hj;
                        dr["UnidadOrganica"] = "Código de la unidad Orgánica (Número)";
                        dr["Seccion"] = (short)dataAsmeRecursos[i].TipoRecurso < 4 ? "CONTADOR DE RECURSOS" : "IDENTIFICADOR DE RECURSOS";
                        dr["Duracion"] = 0;
                        dr["TipoActividad"] = 0;
                        dr["TipoValor"] = 0;
                        dr["Cantidad"] = 0;
                        dsDataASME.Rows.Add(dr);
                    }
                }



                dr = dsTablaAsme.NewRow();
                dr["NomEntidad"] = asme.Procedimiento.Expediente.Entidad.Nombre;
                if (asme.Procedimiento.UndOrgResponsable != null)
                {
                    dr["UnidadOrganica"] = asme.Procedimiento.UndOrgResponsable.Nombre;
                }
                else
                {
                    dr["UnidadOrganica"] = null;
                }

                dr["CodProcedimiento"] = asme.Procedimiento.CodigoCorto;
                dr["NomProcedimiento"] = asme.Procedimiento.Denominacion;
                dr["NomTablaAsme"] = asme.Descripcion;
                dr["CantModalidades"] = 1;
                dsTablaAsme.Rows.Add(dr);

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptTablaASME.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("dsDataASME", dsDataASME.Rows),
                        new ReportDataSource("dsTotales", dsTotales.Rows),
                        new ReportDataSource("dsTablaAsme", dsTablaAsme.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "TablaASME", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ActionResult ListaTablaAsmeFormato(long TablaAsmeId, Security.UsuarioInfo user)
        {
            try
            {
                //String lstTablaAsmeS = "0";
                //List<ListaRecurso> lstTablaAsme = new List<ListaRecurso>();
                ////ListaRecurso LstRecurso = new ListaRecurso();

                var dsDataASME = new DataSet1.DataASMEDataTable();

                ////System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                ////dynamic item = serializer.Deserialize<object>(lstTablaAsmeS);

                //////string jsonStringSingle = lstTablaAsmeS.Replace("\"", "'");

                ////List<dynamic> dlist = new List<dynamic>();
                ////var json = Newtonsoft.Json.JsonConvert.SerializeObject(item);
                ////List<ListaRecurso> dataTable2 = (List<ListaRecurso>)Newtonsoft.Json.JsonConvert.DeserializeObject(json, (typeof(List<ListaRecurso>)));

                //lstTablaAsme = lstTablaAsmeS.OrderBy(x => x.numero).ToList();

                //var lstTablaAsmeasdasd = System.Web.HttpContext.Current.Session["ListRecursoNumero"];



                List<Simplificacion.Controllers.ListaRecurso> lstTablaAsme = (List<Simplificacion.Controllers.ListaRecurso>)System.Web.HttpContext.Current.Session["ListRecursoNumero"];

                var lstTablaAsmeordern = lstTablaAsme.OrderBy(x => x.numero);
                var dsTotales = new DataSet1.DataASMETotalesDataTable();
                var dsTablaAsme = new DataSet1.TablaASMEDataTable();

                var dataAsme = _actividadService.GetDataByTablaAsme(TablaAsmeId);
                var asme = _tablaAsmeService.GetOne(TablaAsmeId);
                var actividades = asme.Actividad;

                var dataAsmeRecursos = _actividadService.GetDataByTablaAsmeRecursos(user.EntidadId);

                DataRow dr = dsTotales.NewRow();
                dr["Operacion"] = 0;
                dr["Revision"] = 0;
                dr["Traslado"] = 0;
                dr["Espera"] = 0;
                dr["Archivo"] = 0;
                dr["VA"] = 0;
                dr["Control"] = 0;
                dr["SVA"] = 0;
                dr["DuracionTotal"] = 0;
                dsTotales.Rows.Add(dr);

                for (int i = 0; i < lstTablaAsmeordern.Count(); i++)
                {
                    for (int hj = 1; hj < 20; hj++)
                    {
                        dr = dsDataASME.NewRow();
                        dr["Codigo"] = lstTablaAsme[i].RecursoId;
                        dr["Nombre"] = lstTablaAsme[i].Nombre;
                        dr["TipoRecursoId"] = Convert.ToInt32(lstTablaAsme[i].TipoId);
                        dr["TipoRecurso"] = lstTablaAsme[i].Tipo.ToString();
                        dr["Nro"] = hj;
                        dr["Descripcion"] = "Nombre actividad " + hj;
                        dr["UnidadOrganica"] = "Código de la unidad Orgánica (Número)";
                        dr["Seccion"] = Convert.ToInt32(lstTablaAsme[i].TipoId) < 4 ? "CONTADOR DE RECURSOS" : "IDENTIFICADOR DE RECURSOS";
                        dr["Duracion"] = 0;
                        dr["TipoActividad"] = 0;
                        dr["TipoValor"] = 0;
                        dr["Cantidad"] = 0;
                        dsDataASME.Rows.Add(dr);
                    }
                }



                dr = dsTablaAsme.NewRow();
                dr["NomEntidad"] = asme.Procedimiento.Expediente.Entidad.Nombre;
                if (asme.Procedimiento.UndOrgResponsable != null)
                {
                    dr["UnidadOrganica"] = asme.Procedimiento.UndOrgResponsable.Nombre;
                }
                else
                {
                    dr["UnidadOrganica"] = null;
                }

                dr["CodProcedimiento"] = asme.Procedimiento.CodigoCorto;
                dr["NomProcedimiento"] = asme.Procedimiento.Denominacion;
                dr["NomTablaAsme"] = asme.Descripcion;
                dr["CantModalidades"] = 1;
                dsTablaAsme.Rows.Add(dr);

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptTablaASME.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("dsDataASME", dsDataASME.Rows),
                        new ReportDataSource("dsTotales", dsTotales.Rows),
                        new ReportDataSource("dsTablaAsme", dsTablaAsme.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());

               
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "TablaASME", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //public ActionResult ListaTablaAsmeFormato( long TablaAsmeId, List<ListaRecurso> lstTablaAsmeSq, Security.UsuarioInfo user)
        //{
        //    try
        //    {
        //        String lstTablaAsmeS="0";
        //        List<ListaRecurso> lstTablaAsme = new List<ListaRecurso>();
        //        ListaRecurso LstRecurso = new ListaRecurso();

        //        var dsDataASME = new DataSet1.DataASMEDataTable();

        //        System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
        //        dynamic item = serializer.Deserialize<object>(lstTablaAsmeS);

        //        //string jsonStringSingle = lstTablaAsmeS.Replace("\"", "'");

        //        List<dynamic> dlist = new List<dynamic>();
        //         var json = Newtonsoft.Json.JsonConvert.SerializeObject(item);
        //        List<ListaRecurso> dataTable2 = (List<ListaRecurso>)Newtonsoft.Json.JsonConvert.DeserializeObject(json, (typeof(List<ListaRecurso>)));

        //        lstTablaAsme = dataTable2.OrderBy(x => x.numero).ToList();




        //       var dsTotales = new DataSet1.DataASMETotalesDataTable();
        //        var dsTablaAsme = new DataSet1.TablaASMEDataTable();

        //        var dataAsme = _actividadService.GetDataByTablaAsme(TablaAsmeId);
        //        var asme = _tablaAsmeService.GetOne(TablaAsmeId);
        //        var actividades = asme.Actividad;

        //        var dataAsmeRecursos = _actividadService.GetDataByTablaAsmeRecursos(user.EntidadId);

        //        DataRow dr = dsTotales.NewRow();
        //        dr["Operacion"] = 0;
        //        dr["Revision"] = 0;
        //        dr["Traslado"] = 0;
        //        dr["Espera"] = 0;
        //        dr["Archivo"] = 0;
        //        dr["VA"] = 0;
        //        dr["Control"] = 0;
        //        dr["SVA"] = 0;
        //        dr["DuracionTotal"] = 0;
        //        dsTotales.Rows.Add(dr);

        //        for (int i = 0; i < lstTablaAsme.Count(); i++)
        //        {
        //            for (int hj = 1; hj < 20; hj++)
        //            {
        //                dr = dsDataASME.NewRow();
        //                dr["Codigo"] = lstTablaAsme[i].RecursoId;
        //                dr["Nombre"] = lstTablaAsme[i].Nombre;
        //                dr["TipoRecursoId"] = Convert.ToInt32(lstTablaAsme[i].TipoId);
        //                dr["TipoRecurso"] = lstTablaAsme[i].Tipo.ToString();
        //                dr["Nro"] = hj;
        //                dr["Descripcion"] = "Nombre actividad " + hj;
        //                dr["UnidadOrganica"] = "Código de la unidad Orgánica (Número)";
        //                dr["Seccion"] = Convert.ToInt32(lstTablaAsme[i].TipoId) < 4 ? "CONTADOR DE RECURSOS" : "IDENTIFICADOR DE RECURSOS";
        //                dr["Duracion"] = 0;
        //                dr["TipoActividad"] = 0;
        //                dr["TipoValor"] = 0;
        //                dr["Cantidad"] = 0;
        //                dsDataASME.Rows.Add(dr);
        //            }
        //        }



        //        dr = dsTablaAsme.NewRow();
        //        dr["NomEntidad"] = asme.Procedimiento.Expediente.Entidad.Nombre;
        //        if (asme.Procedimiento.UndOrgResponsable != null)
        //        {
        //            dr["UnidadOrganica"] = asme.Procedimiento.UndOrgResponsable.Nombre;
        //        }
        //        else
        //        {
        //            dr["UnidadOrganica"] = null;
        //        }

        //        dr["CodProcedimiento"] = asme.Procedimiento.CodigoCorto;
        //        dr["NomProcedimiento"] = asme.Procedimiento.Denominacion;
        //        dr["NomTablaAsme"] = asme.Descripcion;
        //        dr["CantModalidades"] = 1;
        //        dsTablaAsme.Rows.Add(dr);

        //        ReporteModel rpt = new ReporteModel()
        //        {
        //            File = Server.MapPath("~/Reportes/rptTablaASME.rdlc"),
        //            Parametros = new List<ReportParameter>(),
        //            Source = new List<ReportDataSource>()
        //            {
        //                new ReportDataSource("dsDataASME", dsDataASME.Rows),
        //                new ReportDataSource("dsTotales", dsTotales.Rows),
        //                new ReportDataSource("dsTablaAsme", dsTablaAsme.Rows)
        //            }
        //        };
        //        var stream = new MemoryStream(rpt.DescargarExcel());


        //        return File(stream, rpt.mimeType, string.Format("{0}.{1}", "TablaASME", rpt.extension));
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}
        public ActionResult TablaAsmeModelo(long TablaAsmeId)
        {
            try
            {
                var dsDataASME = new DataSet1.DataASMEDataTable();
                var dsTotales = new DataSet1.DataASMETotalesDataTable();
                var dsTablaAsme = new DataSet1.TablaASMEDataTable();

                var dataAsme = _actividadService.GetDataByTablaAsme(TablaAsmeId);
                var asme = _tablaAsmeService.GetOne(TablaAsmeId);
                var actividades = asme.Actividad;

                DataRow dr = dsTotales.NewRow();
                dr["Operacion"] = actividades.Count(x => x.TipoActividad == TipoActividad.Operacion);
                dr["Revision"] = actividades.Count(x => x.TipoActividad == TipoActividad.Revision);
                dr["Traslado"] = actividades.Count(x => x.TipoActividad == TipoActividad.Traslado);
                dr["Espera"] = actividades.Count(x => x.TipoActividad == TipoActividad.Espera);
                dr["Archivo"] = actividades.Count(x => x.TipoActividad == TipoActividad.Archivo);
                dr["VA"] = actividades.Count(x => x.TipoValor == TipoValor.VA);
                dr["Control"] = actividades.Count(x => x.TipoValor == TipoValor.Control);
                dr["SVA"] = actividades.Count(x => x.TipoValor == TipoValor.SVA);
                dr["DuracionTotal"] = actividades.Sum(x => x.Duracion);
                dsTotales.Rows.Add(dr);

                for (int i = 0; i < dataAsme.Count(); i++)
                {
                    dr = dsDataASME.NewRow();
                    dr["Codigo"] = dataAsme[i].Recurso.Codigo;
                    dr["Nombre"] = dataAsme[i].Recurso.Nombre;
                    dr["TipoRecursoId"] = (short)dataAsme[i].Recurso.TipoRecurso;
                    dr["TipoRecurso"] = dataAsme[i].Recurso.TipoRecurso.ToString();
                    dr["Nro"] = dataAsme[i].Actividad.Orden;
                    dr["Descripcion"] = dataAsme[i].Actividad.Descripcion;
                    dr["UnidadOrganica"] = dataAsme[i].Actividad.UnidadOrganica.Nombre;
                    dr["Seccion"] = (short)dataAsme[i].Recurso.TipoRecurso < 4 ? "CONTADOR DE RECURSOS" : "IDENTIFICADOR DE RECURSOS";
                    dr["Duracion"] = dataAsme[i].Actividad.Duracion;
                    dr["TipoActividad"] = (short)dataAsme[i].Actividad.TipoActividad;
                    dr["TipoValor"] = (short)dataAsme[i].Actividad.TipoValor;
                    dr["Cantidad"] = dataAsme[i].Cantidad;
                    dsDataASME.Rows.Add(dr);
                }

                dr = dsTablaAsme.NewRow();
                dr["NomEntidad"] = asme.Procedimiento.Expediente.Entidad.Nombre;
                if (asme.Procedimiento.UndOrgResponsable != null)
                {
                    dr["UnidadOrganica"] = asme.Procedimiento.UndOrgResponsable.Nombre;
                }
                else
                {
                    dr["UnidadOrganica"] = null;
                }

                dr["CodProcedimiento"] = asme.Procedimiento.CodigoCorto;
                dr["NomProcedimiento"] = asme.Procedimiento.Denominacion;
                dr["NomTablaAsme"] = asme.Descripcion;
                dr["CantModalidades"] = 1;
                dsTablaAsme.Rows.Add(dr);

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptTablaASME.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("dsDataASME", dsDataASME.Rows),
                        new ReportDataSource("dsTotales", dsTotales.Rows),
                        new ReportDataSource("dsTablaAsme", dsTablaAsme.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "TablaASME", rpt.extension));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public ActionResult Resumen(long ExpedienteId)
        {
            try
            {
                var ds = new DataSet1.ResumenDataTable();
                //var data = _tablaAsmeService.GetByExpediente(ExpedienteId);
                var data = _tablaAsmeService.GetByExpedienteSinEliminados(ExpedienteId);

                for (int i = 0; i < data.Count(); i++)
                {
                    DataRow dr = ds.NewRow();
                    dr["TablaAsmeId"] = data[i].TablaAsmeId;
                    dr["ProcedimientoId"] = data[i].ProcedimientoId;
                    dr["CodProcedimiento"] = data[i].Procedimiento.CodigoCorto;
                    dr["NomProcedimiento"] = data[i].Procedimiento.Denominacion + " - " + data[i].Descripcion;
                    dr["Prestaciones"] = data[i].Prestaciones;
                    dr["Personal"] = data[i].Personal;
                    dr["MatFungible"] = data[i].MaterialFungible;
                    dr["ServIdentificable"] = data[i].ServicioIdentificable;
                    dr["MatNoFungible"] = data[i].MaterialNoFungible;
                    dr["SerTerceros"] = data[i].ServicioTerceros;
                    dr["Depreciacion"] = data[i].Depreciacion;
                    dr["Fijo"] = data[i].Fijos;
                    dr["CostoUnitatio"] = data[i].CostoUnitario;
                    dr["Descripcion"] = data[i].Descripcion;

                    ds.Rows.Add(dr);
                }

                ReporteModel rpt = new ReporteModel()
                {
                    File = Server.MapPath("~/Reportes/rptResumen.rdlc"),
                    Parametros = new List<ReportParameter>(),
                    Source = new List<ReportDataSource>()
                    {
                        new ReportDataSource("dsResumen", ds.Rows)
                    }
                };
                var stream = new MemoryStream(rpt.DescargarExcel());
                return File(stream, rpt.mimeType, string.Format("{0}.{1}", "Resumen", rpt.extension));
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                throw ex;
            }
        }
        public ActionResult FormatoTupa(long ExpedienteId, List<long> ProcedimientoIds)
        {
            try
            {
                var dsProc = new DataSet1.ProcedimientoDataTable();
                var dsReq = new DataSet1.RequisitoDataTable();
                var dsTablaAsme = new DataSet1.RequisitoDataTable();
                var dsDerTra = new DataSet1.TablaAsmeDataTable();
                var dsSede = new DataSet1.ProcedimientoSedeDataTable();
                var dsBaseLegal = new DataSet1.BaseLegalNormaDataTable();
                var dsReqFormulario = new DataSet1.RequisitoFormularioDataTable();
                var dsArchivo = new DataSet1.ArchivoDataTable(); //FVN

                var dataProc = _procedimientoService.GetByExpediente(ExpedienteId)
                                .OrderBy(x => (short)x.TipoProcedimiento)
                                .ThenBy(x => x.UndOrgResponsable.Nombre)
                                .ToList().OrderBy(x => x.Numero);
                var dataReq = _requisitoService.GetByExpediente(ExpedienteId);
                var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());

                DataRow dr;
                var proc = dataProc.First(x => ProcedimientoIds.Contains(x.ProcedimientoId));

                dr = dsProc.NewRow();
                dr["ProcedimientoId"] = proc.ProcedimientoId;
                dr["Codigo"] = proc.Codigo;
                dr["Denominacion"] = proc.Denominacion;
                dr["Descripcion"] = proc.Objetivo ?? "";
                dr["Calificacion"] = (short)proc.Calificacion;
                dr["PzoAtencion"] = proc.PlazoAtencion;
                dr["UnidadOrganicaInicio"] = proc.UndOrgResponsable.Nombre;
                dr["UnidadOrganicaResponsable"] = proc.UndOrgResponsable.Nombre;
                dr["PzoReconPresent"] = proc.PzoReconPresent;
                dr["PzoReconResol"] = proc.PzoReconResol;
                dr["PzoApelPresent"] = proc.PzoApelPresent;
                dr["PzoApelResol"] = proc.PzoApelResol;
                dr["UndOrgReconsideracion"] = proc.UndOrgReconsideracion == null ? "" : proc.UndOrgReconsideracion.Nombre;
                dr["UndOrgApelacion"] = proc.UndOrgApelacion == null ? "" : proc.UndOrgApelacion.Nombre;
                dr["EsGratuito"] = proc.EsGratuito;
                dr["BaseLegalId"] = proc.BaseLegalId;
                dr["TipoProc"] = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                dr["CargoResponsable"] = proc.CargoResponsable ?? "";
                dr["CargoReconsideracion"] = proc.CargoReconsideracion ?? "";
                dr["CargoApelacion"] = proc.CargoApelacion ?? "";
                dr["Anexo"] = proc.Anexo ?? "";
                dr["Correo"] = proc.Correo ?? "";
                dr["Telefono"] = proc.Telefono ?? "";


                if (proc.ProcedimientoDatoAdicional != null)
                {
                    //dr["DA_Canal_Oficina"] = proc.ProcedimientoDatoAdicional.Count(x => x.MetaDatoId == 1) > 0;

                    //if ((bool)dr["DA_Canal_Oficina"]) dr["DA_Canal_Oficina_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "";

                    //dr["DA_Canal_Virtual"] = proc.ProcedimientoDatoAdicional.Count(x => x.MetaDatoId == 2) > 0;

                    //if ((bool)dr["DA_Canal_Virtual"]) dr["DA_Canal_Virtual_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "";

                    //dr["DA_Canal_MAC"] = proc.ProcedimientoDatoAdicional.Count(x => x.MetaDatoId == 3) > 0;

                    //if ((bool)dr["DA_Canal_MAC"]) dr["DA_Canal_MAC_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "";


                    dr["DA_Canal_Oficina"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 1 && x.Checked == true).Count() > 0;

                    if ((bool)dr["DA_Canal_Oficina"])
                    {
                        dr["DA_Canal_Oficina_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Canal_Oficina_Comentario"] = "";
                        dr["DA_Canal_Oficina"] = false;
                    }
                    dr["DA_Canal_Virtual"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 2 && x.Checked == true).Count() > 0;

                    if ((bool)dr["DA_Canal_Virtual"])
                    {
                        dr["DA_Canal_Virtual_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Canal_Virtual"] = false;
                        dr["DA_Canal_Virtual_Comentario"] = "";
                    }
                    dr["DA_Canal_MAC"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 3 && x.Checked == true).Count() > 0;

                    if ((bool)dr["DA_Canal_MAC"])
                    {
                        dr["DA_Canal_MAC_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Canal_MAC"] = false;
                        dr["DA_Canal_MAC_Comentario"] = "";
                    }


                    dr["DA_Caja_Efectivo"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 6 && x.Checked == true).Count() > 0;

                    if ((bool)dr["DA_Caja_Efectivo"])
                    {
                        dr["DA_Caja_Efectivo_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Caja_Efectivo"] = false;
                        dr["DA_Caja_Efectivo_Comentario"] = "";
                    }



                    dr["DA_Caja_Debito"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 7 && x.Checked == true).Count() > 0;


                    if ((bool)dr["DA_Caja_Debito"])
                    {
                        dr["DA_Caja_Debito_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Caja_Debito"] = false;
                        dr["DA_Caja_Debito_Comentario"] = "";
                    }



                    dr["DA_Caja_Credito"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 8 && x.Checked == true).Count() > 0;

                    if ((bool)dr["DA_Caja_Credito"])
                    {
                        dr["DA_Caja_Credito_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Caja_Credito"] = false;
                        dr["DA_Caja_Credito_Comentario"] = "";
                    }

                    dr["DA_Otros_Agencia"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 9 && x.Checked == true).Count() > 0;


                    if ((bool)dr["DA_Otros_Agencia"])
                    {

                        dr["DA_Otros_Agencia_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Otros_Agencia"] = false;
                        dr["DA_Otros_Agencia_Comentario"] = "";
                    }


                    dr["DA_Otros_Transferencia"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 10 && x.Checked == true).Count() > 0;

                    if ((bool)dr["DA_Otros_Transferencia"])
                    {

                        dr["DA_Otros_Transferencia_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Otros_Transferencia"] = false;
                        dr["DA_Otros_Transferencia_Comentario"] = "";
                    }

                    dr["DA_Otros_Pagalo"] = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 11 && x.Checked == true).Count() > 0;

                    if ((bool)dr["DA_Otros_Pagalo"])
                    {
                        dr["DA_Otros_Pagalo_Comentario"] = proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "";
                    }
                    else
                    {
                        dr["DA_Otros_Pagalo"] = false;
                        dr["DA_Otros_Pagalo_Comentario"] = "";
                    }
                }
                else
                {
                    dr["DA_Canal_Oficina"] = false;
                    dr["DA_Canal_Oficina_Comentario"] = "";
                    dr["DA_Canal_Virtual"] = false;
                    dr["DA_Canal_Virtual_Comentario"] = "";
                    dr["DA_Canal_MAC"] = false;
                    dr["DA_Canal_MAC_Comentario"] = "";
                    dr["DA_Caja_Efectivo"] = false;
                    dr["DA_Caja_Debito"] = false;
                    dr["DA_Caja_Credito"] = false;
                    dr["DA_Otros_Agencia"] = false;
                    dr["DA_Otros_Transferencia"] = false;
                    dr["DA_Otros_Pagalo"] = false;
                }

                dsProc.Rows.Add(dr);

                for (int i = 0; i < dataReq.Count(); i++)
                {
                    dr = dsReq.NewRow();
                    dr["RequisitoId"] = dataReq[i].RequisitoId;
                    dr["ProcedimientoId"] = dataReq[i].ProcedimientoId;
                    dr["Nombre"] = dataReq[i].Nombre ?? "";
                    dr["Descripcion"] = dataReq[i].Descripcion ?? "";
                    dr["TipoRequisito"] = dataReq[i].TipoRequisito;

                    dsReq.Rows.Add(dr);
                }
                sub_rds1 = new ReportDataSource("dsReq", dsReq.Rows);


                foreach (Procedimiento pr in dataProc)
                {

                    if (pr.Requisito != null || pr.Requisito.Count > 0)
                    {
                        foreach (Requisito r in pr.Requisito)
                        {

                            if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                            {
                                foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                                {
                                    dr = dsReqFormulario.NewRow();
                                    dr["RequisitoId"] = r.RequisitoId;
                                    dr["ProcedimientoId"] = r.ProcedimientoId;
                                    dr["FormularioId"] = rf.FormularioId;
                                    dr["Nombre"] = rf.Nombre ?? "";

                                    dsReqFormulario.Rows.Add(dr);
                                }
                            }
                        }
                    }
                }

                sub_rds5 = new ReportDataSource("dsReqFormulario", dsReqFormulario.Rows);

                for (int i = 0; i < dataAsme.Count(); i++)
                {
                    dr = dsDerTra.NewRow();
                    dr["TablaAsmeId"] = dataAsme[i].TablaAsmeId;
                    dr["ProcedimientoId"] = dataAsme[i].ProcedimientoId;
                    dr["Costo"] = dataAsme[i].CostoUnitario;
                    dr["Descripcion"] = dataAsme[i].Descripcion;
                    dsDerTra.Rows.Add(dr);
                }
                sub_rds2 = new ReportDataSource("dsDerTra", dsDerTra.Rows);

                for (int i = 0; i < dataSede.Count(); i++)
                {
                    dr = dsSede.NewRow();
                    dr["ProcedimientoId"] = dataSede[i].ProcedimientoId;
                    dr["Nombre"] = dataSede[i].Sede.Nombre ?? "";
                    dr["Direccion"] = dataSede[i].Sede.Direccion ?? "";
                    dr["ListaUndOrganica"] = dataSede[i].UndOrgRecepcionDocumentos != null ? string.Join(",", dataSede[i].UndOrgRecepcionDocumentos.Select(uo => uo.UnidadOrganica.Nombre).ToArray()) : "";
                    dr["Horario"] = (dataSede[i].Sede.EsLunesViernes ? (dataSede[i].Sede.TipoTurno == "C" ?
                        string.Format("Lunes a Viernes de {0} a {1}. ",
                                dataSede[i].Sede.CorridoHorIni == null ? "-" : dataSede[i].Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                dataSede[i].Sede.CorridoHorFin == null ? "-" : dataSede[i].Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                                dataSede[i].Sede.Turno1HorIni == null ? "-" : dataSede[i].Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                dataSede[i].Sede.Turno1HorFin == null ? "-" : dataSede[i].Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                dataSede[i].Sede.Turno2HorIni == null ? "-" : dataSede[i].Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                dataSede[i].Sede.Turno2HorFin == null ? "-" : dataSede[i].Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )
                                : (dataSede[i].Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", dataSede[i].Sede.EsLunes == true ? "Lunes, " : "",
                                dataSede[i].Sede.EsMartes == true ? "Martes, " : "", dataSede[i].Sede.EsMiercoles == true ? "Miercoles, " : "",
                                dataSede[i].Sede.EsJueves == true ? "Jueves, " : "", dataSede[i].Sede.EsViernes == true ? "Viernes" : "",
                                dataSede[i].Sede.CorridoHorIni == null ? "-" : dataSede[i].Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                dataSede[i].Sede.CorridoHorFin == null ? "-" : dataSede[i].Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", dataSede[i].Sede.EsLunes == true ? "Lunes, " : "",
                                dataSede[i].Sede.EsMartes == true ? "Martes, " : "", dataSede[i].Sede.EsMiercoles == true ? "Miercoles, " : "",
                                dataSede[i].Sede.EsJueves == true ? "Jueves, " : "", dataSede[i].Sede.EsViernes == true ? "Viernes" : "",
                                dataSede[i].Sede.Turno1HorIni == null ? "-" : dataSede[i].Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                dataSede[i].Sede.Turno1HorFin == null ? "-" : dataSede[i].Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                dataSede[i].Sede.Turno2HorIni == null ? "-" : dataSede[i].Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                dataSede[i].Sede.Turno2HorFin == null ? "-" : dataSede[i].Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                    (dataSede[i].Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                                dataSede[i].Sede.SabadoHorIni == null ? "-" : dataSede[i].Sede.SabadoHorIni.Value.ToString("HH:mm"),
                                dataSede[i].Sede.SabadoHorFin == null ? "-" : dataSede[i].Sede.SabadoHorFin.Value.ToString("HH:mm"))
                                : "") +
                    (dataSede[i].Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                                dataSede[i].Sede.DomingoHorIni == null ? "-" : dataSede[i].Sede.DomingoHorIni.Value.ToString("HH:mm"),
                                dataSede[i].Sede.DomingoHorFin == null ? "-" : dataSede[i].Sede.DomingoHorFin.Value.ToString("HH:mm"))
                                : "");


                    dsSede.Rows.Add(dr);
                }
                sub_rds3 = new ReportDataSource("dsSede", dsSede.Rows);

                for (int i = 0; i < dataBaseLegal.Count(); i++)
                {
                    dr = dsBaseLegal.NewRow();
                    dr["BaseLegalId"] = dataBaseLegal[i].BaseLegalId;
                    dr["TipoNorma"] = dataBaseLegal[i].TipoNorma.Nombre;
                    dr["Norma"] = dataBaseLegal[i].Descripcion;
                    dr["Articulo"] = dataBaseLegal[i].Articulo;
                    dr["FechaPublicacion"] = dataBaseLegal[i].FechaPublicacion.Value.ToShortDateString();
                    dr["Numero"] = dataBaseLegal[i].Numero;

                    dsBaseLegal.Rows.Add(dr);
                }
                sub_rds4 = new ReportDataSource("dsBaseLegal", dsBaseLegal.Rows);

                Warning[] warn = null;
                string[] streamids = null;
                string mime = string.Empty, encoding = string.Empty, extension = string.Empty;
                byte[] byteViewer;
                ReportViewer viewer = new ReportViewer();
                viewer.ProcessingMode = ProcessingMode.Local;
                viewer.LocalReport.ReportPath = Server.MapPath(string.Format("~/Reportes/rptFormatoTupa{0}.rdlc", proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "Servicio" : ""));
                viewer.LocalReport.SubreportProcessing += SetSubDataSourceRptFormatoTupa;
                viewer.LocalReport.DataSources.Add(new ReportDataSource("dsProc", dsProc.Rows));

                byteViewer = viewer.LocalReport.Render("pdf", null, out mime, out encoding, out extension, out streamids, out warn);

                MemoryStream stm = new MemoryStream(byteViewer);
                return new FileStreamResult(stm, "application/pdf");
            }
            catch (Exception ex)
            {
                _log.Error(ex);
                throw ex;
            }
        }

        private void AdicionarLogoCaratula(Document Doc, long ExpedienteId)
        {
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);
            string nombreArchivo = entidad.Logoentidad;
            string srutalogo = Path.Combine(pathlogoentidad, nombreArchivo); 
            Image logo = Image.GetInstance(srutalogo);
            logo.BorderWidth = 0;

            // Determinar el tamaño de la página A4
            Rectangle pageSize = PageSize.A4;
            float pageWidth = pageSize.Width; // - Doc.LeftMargin - Doc.RightMargin;
            float pageHeight = pageSize.Height; // - Doc.TopMargin - Doc.BottomMargin;
            // Determinar la posición de la imagen en función del tamaño de la página
            float imageWidth = logo.Width;
            float imageHeight = logo.Height;
            float imageX = (pageWidth/2) - (imageWidth/2);
            float imageY = (pageHeight/2) - (imageHeight/2) + 280;

            logo.SetAbsolutePosition(imageX, imageY);
            Doc.Add(logo);
        }
        
        private void AdicionarCabecera(Document Doc, long ExpedienteId)
        {
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);
            string nombreArchivo = entidad.Logoentidad;
            string srutalogo = Path.Combine(pathlogoentidad, nombreArchivo);
            Paragraph p = new Paragraph();

            if (!string.IsNullOrEmpty(nombreArchivo) && System.IO.File.Exists(srutalogo))
            {
                Image logo = Image.GetInstance(srutalogo);
                logo.BorderWidth = 0;
                logo.ScalePercent(13f);
                p.Add(new Chunk(logo, 0, 0, true));
            }

            //string pathImagen2 = Path.Combine(pathlogoentidad, "logo_pcm.png");
            if (System.IO.File.Exists(pathnomlogopcm))
            {
                Image logo2 = Image.GetInstance(pathnomlogopcm);
                logo2.BorderWidth = 0;
                logo2.ScalePercent(25f);

                if (string.IsNullOrEmpty(nombreArchivo) || !System.IO.File.Exists(srutalogo))
                {
                    p.Add(new Chunk(logo2, 360, 0, true));
                }
                else
                {
                    p.Add(new Chunk(logo2, 340, 0, true));
                }
            }

            if (p.IsEmpty())
            {
                Font transparentFont = FontFactory.GetFont(FontFactory.HELVETICA, 200f, Font.NORMAL, iTextSharp.text.Color.WHITE);
                Paragraph emptyParagraph = new Paragraph();
                emptyParagraph.Add(new Chunk("AAAAAA", transparentFont));
                HeaderFooter header = new HeaderFooter(emptyParagraph, false);
                header.Border = Rectangle.NO_BORDER;
                header.PageNumber = 0;
                Doc.Header = header;
            }
            else
            {
                HeaderFooter header1 = new HeaderFooter(p, false);
                header1.Border = Rectangle.NO_BORDER;
                header1.PageNumber = 0;
                Doc.Header = header1;
            }
        }

        private void GenerarCaratula(Document Doc, long ExpedienteId, List<long> ProcedimientoIds)
        {
            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);
            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);

            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = entidad.Nombre.ToString().ToUpper();
            string cadena3 = "TEXTO ÚNICO DE PROCEDIMIENTOS ADMINISTRATIVOS – TUPA " + "\n DE " + "\"" + entidad.Nombre.ToString().ToUpper() + "\"";
            string cadena4 = "Normas que aprueba o modifican el TUPA";

            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;

            Doc.Open();
            AdicionarLogoCaratula(Doc, ExpedienteId);

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 20;
            //tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_JUSTIFIED;
            tdatos.DefaultVerticalAlignment = Element.ALIGN_MIDDLE;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 50;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);


            //celda = new Cell();
            //celda.BorderWidthLeft = 1;
            //celda.BorderWidthRight = 1;
            //celda.BorderWidthLeft = 1;
            //celda.BorderWidthBottom = 1;
            //celda.BorderWidthTop = 1;

            //celda.Leading = 16;  
            //celda.Add(fnChunk(cadena2, (int)Fuente.TituloNegrita));
            //tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);
            Doc.Add(tlineablanco);
            
            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(cadena3, (int)Fuente.TituloNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(cadena4, (int)Fuente.TituloNegrita));
            tdatos.AddCell(celda);

            Doc.Add(tdatos);

            tcuerpo.WidthPercentage = 100;
            tcuerpo.Border = 0;
            tcuerpo.BorderWidth = 0;
            tcuerpo.Padding = 0;
            int[] widths = new int[4];
            widths[0] = 30;
            widths[1] = 30;
            widths[2] = 50;
            widths[3] = 15;

            tcuerpo.SetWidths(widths);

            foreach (ExpedienteNorma exn in lstExp)
            {
                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.HorizontalAlignment = Element.ALIGN_LEFT;
                celda.Add(fnChunk(lstEnum.Where(x => x.CODIGO == exn.ENUM_TIPO_NORMA_APROBACION.ToString()).FirstOrDefault().VALOR, (int)Fuente.TituloNormal));
                tcuerpo.AddCell(celda);

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.HorizontalAlignment = Element.ALIGN_LEFT;
                celda.Add(fnChunk(exn.TipoNorma.Nombre.ToString(), (int)Fuente.TituloNormal));
                tcuerpo.AddCell(celda);

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.HorizontalAlignment = Element.ALIGN_LEFT;
                celda.Add(fnChunk(exn.Descripcion, (int)Fuente.TituloNormal));
                tcuerpo.AddCell(celda);

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                if (exn.Fecha != null)
                {
                    celda.Add(fnChunk(exn.Fecha.ToString().Substring(0, 10), (int)Fuente.TituloNormal));
                }
                else
                {
                    celda.Add(fnChunk("", (int)Fuente.TituloNormal));
                }


                tcuerpo.AddCell(celda);
            }

            Doc.Add(tcuerpo);

        }
        private void IndiceConteo(long ExpedienteId, List<long> ProcedimientoIds, string servicio)
        {
            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);

            List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
            if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
            //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
            var Denominacion = "";
            //int i = 1;
            //int ii = 1;
            //pagcab = 1;
            //pagcab2 = 1;
            MemoryStream stream = new MemoryStream();
            List list = new List(List.ORDERED, 20f);

            list.SetListSymbol("\u2022");

            if (servicio == "P")
            {

                foreach (Procedimiento proc in dataProc)
                {
                    var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);
                    string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                    if (tipo == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)
                    {
                        if (Denominacion != proc.Denominacion)
                        {
                            pagcab = pagcab + 2;
                        }
                    }
                }
            }
            else
            {
                pagcab = pagcab++;
                //i = 1;
                foreach (Procedimiento proc in dataProc)
                {
                    var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);
                    string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                    if (tipo == "S")
                    {
                        if (Denominacion != proc.Denominacion)
                        {
                            pagcab = pagcab + 2;

                        }
                    }

                }
            }

            if (estadoformulario != "")
            {
                ///añadir los formulario
                pagcab = pagcab++;
                foreach (Procedimiento pr in dataProc)
                {

                    if (pr.Requisito != null || pr.Requisito.Count > 0)
                    {
                        foreach (Requisito r in pr.Requisito.Where(x => x.ProcedimientoId == pr.ProcedimientoId))
                        {

                            if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                            {
                                foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                                {



                                    try
                                    {
                                        if (rf.ArchivoAdjuntoId != null)
                                        {

                                            long cod = rf.ArchivoAdjuntoId.Value;
                                            var archivo = _archivoAdjuntoService.GetOne(cod);
                                            var rut = @path + archivo.Ruta + archivo.Extension;
                                            if (archivo.Extension == ".pdf")
                                            {


                                                PdfReader Rd = new PdfReader(rut);
                                                var n = Rd.NumberOfPages;
                                                pagcab = pagcab + n;
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        var mensaje = "Error message: " + e.Message;

                                    }



                                }
                            }
                        }
                    }
                }
            }
        }
        private void GenerarIndice(Document Doc, long ExpedienteId, List<long> ProcedimientoIds)
        {
            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

            if (ProcedimientoIds[0] == 0)
            {

                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);

            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = "ÍNDICE";
            string cadena3 = "SECCIÓN N° 1: PROCEDIMIENTOS ADMINISTRATIVOS";
            string cadena4 = "SECCIÓN N° 2: SERVICIOS PRESTADOS EN EXCLUSIVIDAD";
            string cadena5 = "SECCIÓN N° 3: FORMULARIOS";
            string cadena6 = "SECCIÓN N° 4: SEDES DE ATENCIÓN";

            Table tcab = new Table(1);
            Table tdatos = new Table(2);
            Table titulo = new Table(1);
            Table subtitulo = new Table(1);
            Table titulodetalle = new Table(2);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 20;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);
            //Datos

            titulo.WidthPercentage = 100;
            titulo.Border = 0;
            titulo.BorderWidth = 0;
            titulo.Padding = 0;
            titulo.Spacing = 0;
            titulo.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteSubTituloNormal));
            titulo.AddCell(celda);
            Doc.Add(titulo);

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            //Datos

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_RIGHT;
            int[] widths = new int[2];
            widths[0] = 80;
            widths[1] = 20;

            tdatos.SetWidths(widths);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena3, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° 3", (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);


            List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
            if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
            //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
            var nom = "";
            //var nomtitulo = "";
            var Denominacion = "";
            int i = 1;
            //int ii = 1;
            pagcab = 4;
            pagcab2 = 4;
            MemoryStream stream = new MemoryStream();
            List list = new List(List.ORDERED, 20f);

            list.SetListSymbol("\u2022");

            foreach (Procedimiento proc in dataProc)
            {
                var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);
                string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                if (tipo == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)
                {

                    if (nom != cat.Nombre)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("  1." + i + " " + cat.Nombre, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        nom = cat.Nombre;
                        i = i++;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);

                    }

                    if (Denominacion != proc.Denominacion)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("         \u2022 " + proc.Denominacion, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.VerticalAlignment = Element.ALIGN_RIGHT;
                        celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        pagcab = pagcab + 2;
                    }
                }
            }
            //foreach (Procedimiento proc2 in dataProc)
            //{        
            //    string tipo = proc2.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";

            //    if (tipo == "P")
            //    {
            //        if (proc2.UndOrgReconsideracion != null) { 

            //            if (nom != proc2.UndOrgReconsideracion.Nombre)
            //            {
            //                celda = new Cell();
            //                celda.Border = 0;
            //                celda.BorderWidth = 0;
            //                celda.Leading = 16;
            //                celda.HorizontalAlignment = Element.ALIGN_LEFT;
            //                celda.Add(fnChunk("  1." + i + " " + proc2.UndOrgReconsideracion.Nombre, (int)Fuente.FuenteNormal));
            //                tdatos.AddCell(celda);
            //                nom = proc2.UndOrgReconsideracion.Nombre;
            //                i = i++;

            //                celda = new Cell();
            //                celda.Border = 0;
            //                celda.BorderWidth = 0;
            //                celda.Leading = 16;
            //                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            //                tdatos.AddCell(celda);
            //            }
            //        }


            //        if (Denominacion != proc2.Denominacion)
            //        {
            //            celda = new Cell();
            //            celda.Border = 0;
            //            celda.BorderWidth = 0;
            //            celda.Leading = 16;
            //            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            //            celda.Add(fnChunk("         \u2022 " + proc2.Denominacion, (int)Fuente.FuenteNormal));
            //            tdatos.AddCell(celda);

            //            celda = new Cell();
            //            celda.Border = 0;
            //            celda.BorderWidth = 0;
            //            celda.Leading = 16;
            //            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            //            celda.Add(fnChunk("N° " + pagcab2, (int)Fuente.FuenteNormal));
            //            tdatos.AddCell(celda);
            //            pagcab2 = pagcab2 + 2;
            //        }
            //    }

            //}
            //fin grupo
            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena4, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);
            pagcab = pagcab++;
            i = 1;
            foreach (Procedimiento proc in dataProc)
            {
                var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);
                string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                if (tipo == "S")
                {

                    if (nom != cat.Nombre)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("  2." + i + " " + cat.Nombre, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        nom = cat.Nombre;
                        i = i++;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.Add(fnChunk("  ", (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                    }

                    if (Denominacion != proc.Denominacion)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("         \u2022 " + proc.Denominacion, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.VerticalAlignment = Element.ALIGN_RIGHT;
                        celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        pagcab = pagcab + 2;

                    }
                }

            }

            //pagcab = pagcab++;
            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena5, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            ///añadir los formulario
            pagcab = pagcab++;

            string nombreduplicado = "";
            foreach (Procedimiento pr in dataProc)
            {

                if (pr.Requisito != null || pr.Requisito.Count > 0)
                {
                    foreach (Requisito r in pr.Requisito.Where(x => x.ProcedimientoId == pr.ProcedimientoId))
                    {

                        if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                        {
                            foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                            {
                                try
                                {
                                    if (rf.ArchivoAdjuntoId != null)
                                    {

                                        long cod = rf.ArchivoAdjuntoId.Value;
                                        var archivo = _archivoAdjuntoService.GetOne(cod);
                                        var rut = @path + archivo.Ruta + archivo.Extension;

                                        celda = new Cell();
                                        celda.Border = 0;
                                        celda.BorderWidth = 0;
                                        celda.Leading = 16;
                                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                                        if (archivo.Extension == ".pdf")
                                        {
                                            if (rf.Nombre != nombreduplicado)
                                            {
                                                celda.Add(fnChunk("Formulario PDF: " + rf.Nombre, (int)Fuente.FuenteNormal));
                                                tdatos.AddCell(celda);
                                                nombreduplicado = rf.Nombre;

                                                celda = new Cell();
                                                celda.Border = 0;
                                                celda.BorderWidth = 0;
                                                celda.Leading = 16;
                                                celda.VerticalAlignment = Element.ALIGN_RIGHT;
                                                celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
                                                tdatos.AddCell(celda);
                                            }

                                        }
                                        //else
                                        //{ 
                                        //    celda.Add(fnChunk("Formulario Word: " + rf.Nombre , (int)Fuente.FuenteNormal));
                                        //}


                                        //if (archivo.Extension == ".pdf")
                                        //{
                                        //    if (rf.Nombre != nombreduplicado)
                                        //    {
                                        //        celda = new Cell();
                                        //        celda.Border = 0;
                                        //        celda.BorderWidth = 0;
                                        //        celda.Leading = 16;
                                        //        celda.VerticalAlignment = Element.ALIGN_RIGHT;
                                        //        celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
                                        //        tdatos.AddCell(celda);
                                        //    }

                                        //} 

                                        if (archivo.Extension == ".pdf")
                                        {
                                            PdfReader Rd = new PdfReader(rut);
                                            var n = Rd.NumberOfPages;
                                            pagcab = pagcab + n;
                                        }
                                    }
                                }
                                catch (Exception e)
                                {
                                    var mensaje = "Error message: " + e.Message;

                                }

                            }
                        }
                    }
                }
            }

            ///fin de formularion

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena6, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            Doc.Add(tdatos);
            Doc.Add(list);
        }


        private void GenerarIndiceConteo(long ExpedienteId, List<long> ProcedimientoIds)
        {

            Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
            PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_indiceConteo.pdf", FileMode.Create));
            //PdfContentByte cb = writer.DirectContent;
            //AdicionarCabecera(Doc, ExpedienteId);
            Doc.Open();


            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

            if (ProcedimientoIds[0] == 0)
            {

                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);

            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = "ÍNDICE";
            string cadena3 = "SECCIÓN N° 1: PROCEDIMIENTOS ADMINISTRATIVOS";
            string cadena4 = "SECCIÓN N° 2: SERVICIOS PRESTADOS EN EXCLUSIVIDAD";
            string cadena5 = "SECCIÓN N° 3: FORMULARIOS";
            string cadena6 = "SECCIÓN N° 4: SEDES DE ATENCIÓN";

            Table tcab = new Table(1);
            Table tdatos = new Table(2);
            Table titulo = new Table(1);
            Table subtitulo = new Table(1);
            Table titulodetalle = new Table(2);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 20;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);
            //Datos

            titulo.WidthPercentage = 100;
            titulo.Border = 0;
            titulo.BorderWidth = 0;
            titulo.Padding = 0;
            titulo.Spacing = 0;
            titulo.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteSubTituloNormal));
            titulo.AddCell(celda);
            Doc.Add(titulo);

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            //Datos

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_RIGHT;
            int[] widths = new int[2];
            widths[0] = 80;
            widths[1] = 20;

            tdatos.SetWidths(widths);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena3, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° 3", (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);


            List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
            if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
            //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
            var nom = "";
            //var nomtitulo = "";
            var Denominacion = "";
            int i = 1;
            //int ii = 1;
            pagcab = 4;
            pagcab2 = 4;
            MemoryStream stream = new MemoryStream();
            List list = new List(List.ORDERED, 20f);

            list.SetListSymbol("\u2022");

            foreach (Procedimiento proc in dataProc)
            {
                var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);
                string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";

                if (tipo == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)
                {

                    if (nom != cat.Nombre)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("  1." + i + " " + cat.Nombre, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        nom = cat.Nombre;
                        i = i++;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);

                    }

                    if (Denominacion != proc.Denominacion)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("         \u2022 " + proc.Denominacion, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.VerticalAlignment = Element.ALIGN_RIGHT;
                        celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        pagcab = pagcab + 2;
                    }
                }
            }
            //fin grupo
            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena4, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);
            pagcab = pagcab++;
            i = 1;
            foreach (Procedimiento proc in dataProc)
            {
                var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);
                string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";

                if (tipo == "S")
                {

                    if (nom != cat.Nombre)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("  2." + i + " " + cat.Nombre, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        nom = cat.Nombre;
                        i = i++;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.Add(fnChunk("  ", (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                    }

                    if (Denominacion != proc.Denominacion)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("         \u2022 " + proc.Denominacion, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.VerticalAlignment = Element.ALIGN_RIGHT;
                        celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        pagcab = pagcab + 2;

                    }
                }

            }

            //pagcab = pagcab++;
            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena5, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            ///añadir los formulario
            pagcab = pagcab++;

            string nombreduplicado = "";

            var vercont = 0;
            List<RequisitoFormulario> lstrequisito = _AuditoriaService.GetAllListaReq(ExpedienteId);

            foreach (RequisitoFormulario pr in lstrequisito)
            {
                try
                {
                    long cod = pr.ArchivoAdjuntoId.Value;
                    var archivo = _archivoAdjuntoService.GetOne(cod);
                    var rut = @path + archivo.Ruta + archivo.Extension;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 16;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;


                    if (archivo.Extension == ".pdf")
                    {

                        if (pr.Nombre != nombreduplicado)
                        {
                            celda.Add(fnChunk("Formulario PDF: " + pr.Nombre, (int)Fuente.FuenteNormal));
                            tdatos.AddCell(celda);
                            nombreduplicado = pr.Nombre;


                            PdfReader Rd = new PdfReader(rut);
                            var n = Rd.NumberOfPages;
                            if (n != 1)
                            {
                                pagcabCompleto = pagcabCompleto++;
                                vercont = 1;
                            }
                            else
                            {
                                pagcabCompleto = pagcabCompleto + n;
                                vercont = 0;
                            }


                            celda = new Cell();
                            celda.Border = 0;
                            celda.BorderWidth = 0;
                            celda.Leading = 16;
                            celda.VerticalAlignment = Element.ALIGN_RIGHT;
                            celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
                            tdatos.AddCell(celda);

                            if (vercont == 1)
                            {
                                pagcabCompleto = pagcabCompleto + n - 1;
                            }
                        }

                    }

                }
                catch (Exception e)
                {
                    var mensaje = "Error message: " + e.Message;

                }
            }


            //foreach (Procedimiento pr in dataProc)
            //{

            //    if (pr.Requisito != null || pr.Requisito.Count > 0)
            //    {
            //        foreach (Requisito r in pr.Requisito.Where(x => x.ProcedimientoId == pr.ProcedimientoId))
            //        {

            //            if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
            //            {
            //                foreach (RequisitoFormulario rf in r.RequisitoFormulario)
            //                {
            //                    try
            //                    {
            //                        if (rf.ArchivoAdjuntoId != null)
            //                        {

            //                            long cod = rf.ArchivoAdjuntoId.Value;
            //                            var archivo = _archivoAdjuntoService.GetOne(cod);
            //                            var rut = @path + archivo.Ruta + archivo.Extension;

            //                            celda = new Cell();
            //                            celda.Border = 0;
            //                            celda.BorderWidth = 0;
            //                            celda.Leading = 16;
            //                            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            //                            if (archivo.Extension == ".pdf")
            //                            {
            //                                if (rf.Nombre != nombreduplicado)
            //                                {
            //                                    celda.Add(fnChunk("Formulario PDF: " + rf.Nombre, (int)Fuente.FuenteNormal));
            //                                    tdatos.AddCell(celda);
            //                                    nombreduplicado = rf.Nombre;

            //                                    celda = new Cell();
            //                                    celda.Border = 0;
            //                                    celda.BorderWidth = 0;
            //                                    celda.Leading = 16;
            //                                    celda.VerticalAlignment = Element.ALIGN_RIGHT;
            //                                    celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
            //                                    tdatos.AddCell(celda);
            //                                }

            //                            }


            //                            if (archivo.Extension == ".pdf")
            //                            {
            //                                PdfReader Rd = new PdfReader(rut);
            //                                var n = Rd.NumberOfPages;
            //                                pagcab = pagcab + n;
            //                            }
            //                        }
            //                    }
            //                    catch (Exception e)
            //                    {
            //                        var mensaje = "Error message: " + e.Message;

            //                    }

            //                }
            //            }
            //        }
            //    }
            //}

            ///fin de formularion

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena6, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcab, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            Doc.Add(tdatos);
            Doc.Add(list);
            Doc.Close();
        }
        private void GenerarIndiceCompleto(long ExpedienteId, List<long> ProcedimientoIds)
        {


            Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
            PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_indice.pdf", FileMode.Create));
            //PdfContentByte cb = writer.DirectContent;
            //AdicionarCabecera(Doc, ExpedienteId);
            Doc.Open();



            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

            if (ProcedimientoIds[0] == 0)
            {

                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);

            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = "ÍNDICE";
            string cadena3 = "SECCIÓN N° 1: PROCEDIMIENTOS ADMINISTRATIVOS";
            string cadena4 = "SECCIÓN N° 2: SERVICIOS PRESTADOS EN EXCLUSIVIDAD";
            string cadena5 = "SECCIÓN N° 3: FORMULARIOS";
            string cadena6 = "SECCIÓN N° 4: SEDES DE ATENCIÓN";

            Table tcab = new Table(1);
            Table tdatos = new Table(2);
            Table titulo = new Table(1);
            Table subtitulo = new Table(1);
            Table titulodetalle = new Table(2);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 20;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);
            //Datos

            titulo.WidthPercentage = 100;
            titulo.Border = 0;
            titulo.BorderWidth = 0;
            titulo.Padding = 0;
            titulo.Spacing = 0;
            titulo.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteSubTituloNormal));
            titulo.AddCell(celda);
            Doc.Add(titulo);

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            //Datos
            pagcabCompleto = 0;

            //caratula
            var rut = @pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf";
            PdfReader Rd = new PdfReader(rut);
            var n = Rd.NumberOfPages;
            pagcabCompleto = pagcabCompleto + n;

            //conteo indice
            rut = @pathdocumentos + "Archivo" + ExpedienteId + "_indiceConteo.pdf";
            Rd = new PdfReader(rut);
            n = Rd.NumberOfPages;
            pagcabCompleto = pagcabCompleto + n;

            //conteo titulo procedimiento
            rut = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloProce.pdf";
            Rd = new PdfReader(rut);
            n = Rd.NumberOfPages;
            pagcabCompleto = pagcabCompleto + n;

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_RIGHT;
            int[] widths = new int[2];
            widths[0] = 80;
            widths[1] = 20;

            tdatos.SetWidths(widths);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena3, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);


            List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
            if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
            //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
            var nom = "";
            //var nomtitulo = "";
            var Denominacion = "";
            int i = 1;
            //int ii = 1;




            pagcab2 = 4;
            MemoryStream stream = new MemoryStream();
            List list = new List(List.ORDERED, 20f);

            //list.SetListSymbol("\u2022");


            int contpag = 0;
            int vercont = 0;
            foreach (Procedimiento proc in dataProc)
            {
                var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);
                string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";

                if (tipo == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)

                {

                    if (nom != cat.Nombre)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("1." + i + " " + cat.Nombre, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        nom = cat.Nombre;
                        i = i++;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);

                    }

                    if (Denominacion != proc.Denominacion)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk(proc.Denominacion, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);


                        rut = @pathdocumentos + "Archivo" + ExpedienteId + "_P" + contpag + ".pdf";

                        Rd = new PdfReader(rut);
                        n = Rd.NumberOfPages;
                        if (n != 1)
                        {
                            pagcabCompleto = pagcabCompleto++;
                            vercont = 1;
                        }
                        else
                        {
                            pagcabCompleto = pagcabCompleto + n;
                            vercont = 0;
                        }


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.VerticalAlignment = Element.ALIGN_RIGHT;
                        celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);

                        if (vercont == 1)
                        {
                            pagcabCompleto = pagcabCompleto + n - 1;
                        }


                        //pagcab = pagcab + 2;
                    }

                    contpag = contpag++;
                }
            }


            //conteo titulo procedimiento
            rut = @pathdocumentos + "Archivo" + ExpedienteId + "_titulopresexc.pdf";
            Rd = new PdfReader(rut);
            n = Rd.NumberOfPages;
            pagcabCompleto = pagcabCompleto + n;
            //fin grupo
            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena4, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);
            //pagcab = pagcab++;
            i = 1;
            contpag = 0;
            vercont = 0;
            foreach (Procedimiento proc in dataProc)
            {
                var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);
                string tipo = "E";

                if (proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                {
                    tipo = proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio ? "S" : "P";
                }
                else if (proc.TipoProcedimiento == TipoProcedimiento.Servicio)
                {
                    tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                }


                //string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                if (tipo == "S")
                {

                    if (nom != cat.Nombre)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk("2." + i + " " + cat.Nombre, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        nom = cat.Nombre;
                        i = i++;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                    }

                    if (Denominacion != proc.Denominacion)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.HorizontalAlignment = Element.ALIGN_LEFT;
                        celda.Add(fnChunk(proc.Denominacion, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);


                        rut = @pathdocumentos + "Archivo" + ExpedienteId + "_S" + contpag + ".pdf";

                        Rd = new PdfReader(rut);
                        n = Rd.NumberOfPages;


                        if (n != 1)
                        {
                            pagcabCompleto = pagcabCompleto++;
                            vercont = 1;
                        }
                        else
                        {
                            pagcabCompleto = pagcabCompleto + n;
                            vercont = 0;
                        }



                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 16;
                        celda.VerticalAlignment = Element.ALIGN_RIGHT;
                        celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
                        tdatos.AddCell(celda);
                        //pagcab = pagcab + 2;

                        if (vercont == 1)
                        {
                            pagcabCompleto = pagcabCompleto + n - 1;
                        }


                    }
                    contpag = contpag++;
                }

            }

            rut = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloform.pdf";
            Rd = new PdfReader(rut);
            n = Rd.NumberOfPages;
            pagcabCompleto = pagcabCompleto + n;

            //pagcab = pagcab++;
            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena5, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            ///añadir los formulario
            //pagcab = pagcab++;

            string nombreduplicado = "";
            vercont = 0;

            List<RequisitoFormulario> lstrequisito = _AuditoriaService.GetAllListaReq(ExpedienteId);

            foreach (RequisitoFormulario pr in lstrequisito)
            {
                try
                {
                    long cod = pr.ArchivoAdjuntoId.Value;
                    var archivo = _archivoAdjuntoService.GetOne(cod);
                    rut = @path + archivo.Ruta + archivo.Extension;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 16;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;


                    if (archivo.Extension == ".pdf")
                    {

                        if (pr.Nombre != nombreduplicado)
                        {
                            celda.Add(fnChunk("Formulario PDF: " + pr.Nombre, (int)Fuente.FuenteNormal));
                            tdatos.AddCell(celda);
                            nombreduplicado = pr.Nombre;


                            Rd = new PdfReader(rut);
                            n = Rd.NumberOfPages;
                            if (n != 1)
                            {
                                pagcabCompleto = pagcabCompleto++;
                                vercont = 1;
                            }
                            else
                            {
                                pagcabCompleto = pagcabCompleto + n;
                                vercont = 0;
                            }


                            celda = new Cell();
                            celda.Border = 0;
                            celda.BorderWidth = 0;
                            celda.Leading = 16;
                            celda.VerticalAlignment = Element.ALIGN_RIGHT;
                            celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
                            tdatos.AddCell(celda);

                            if (vercont == 1)
                            {
                                pagcabCompleto = pagcabCompleto + n - 1;
                            }
                        }

                    }

                }
                catch (Exception e)
                {
                    var mensaje = "Error message: " + e.Message;

                }
            }

            ///fin de formularion
            rut = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloSede.pdf";
            Rd = new PdfReader(rut);
            n = Rd.NumberOfPages;
            pagcabCompleto = pagcabCompleto + n;


            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk(cadena6, (int)Fuente.FuenteSubTituloNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 16;
            celda.VerticalAlignment = Element.ALIGN_RIGHT;
            celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            rut = @pathdocumentos + "Archivo" + ExpedienteId + "_Sedes.pdf";
            Rd = new PdfReader(rut);
            n = Rd.NumberOfPages;
            pagcabCompleto = pagcabCompleto++;


            //celda = new Cell();
            //celda.Border = 0;
            //celda.BorderWidth = 0;
            //celda.Leading = 16;
            //celda.HorizontalAlignment = Element.ALIGN_LEFT;
            //celda.Add(fnChunk("Contenido", (int)Fuente.FuenteNormal));
            //tdatos.AddCell(celda);

            //celda = new Cell();
            //celda.Border = 0;
            //celda.BorderWidth = 0;
            //celda.Leading = 16;
            //celda.VerticalAlignment = Element.ALIGN_RIGHT;
            //celda.Add(fnChunk("N° " + pagcabCompleto, (int)Fuente.FuenteNormal));
            //tdatos.AddCell(celda);

            Doc.Add(tdatos);
            Doc.Add(list);
            Doc.Close();
        }

        private void TituloProceAdm(Document Doc, long ExpedienteId, List<long> ProcedimientoIds)
        {

            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);

            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = "SECCIÓN N° 1: PROCEDIMIENTOS ADMINISTRATIVOS";

            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(cadena2, (int)Fuente.TituloNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 40;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            Doc.Add(tdatos);


        }
        private void TituloProceAdmCompleto(long ExpedienteId, List<long> ProcedimientoIds)
        {


            Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
            PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_tituloProce.pdf", FileMode.Create));
            //PdfContentByte cb = writer.DirectContent;
            //AdicionarCabecera(Doc, ExpedienteId);

            Doc.Open();



            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);


            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = "SECCIÓN N° 1: PROCEDIMIENTOS ADMINISTRATIVOS";

            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(cadena2, (int)Fuente.TituloNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 40;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);
            Doc.Add(tdatos);
            Doc.Close();

        }
        private void GenerarProceAdm(Document Doc, long ExpedienteId, List<long> ProcedimientoIds, PdfWriter writer)
        {
            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);
            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).OrderBy(x => x.RecNum).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

            if (ProcedimientoIds[0] == 0)
            {
                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3).OrderBy(x => x.RecNum);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);
            //AdicionarCabecera(Doc, ExpedienteId);
            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

            Table tcab = new Table(1);
            Cell celda;

            tcab.WidthPercentage = 100;
            tcab.Border = 0;
            tcab.BorderWidth = 0;
            tcab.Padding = 2;
            tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;
            tcab.DefaultVerticalAlignment = Element.ALIGN_MIDDLE;

            //inicio
            Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
            Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
            Phrase p1 = new Phrase(chkHeader);
            HeaderFooter footer = new HeaderFooter(p1, false);
            footer.Border = Rectangle.NO_BORDER;
            footer.Alignment = Element.ALIGN_CENTER;
            footer.BorderColor = new Color(242, 242, 242);
            footer.BackgroundColor = new Color(242, 242, 242);
            Doc.Header = footer;
            //fin

            //celda = new Cell();
            //celda.Border = 0;
            //celda.Leading = 10;
            //celda.BorderColor = new Color(242, 242, 242);
            //celda.BackgroundColor = new Color(242, 242, 242);
            //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
            //tcab.AddCell(celda);
            //Doc.Add(tcab);
            //cuadro total de la hoaj
            RoundRectangle rr = new RoundRectangle();

            PdfContentByte cb = writer.DirectContent;

            //deta grupo
            //generacion de los reportes formato tupa por procedimento
            List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
            if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
            //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
            int sededat = 0;

            int contpag = 0;
            MemoryStream stream = new MemoryStream();
            foreach (Procedimiento proc in dataProc)
            {
                proc.TablaAsme = proc.TablaAsme.OrderBy(x => x.TablaAsmeId).ToList();
                cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                cb.Stroke();
                string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                if (tipo == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)
                {
                    if (contpag == 1)
                    {
                        Doc.NewPage();
                    }
                    Table tdatos41 = new Table(20);
                    int[] widths1 = new int[20];
                    widths1[0] = 30;
                    widths1[1] = 100;
                    widths1[2] = 100;
                    widths1[3] = 100;
                    widths1[4] = 100;
                    widths1[5] = 100;
                    widths1[6] = 100;
                    widths1[7] = 100;
                    widths1[8] = 100;
                    widths1[9] = 100;
                    widths1[10] = 100;
                    widths1[11] = 100;
                    widths1[12] = 100;
                    widths1[13] = 100;
                    widths1[14] = 100;
                    widths1[15] = 100;
                    widths1[16] = 100;
                    widths1[17] = 100;
                    widths1[18] = 100;
                    widths1[19] = 100;
                    tdatos41.SetWidths(widths1);

                    var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);

                    tdatos41.WidthPercentage = 100;
                    tdatos41.Border = 0;
                    tdatos41.BorderWidth = 0;
                    tdatos41.Padding = 2;
                    tdatos41.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Colspan = 8;
                    celda.Add(fnChunk("Denominación del Procedimiento Administrativo", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 12;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("\"" + proc.Denominacion + "\"", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    if (proc.CodigoCorto != null)
                    {
                        celda.Add(fnChunk("Código: " + proc.CodigoCorto.ToUpper(), (int)Fuente.FuenteNegrita));
                    }
                    else
                    {
                        celda.Add(fnChunk("Código: ", (int)Fuente.FuenteNegrita));
                    }

                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 19;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Descripción del procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    var reno = "";
                    celda.BorderColor = Color.BLACK;
                    if (proc.Renovacio.ToString() == "Si")
                    {
                        var mes = "";
                        if (proc.Plazorenovacion.ToString() == "mes1") { mes = "1 mes"; }
                        else if (proc.Plazorenovacion.ToString() == "mes2") { mes = "2 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes3") { mes = "3 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes4") { mes = "4 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes5") { mes = "5 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes6") { mes = "6 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes7") { mes = "7 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes8") { mes = "8 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes9") { mes = "9 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes10") { mes = "10 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes11") { mes = "11 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "anio1") { mes = "1 año"; }
                        else if (proc.Plazorenovacion.ToString() == "anio2") { mes = "2 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio3") { mes = "3 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio4") { mes = "4 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio5") { mes = "5 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio6") { mes = "6 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio7") { mes = "7 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio8") { mes = "8 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio9") { mes = "9 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio10") { mes = "10 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio20") { mes = "20 años"; }
                        else
                        {
                            mes = proc.Plazorenovacion.ToString();
                        }

                        reno = "\n Renovación : " + mes;

                    }


                    Doc.Add(tdatos41);

                    PdfPTable table = new PdfPTable(1);
                    //table.SpacingBefore = 65f;
                    //table.SpacingAfter = 65f;
                    table.TotalWidth = 480f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = Element.ALIGN_JUSTIFIED;


                    string ARIALUNI_TFF = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "Arial.TTF");

                    BaseFont bf = BaseFont.CreateFont(ARIALUNI_TFF, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);

                    Font f = new Font(bf, 7, Font.NORMAL);
                    Font centrar = new Font(bf, 7, Font.BOLD);
                    Font fontsNegrita = FontFactory.GetFont("Arial", 7, Font.BOLD);

                    PdfPCell cell2 = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, proc.Objetivo + reno, f),
                    };

                    table.AddCell(cell2);
                    Doc.Add(table);


                    Table tdatos5 = new Table(2);
                    int[] widths5 = new int[2];
                    widths5[0] = 2;
                    widths5[1] = 100;
                    tdatos5.SetWidths(widths5);

                    tdatos5.WidthPercentage = 100;
                    tdatos5.Border = 0;
                    tdatos5.BorderWidth = 0;
                    tdatos5.Padding = 2;
                    tdatos5.DefaultHorizontalAlignment = Element.ALIGN_LEFT;


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos5.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Requisitos", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);
                    Doc.Add(tdatos5);
                    //fin
                    string Generales = "";
                    int idGenerales = 1;

                    if (proc.sinnotas == 0)
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "1")
                            {
                                if (Generales == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Generales = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = "" + req.RecNum + ".- " + req.Nombre + "\n";
                                    }
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Generales = Generales + "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre + "\n";
                                }
                                else
                                {
                                    Generales = Generales + "\n" + req.RecNum + ".- " + req.Nombre + "\n";
                                }

                                idGenerales = idGenerales++;

                            }
                        }
                    }
                    else
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "1")
                            {
                                if (Generales == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Generales = "\n" + req.Titulo + "\n" + "" + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = "" + req.Nombre;
                                    }
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Generales = Generales + "\n" + req.Titulo + "\n" + "" + req.Nombre + "\n";
                                }
                                else
                                {
                                    Generales = Generales + "\n" + "" + req.Nombre + "\n";
                                }

                                idGenerales = idGenerales++;

                            }
                        }
                    }

                    string Nota = "";
                    int idnota = 1;
                    var idproce = proc.ProcedimientoId;

                    if (proc.sinnotas == 0)
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "2")
                            {

                                if (Nota == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Nota = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = req.RecNum + ".- " + req.Nombre + "\n";
                                    }
                                    //Nota = req.RecNum + ".- " + req.Nombre;
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Nota = Nota + "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                }
                                else
                                {
                                    Nota = Nota + "\n" + req.RecNum + ".- " + req.Nombre;
                                }

                                idnota = idnota++;
                            }
                        }
                    }
                    else
                    {

                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "2")
                            {

                                if (Nota == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Nota = "\n" + req.Titulo + "\n" + "" + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = req.Nombre;
                                    }
                                    //Nota = req.RecNum + ".- " + req.Nombre;
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Nota = Nota + "\n" + req.Titulo + "\n" + "" + req.Nombre + "\n";
                                }
                                else
                                {
                                    Nota = Nota + "\n" + "" + req.Nombre + "\n";
                                }

                                idnota = idnota++;
                            }
                        }
                    }

                    string nombnotas = "\nNotas:\n\n";

                    if (proc.sinnotas == 0)
                    {
                        if (Nota == "")
                        {
                            nombnotas = "\n";
                        }
                    }
                    else
                    {
                        nombnotas = "";
                    }
                    PdfPTable tablegeneral = new PdfPTable(1);
                    tablegeneral.TotalWidth = 480f;
                    tablegeneral.LockedWidth = true;
                    tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                    PdfPCell cellgeneral = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        //HorizontalAlignment=3,
                        VerticalAlignment = 3,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, Generales + nombnotas + Nota, f),
                    };


                    tablegeneral.AddCell(cellgeneral);
                    Doc.Add(tablegeneral);

                    //inicio
                    Table tdatos7 = new Table(2);
                    int[] widths7 = new int[2];
                    widths7[0] = 2;
                    widths7[1] = 100;
                    tdatos7.SetWidths(widths7);

                    tdatos7.WidthPercentage = 100;
                    tdatos7.Border = 0;
                    tdatos7.BorderWidth = 0;
                    tdatos7.Padding = 2;
                    tdatos7.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos7.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Formularios", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);

                    Doc.Add(tdatos7);

                    string Formulario = "";
                    string FormularionNombre = "";
                    if (proc.Requisito != null || proc.Requisito.Count > 0)
                    {
                        foreach (Requisito r in proc.Requisito.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                        {

                            if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                            {
                                foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                                {
                                    var rut = "\n";
                                    var urlrut = "\n";
                                    if (rf.Url != null)
                                    {
                                        urlrut = "\nUrl: " + rf.Url + "\n";
                                    }
                                    if (rf.ArchivoAdjuntoId != null)
                                    {
                                        long cod = rf.ArchivoAdjuntoId.Value;
                                        var archivo = _archivoAdjuntoService.GetOne(cod);
                                        rut = "\nUbicación: " + @pathLinkarchivos + archivo.Ruta + archivo.Extension;
                                        estadoformulario = rut;



                                        if (archivo.Extension == ".pdf")
                                        {
                                            FormularionNombre = "Formulario PDF: ";
                                        }
                                        else if (archivo.Extension == ".doc" || archivo.Extension == ".docx")
                                        {
                                            FormularionNombre = "Formulario Word: ";
                                        }
                                        else
                                        {
                                            FormularionNombre = "Formulario Excel: ";
                                        }
                                    };

                                    if (Formulario == "")
                                    {
                                        Formulario = FormularionNombre + rf.Nombre + rut + urlrut;
                                    }
                                    else
                                    {
                                        Formulario = Formulario + "\n" + FormularionNombre + rf.Nombre + rut + urlrut;
                                    }

                                }
                            }
                        }
                    }

                    PdfPTable tableformulario = new PdfPTable(1);
                    tableformulario.TotalWidth = 480f;
                    tableformulario.LockedWidth = true;
                    tableformulario.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    PdfPCell cellformulario = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, Formulario, f),
                    };

                    tableformulario.AddCell(cellformulario);
                    Doc.Add(tableformulario);


                    //inicio
                    Table tdatos8 = new Table(2);
                    int[] widths8 = new int[2];
                    widths8[0] = 2;
                    widths8[1] = 100;
                    tdatos8.SetWidths(widths8);

                    tdatos8.WidthPercentage = 100;
                    tdatos8.Border = 0;
                    tdatos8.BorderWidth = 0;
                    tdatos8.Padding = 2;
                    tdatos8.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos8.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Canales de atención", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);

                    Doc.Add(tdatos8);


                    var oficina = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 1 && x.Checked == true).Count() > 0;
                    var virt = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 2 && x.Checked == true).Count() > 0;
                    var tel = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 3 && x.Checked == true).Count() > 0;

                    string canales = "";

                    if ((bool)oficina)
                    {

                        if (canales == "")
                        {
                            canales = "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                        }

                    }
                    if ((bool)virt)
                    {

                        if (canales == "")
                        {
                            canales = "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                        }

                    }
                    if ((bool)tel)
                    {

                        if (canales == "")
                        {
                            canales = "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                        }

                    }

                    PdfPTable tablecanales = new PdfPTable(1);
                    tablecanales.TotalWidth = 480f;
                    tablecanales.LockedWidth = true;
                    tablecanales.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    PdfPCell cellcanales = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, canales, f),
                    };

                    tablecanales.AddCell(cellcanales);
                    Doc.Add(tablecanales);

                    //inicio Pago por derecho de tramitación 
                    Table tdatos9 = new Table(5);
                    int[] widths9 = new int[5];
                    widths9[0] = 2;
                    widths9[1] = 50;
                    widths9[2] = 5;
                    widths9[3] = 2;
                    widths9[4] = 50;
                    tdatos9.SetWidths(widths9);

                    tdatos9.WidthPercentage = 100;
                    tdatos9.Border = 0;
                    tdatos9.BorderWidth = 0;
                    tdatos9.Padding = 2;
                    tdatos9.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Pago por derecho de tramitación", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Modalidad de pagos", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    Doc.Add(tdatos9);

                    //Pago por derecho de Tramitación 

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();
                    string tramite = "";


                    for (int i = 0; i < proc.TablaAsme.Count(); i++)
                    {
                        if (proc.TablaAsme[i].EsGratuito == false)
                        {


                            if (proc.Expediente.TipoExpediente == TipoExpediente.CargaInicial)
                            {

                                if (tramite == "")
                                {

                                    //tramite = proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].CostoUnitario != 0)
                                    {


                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                        tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = desp + " S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0" ;
                                    }

                                }
                                else
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].CostoUnitario != 0)
                                    {
                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                        tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   

                                    }

                                    //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                }

                            }
                            else
                            {

                                if (tramite == "")
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                    {
                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;
                                        tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";

                                        //tramite = desp + " S/ " +  string.Format("{0:0.0}", proc.TablaAsme[i].DerechoTramitacion) + "0";
                                    }
                                    else
                                    {
                                        if (proc.Operacion == OperacionExpediente.Ninguna)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }
                                        else
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }

                                    }

                                }
                                else
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                        //decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;
                                        //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                    }

                                    if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                    {

                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                        tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].DerechoTramitacion) + "0";  

                                    }
                                    else
                                    {
                                        if (proc.Operacion == OperacionExpediente.Ninguna)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }
                                        else
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }

                                    }


                                }
                            }

                        }
                        else
                        {

                            List<TablaAsmeReproduccion> repro = _tablaAsmeReproduccionService.GetAll(proc.TablaAsme[i].TablaAsmeId);
                            if (tramite == "")
                            {
                                if (proc.TablaAsme[i].Descripcion == null)
                                {

                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = "";
                                    }
                                    else
                                    {
                                        tramite = "Gratuito ";
                                    }

                                }
                                else
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = proc.TablaAsme[i].Descripcion + '\n';
                                    }
                                    else
                                    {
                                        tramite = proc.TablaAsme[i].Descripcion + '\n' + "Gratuito ";
                                    }

                                }
                                if (repro.Count > 0)
                                {
                                    //tramite = "";
                                    //tramite = tramite + "\n\n Costo por Reproducción \n";
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + "Costo por Reproducción \n";
                                    }

                                }


                                foreach (var rp in repro)
                                {
                                    //if (proc.CodigoCorto == "PE123299E43")
                                    //{
                                    //    tramite = tramite +  "\n";
                                    //}
                                    //else
                                    //{
                                    tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                    //}

                                }
                                tramite = tramite + "\n";
                            }
                            else
                            {
                                if (proc.TablaAsme[i].Descripcion == null)
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n ";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n Gratuito ";
                                    }


                                }
                                else
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n';
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + " Gratuito";
                                    }


                                }

                                if (repro.Count > 0)
                                {
                                    //tramite = "";
                                    //tramite = tramite + "\n\n Costo por Reproducción \n";

                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + "Costo por Reproducción \n";
                                    }

                                }

                                foreach (var rp in repro)
                                {
                                    //if (proc.CodigoCorto == "PE123299E43")
                                    //{
                                    //    tramite = tramite + "\n";
                                    //}
                                    //else
                                    //{
                                    tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                    //}


                                }
                                tramite = tramite + "\n";
                            }
                        }

                    }

                    string titulo1 = "Caja de la Entidad \n";
                    string cajaentidad = "";


                    var Efectivo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 6 && x.Checked == true).Count() > 0;
                    var Debito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 7 && x.Checked == true).Count() > 0;
                    var Credito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 8 && x.Checked == true).Count() > 0;



                    if ((bool)Efectivo)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                        }

                    }


                    if ((bool)Debito)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                        }
                    }



                    if ((bool)Credito)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                        }

                    }



                    string titulo2 = "\nOtras opciones\n";
                    string otrasopciones = "";



                    var Agencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 9 && x.Checked == true).Count() > 0;
                    var Transferencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 10 && x.Checked == true).Count() > 0;
                    var Pagalo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 11 && x.Checked == true).Count() > 0;

                    if ((bool)Agencia)
                    {


                        if (otrasopciones == "")
                        {
                            otrasopciones = "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                        }
                    }

                    if ((bool)Transferencia)
                    {
                        if (otrasopciones == "")
                        {
                            otrasopciones = "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                        }
                    }
                    if ((bool)Pagalo)
                    {

                        if (otrasopciones == "")
                        {
                            otrasopciones = "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                        }
                    }



                    RoundRectangle2 rr2 = new RoundRectangle2();
                    RoundRectangle3 rr3 = new RoundRectangle3();
                    PdfPTable table2 = new PdfPTable(2);
                    table2.TotalWidth = 480f;
                    table2.LockedWidth = true;
                    table2.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    float[] values = new float[2];
                    values[0] = 105;
                    values[1] = 100;
                    table2.SetWidths(values);
                    PdfPCell cell1 = new PdfPCell()
                    {
                        CellEvent = rr2,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, tramite, f),

                    };
                    table2.AddCell(cell1);


                    if (cajaentidad == "")
                    {
                        titulo1 = "";
                    }


                    if (otrasopciones == "")
                    {
                        titulo2 = "";
                    }

                    Phrase phrase = new Phrase();
                    phrase.Add(
                        new Chunk(titulo1, fontsNegrita)

                    );
                    phrase.Add(new Chunk(cajaentidad, f));
                    phrase.Add(new Chunk(titulo2, fontsNegrita));
                    phrase.Add(new Chunk(otrasopciones, f));

                    PdfPCell cell23 = new PdfPCell()
                    {
                        CellEvent = rr3,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = phrase,
                        //Phrase = new Phrase(0, tramite, f),  
                    };
                    table2.AddCell(cell23);
                    Doc.Add(table2);

                    //inicio
                    Table tdatos10 = new Table(5);
                    int[] widths10 = new int[5];
                    widths10[0] = 2;
                    widths10[1] = 17;
                    widths10[2] = 5;
                    widths10[3] = 2;
                    widths10[4] = 100;
                    tdatos10.SetWidths(widths10);

                    tdatos10.WidthPercentage = 100;
                    tdatos10.Border = 0;
                    tdatos10.BorderWidth = 0;
                    tdatos10.Padding = 2;
                    tdatos10.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Plazo de atención", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Calificación del procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    Doc.Add(tdatos10);

                    var calificacion = proc.Calificacion.ToString();
                    string calProcedimiento = "";

                    //if (proc.TipoProcedimiento == TipoProcedimiento.Procedimiento )
                    //{


                    if (proc.Calificaciones == 1)
                    {
                        string Descripciontablas = proc.TablaAsme[0].Descripcion;
                        if (calificacion == "Automatica")
                        {
                            calProcedimiento = Descripciontablas + ": Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad." + "\n";
                        }
                        else if (calificacion == "SilencioPositivo")
                        {
                            calProcedimiento = Descripciontablas + ": Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada." + "\n";
                        }
                        else if (calificacion == "SilencioNegativo")
                        {
                            calProcedimiento = Descripciontablas + ": Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos." + "\n";
                        }

                        for (int i = 1; i < proc.TablaAsme.Count(); i++)
                        {
                            calificacion = proc.TablaAsme[i].Calificacion.ToString();
                            Descripciontablas = proc.TablaAsme[i].Descripcion.ToString();

                            if (calificacion == "Automatica")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad." + "\n";
                            }
                            else if (calificacion == "SilencioPositivo")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada." + "\n";
                            }
                            else if (calificacion == "SilencioNegativo")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos." + "\n";
                            }
                        }

                    }
                    else
                    {
                        if (calificacion == "Automatica")
                        {
                            calProcedimiento = "Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad.";
                        }
                        else if (calificacion == "SilencioPositivo")
                        {
                            calProcedimiento = "Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada.";
                        }
                        else if (calificacion == "SilencioNegativo")
                        {
                            calProcedimiento = "Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos.";
                        }
                    }
                    //}
                    //else
                    //{
                    //    if (calificacion == "Automatica")
                    //    {
                    //        calProcedimiento = "Aprobación automática: El procedimiento se da por aprobado a la sola presentación de todos los documentos";
                    //    }
                    //    else if (calificacion == "SilencioPositivo")
                    //    {
                    //        calProcedimiento = "Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, su solicitud ha sido aprobada.";
                    //    }
                    //    else if (calificacion == "SilencioNegativo")
                    //    {
                    //        calProcedimiento = "Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta puede interponer los recursos administrativos.";
                    //    }

                    //}




                    string plazos = "";
                    string tplazo = "";
                    List<PlazoAtencion> lstplazo = _plazoAtencionService.GetAll(proc.ProcedimientoId);

                    if (proc.TipoPlazo == TipoPlazo.calendarios || proc.TipoPlazo == TipoPlazo.habiles)
                    {
                        if (proc.TipoPlazo == TipoPlazo.habiles)
                        {
                            tplazo = " días hábiles";
                        }
                        else
                        {
                            tplazo = " días " + proc.TipoPlazo;
                        }
                    }
                    else
                    {
                        tplazo = " " + proc.TipoPlazo;
                    }
                    if (lstplazo.Count() != 0)
                    {
                        plazos = proc.PlazoAtencionDes + ": " + proc.PlazoAtencion + " " + tplazo + "\n";
                        foreach (var lstplazos in lstplazo)
                        {
                            if (lstplazos.TipoPlazo == TipoPlazo.calendarios || lstplazos.TipoPlazo == TipoPlazo.habiles)
                            {
                                if (proc.TipoPlazo == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + lstplazos.TipoPlazo;
                                }

                            }
                            else
                            {
                                tplazo = " " + lstplazos.TipoPlazo;
                            }
                            plazos = plazos + " " + lstplazos.Descripcion + ": " + lstplazos.Plazo + tplazo + "\n";

                        }
                    }
                    else
                    {
                        plazos = proc.PlazoAtencion + tplazo;
                    }



                    RoundRectangle4 rr4 = new RoundRectangle4();
                    RoundRectangle5 rr5 = new RoundRectangle5();
                    PdfPTable table3 = new PdfPTable(2);
                    table3.TotalWidth = 480f;
                    table3.LockedWidth = true;
                    table3.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    float[] values1 = new float[2];
                    values1[0] = 60;
                    values1[1] = 240;
                    table3.SetWidths(values1);
                    if (proc.PlazoAtencion != 0)
                    {
                        PdfPCell cell3 = new PdfPCell()
                        {
                            CellEvent = rr4,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, plazos, f),

                        };
                        table3.AddCell(cell3);
                    }
                    else
                    {
                        PdfPCell cell3 = new PdfPCell()
                        {
                            CellEvent = rr4,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, "", f),

                        };
                        table3.AddCell(cell3);
                    }

                    PdfPCell cell24 = new PdfPCell()
                    {
                        CellEvent = rr5,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, calProcedimiento, f),
                    };
                    table3.AddCell(cell24);
                    Doc.Add(table3);


                    //inicio
                    Table tdatos11 = new Table(2);
                    int[] widths11 = new int[2];
                    widths11[0] = 2;
                    widths11[1] = 100;
                    tdatos11.SetWidths(widths11);

                    tdatos11.WidthPercentage = 100;
                    tdatos11.Border = 0;
                    tdatos11.BorderWidth = 0;
                    tdatos11.Padding = 2;
                    tdatos11.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos11.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Sedes y horarios de atención", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);

                    Doc.Add(tdatos11);

                    //string sedehora = "";
                    //foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                    //{
                    //    var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                    //   string.Format("Lunes a Viernes de {0} a {1}. ",
                    //           item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                    //   : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                    //           item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                    //           item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                    //           item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                    //           item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                    //           )
                    //           : "") +
                    //        (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                    //           item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                    //           : "") +
                    //            (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                    //           item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                    //           : "");

                    //    if (sedehora == "")
                    //    {
                    //        sedehora = item.Sede.Nombre + ": " + horario;
                    //    }
                    //    else
                    //    {
                    //        sedehora = sedehora + "\n" + item.Sede.Nombre + ": " + horario;
                    //    }

                    //}


                    //PdfPTable tablesedes = new PdfPTable(1);
                    //tablesedes.TotalWidth = 480f;
                    //tablesedes.LockedWidth = true;
                    //tablesedes.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    //PdfPCell cellsedes = new PdfPCell()
                    //{
                    //    CellEvent = rr,
                    //    Padding = 10,
                    //    BorderWidth = 0,
                    //    Phrase = new Phrase(0, sedehora, f),
                    //};

                    //tablesedes.AddCell(cellsedes);
                    //Doc.Add(tablesedes);

                    PdfPCell celdasede;
                    PdfPCell celdapdf;
                    IPdfPCellEvent roundRectangleh = new RoundedBorder85();
                    PdfPTable outertableh = new PdfPTable(1);

                    outertableh.WidthPercentage = 100;

                    PdfPTable tdatossedes = new PdfPTable(2);
                    int[] widthssedes = new int[2];
                    widthssedes[0] = 60;
                    widthssedes[1] = 100;
                    tdatossedes.SetWidths(widthssedes);

                    tdatossedes.WidthPercentage = 100;
                    //tdatossedes.Border = 0;
                    //tdatossedes.BorderWidth = 0;
                    //tdatossedes.Padding = 2;
                    tdatossedes.HorizontalAlignment = Element.ALIGN_LEFT;


                    foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                    {
                        var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                       string.Format("Lunes a Viernes de {0} a {1}. ",
                               item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                               item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                       : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                               item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                               item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                               item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                               item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                               )
                               : (item.Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                            (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                               item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                               item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                               : "") +
                                (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                               item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                               item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                               : "");


                        celdasede = new PdfPCell();
                        celdasede.Border = PdfPCell.NO_BORDER;
                        //celdasede.Leading = 10; 
                        celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celdasede.AddElement(fnChunk(item.Sede.Nombre, (int)Fuente.FuenteLetraNormal));
                        tdatossedes.AddCell(celdasede);

                        celdasede = new PdfPCell();
                        celdasede.Border = PdfPCell.NO_BORDER;
                        //celda.Leading = 10; 
                        celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celdasede.AddElement(fnChunk(horario, (int)Fuente.FuenteLetraNormal));
                        tdatossedes.AddCell(celdasede);

                    }

                    celdapdf = new PdfPCell(tdatossedes);
                    celdapdf.CellEvent = roundRectangleh;
                    celdapdf.Border = PdfPCell.NO_BORDER;
                    celdapdf.Padding = 8;

                    outertableh.AddCell(celdapdf);
                    Doc.Add(outertableh);


                    //inicio
                    Table tdatos12 = new Table(2);
                    int[] widths12 = new int[2];
                    widths12[0] = 2;
                    widths12[1] = 100;
                    tdatos12.SetWidths(widths12);

                    tdatos12.WidthPercentage = 100;
                    tdatos12.Border = 0;
                    tdatos12.BorderWidth = 0;
                    tdatos12.Padding = 2;
                    tdatos12.DefaultHorizontalAlignment = Element.ALIGN_LEFT;



                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos12.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Unidad de organización donde se presenta la documentación", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);

                    Doc.Add(tdatos12);

                    string unidad = "";

                    List<UndOrgRecepcionDocumentos> nuevo;
                    var variable = dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId).ToList();

                    if (variable.Count == 0)
                    {
                        unidad = "";
                    }
                    else
                    {
                        if (variable.Count == 1)
                        {
                            nuevo = variable[0].UndOrgRecepcionDocumentos;
                        }
                        else
                        {
                            if (variable.Count <= sededat)
                            {
                                unidad = "";
                            }
                            else { nuevo = variable[sededat].UndOrgRecepcionDocumentos; }
                        }

                        int sededat3 = 0;
                        int sededat4 = 0;
                        List<int> oficinas = new List<int>();
                        List<long> idoficinas = new List<long>();
                        List<string> idsede = new List<string>();
                        MetaDato ofi = new MetaDato();
                        foreach (var item2 in variable)
                        {
                            var nuevo2 = variable[sededat3].UndOrgRecepcionDocumentos;
                            foreach (var item in nuevo2)
                            {
                                oficinas.Add(Convert.ToInt16(item.SedeId));
                                idoficinas.Add(item.UnidadOrganicaId);

                                if (item.UnidadOrganica == null)
                                {
                                    idsede.Add("No existe dentro de la sede: " + item.Sede.Nombre.ToString() + " Revisar");
                                }
                                else
                                {
                                    idsede.Add(item.UnidadOrganica.Nombre);
                                }
                                //idsede.Add(item.UnidadOrganica.Nombre);

                                String ver = proc.ProcedimientoId.ToString();
                            }

                            sededat3 = sededat3++;

                        }

                        string nom = string.Empty;
                        int valor = 0;
                        int idvalor = 0;
                        string nomb = "";
                        foreach (var item in idoficinas.Distinct())
                        {
                            valor = 0;
                            string sedes = "";
                            foreach (var item2 in variable)
                            {
                                int con = item2.UndOrgRecepcionDocumentos.Count();
                                for (int i = 0; i < con; i++)
                                {
                                    if (item == item2.UndOrgRecepcionDocumentos[i].UnidadOrganicaId)
                                    {

                                        sedes = sedes + ", " + item2.Sede.Nombre;
                                        valor = valor++;

                                        if (item2.UndOrgRecepcionDocumentos[i].UnidadOrganica == null)
                                        {

                                            nomb = "No existe dentro de la Und Org Recepcion Documentos:  Revisar";
                                        }
                                        else
                                        {
                                            nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                        }

                                        //nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                    }
                                }
                            }

                            //if (valor == variable.Count())
                            //{ 
                            //    nom = nomb + " : Todas las Sedes";

                            //    if (unidad == "")
                            //    {
                            //        unidad = nom;
                            //    }
                            //    else
                            //    {
                            //        unidad = unidad + "\n" + nom;
                            //    }

                            //}
                            //else
                            //{
                            int asd = sedes.Length;
                            nom = nomb + " : " + sedes.Substring(1, asd - 1);

                            if (unidad == "")
                            {
                                unidad = nom;
                            }
                            else
                            {
                                unidad = unidad + "\n" + nom;
                            }
                            //}
                            idvalor = valor++;
                            sededat4 = sededat4++;
                        }
                    }


                    PdfPTable tableunidad = new PdfPTable(1);
                    tableunidad.TotalWidth = 480f;
                    tableunidad.LockedWidth = true;
                    tableunidad.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    PdfPCell cellunidad = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, unidad, f),
                    };

                    tableunidad.AddCell(cellunidad);
                    Doc.Add(tableunidad);


                    sededat = sededat++;

                    //inicio
                    Table tdatos13 = new Table(5);
                    int[] widths13 = new int[5];
                    widths13[0] = 2;
                    widths13[1] = 50;
                    widths13[2] = 2;
                    widths13[3] = 2;
                    widths13[4] = 50;
                    tdatos13.SetWidths(widths13);

                    tdatos13.WidthPercentage = 100;
                    tdatos13.Border = 0;
                    tdatos13.BorderWidth = 0;
                    tdatos13.Padding = 2;
                    tdatos13.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Unidad de organización responsable de aprobar la solicitud", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Consulta sobre el procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    Doc.Add(tdatos13);

                    PdfPTable table4 = new PdfPTable(2);
                    table4.TotalWidth = 480f;
                    table4.LockedWidth = true;
                    table4.HorizontalAlignment = Element.ALIGN_LEFT;
                    float[] values4 = new float[2];
                    values4[0] = 95;
                    values4[1] = 90;
                    table4.SetWidths(values4);



                    if (proc.UndOrgResponsable != null)
                    {

                        string UndOrgResponsable;

                        UndOrgResponsable = proc.UndOrgResponsable.Nombre;

                        List<ProcedimientoUndOrgResponsable> ProcedimientoUndOrgResponsable = _ProcedimientoUndOrgResponsableService.GetAll(proc.ProcedimientoId);

                        if (ProcedimientoUndOrgResponsable.Count() != 0)
                        {
                            foreach (ProcedimientoUndOrgResponsable rec in ProcedimientoUndOrgResponsable)
                            {
                                UndOrgResponsable = UndOrgResponsable + "\n" + _unidadOrganicaService.GetOne(rec.UndOrgResponsableId2).Nombre;
                            }

                        }


                        PdfPCell cell12 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_LEFT,
                            Phrase = new Phrase(0, UndOrgResponsable, f),

                        };
                        table4.AddCell(cell12);
                    }
                    else
                    {

                        PdfPCell cell12 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_LEFT,
                            Phrase = new Phrase(0, "", f),

                        };
                        table4.AddCell(cell12);
                    }





                    PdfPCell cell25 = new PdfPCell()
                    {
                        CellEvent = rr3,
                        Border = 5,
                        Padding = 10,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_LEFT,
                        Phrase = new Phrase(0, "Teléfono: " + proc.Telefono + "\n" + "Anexo: " + proc.Anexo + "\n" + "Correo: " + proc.Correo, f),
                    };
                    table4.AddCell(cell25);
                    Doc.Add(table4);


                    //inicio
                    Table tdatos14 = new Table(2);
                    int[] widths14 = new int[2];
                    widths14[0] = 2;
                    widths14[1] = 100;
                    tdatos14.SetWidths(widths14);

                    tdatos14.WidthPercentage = 100;
                    tdatos14.Border = 0;
                    tdatos14.BorderWidth = 0;
                    tdatos14.Padding = 2;
                    tdatos14.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);

                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);


                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);

                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos14.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Instancias de resolución de recursos", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);

                    Doc.Add(tdatos14);

                    Table tdatos15 = new Table(20);
                    int[] widths15 = new int[20];
                    widths15[0] = 30;
                    widths15[1] = 100;
                    widths15[2] = 100;
                    widths15[3] = 100;
                    widths15[4] = 100;
                    widths15[5] = 100;
                    widths15[6] = 100;
                    widths15[7] = 100;
                    widths15[8] = 100;
                    widths15[9] = 100;
                    widths15[10] = 100;
                    widths15[11] = 100;
                    widths15[12] = 100;
                    widths15[13] = 100;
                    widths15[14] = 100;
                    widths15[15] = 100;
                    widths15[16] = 100;
                    widths15[17] = 100;
                    widths15[18] = 100;
                    widths15[19] = 100;
                    tdatos15.SetWidths(widths15);

                    tdatos15.WidthPercentage = 100;
                    tdatos15.Border = 0;
                    tdatos15.BorderWidth = 0;
                    tdatos15.Padding = 2;
                    tdatos15.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos15.AddCell(celda);



                    if (proc.revision == 1)
                    {
                        //*****************************///
                        if (proc.reclamacion == 1)
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 5;
                            celda.Add(fnChunk("Reclamación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }
                        else
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 5;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }


                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                        //**********************************//

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        celda.Add(fnChunk("Revisión", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        //*****************************///
                        if (proc.reclamacion == 1)
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reclamación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }
                        else
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }


                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                        //**********************************//

                    }

                    celda = new Cell();
                    //celda.BorderWidthRight = 1f;
                    //celda.BorderWidthBottom = 1f;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Autoridad competente", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);

                    //var autoridad2 = "";
                    var autoridad = "";
                    var PzoReconPresent = "";
                    var PzoApelPresent = "";
                    var PzoOtrosPresent = "";

                    var PzoReconResol = "";
                    var PzoApelResol = "";
                    var PzoOtrosResol = "";


                    var cargo = "";
                    var cargootros = "";
                    var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                    if (proc.CargoReconsideracion != null)
                    {
                        if (proc.UndOrgReconsideracion == null)
                        {
                            autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion;
                        }
                        else
                        {
                            if (proc.UndOrgReconsideracion != null)
                            {
                                autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion + " - " + proc.UndOrgReconsideracion.Nombre;

                                if (reconideracion != null)
                                {
                                    //char c1 = 'A';
                                    foreach (ProcedimientoCargos rec in reconideracion)
                                    {

                                        //c1++;


                                        autoridad = autoridad + '\n' + rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;



                                        if (rec.PzoPresent != 0)
                                        {
                                            var mese = "";
                                            if (rec.TipoReconPresent == TipoPlazo.calendarios || rec.TipoReconPresent == TipoPlazo.habiles)
                                            {
                                                if (rec.TipoReconPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + rec.TipoReconPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + rec.TipoReconPresent.ToString();
                                            }

                                            PzoReconPresent = PzoReconPresent + '\n' + rec.PzoPresent + mese;
                                        }

                                        if (rec.PzoResol != 0)
                                        {
                                            var mese = "";
                                            if (rec.TipoReconResol == TipoPlazo.calendarios || rec.TipoReconResol == TipoPlazo.habiles)
                                            {
                                                if (rec.TipoReconResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + rec.TipoReconResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + rec.TipoReconResol.ToString();
                                            }
                                            PzoReconResol = PzoReconResol + '\n' + rec.PzoResol + mese;
                                        }

                                    }
                                }


                            }
                            else
                            {
                                autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion + " - " + "";
                            }
                        }


                    }



                    //else {
                    //    autoridad = "No Corresponde";
                    //}
                    var apelacion = _procedimientoCargosApeService.GetOnelista(proc.ProcedimientoId);

                    if (proc.CargoApelacion != null)
                    {
                        if (proc.UndOrgApelacion == null)
                        {
                            cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion;
                        }
                        else
                        {
                            if (proc.UndOrgApelacion != null)
                            {
                                cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion + " - " + proc.UndOrgApelacion.Nombre;

                                if (apelacion != null)
                                {

                                    foreach (ProcedimientoCargosApe ape in apelacion)
                                    {


                                        cargo = cargo + '\n' + ape.CargoApe + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdApe).Nombre;


                                        if (ape.PzoPresentApe != 0)
                                        {

                                            var mese = "";
                                            if (ape.TipoApelPresent == TipoPlazo.calendarios || ape.TipoApelPresent == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoApelPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoApelPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoApelPresent.ToString();
                                            }

                                            PzoApelPresent = PzoApelPresent + '\n' + ape.PzoPresentApe + mese;
                                        }

                                        if (ape.PzoResolApe != 0)
                                        {
                                            var mese = "";
                                            if (ape.TipoApelResol == TipoPlazo.calendarios || ape.TipoApelResol == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoApelResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoApelResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoApelResol.ToString();
                                            }
                                            PzoApelResol = PzoApelResol + '\n' + ape.PzoResolApe + mese;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion + " - " + "";
                            }

                        }
                    }
                    /******************************************************************/

                    //var Otros = _procedimientoCargosApeService.GetOnelista(proc.ProcedimientoId);

                    var Otros = _procedimientoCargosOtrosService.GetOnelista(proc.ProcedimientoId);

                    if (proc.CargoOtros != null)
                    {
                        if (proc.UndOrgOtros == null)
                        {
                            cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros;
                        }
                        else
                        {
                            if (proc.UndOrgOtros != null)
                            {
                                cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros + " - " + proc.UndOrgOtros.Nombre;

                                if (apelacion != null)
                                {

                                    foreach (ProcedimientoCargosOtros ape in Otros)
                                    {


                                        cargootros = cargootros + '\n' + ape.CargoOtros + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdOtros).Nombre;


                                        if (ape.PzoPresentOtros != 0)
                                        {

                                            var mese = "";
                                            if (ape.TipoOtrosPresent == TipoPlazo.calendarios || ape.TipoOtrosPresent == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoOtrosPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoOtrosPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoOtrosPresent.ToString();
                                            }

                                            PzoOtrosPresent = PzoOtrosPresent + '\n' + ape.PzoPresentOtros + mese;
                                        }

                                        if (ape.PzoResolOtros != 0)
                                        {
                                            var mese = "";
                                            if (ape.TipoOtrosResol == TipoPlazo.calendarios || ape.TipoOtrosResol == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoOtrosResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoOtrosResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoOtrosResol.ToString();
                                            }
                                            PzoOtrosResol = PzoOtrosResol + '\n' + ape.PzoResolOtros + mese;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros + " - " + "";
                            }

                        }
                    }
                    /**********************************************************************/



                    if (proc.revision == 1)
                    {

                        //**************************************/////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk(autoridad.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk(cargo.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        //**************************************/////


                        celda = new Cell();
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        celda.Add(fnChunk(cargootros.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        //**************************************/////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk(autoridad.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk(cargo.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        //**************************************/////
                    }


                    celda = new Cell();
                    //celda.BorderWidthRight = 1f;
                    //celda.BorderWidthBottom = 1f;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Plazo máximo de presentación", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);



                    if (proc.revision == 1)
                    {


                        ////////////**************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoReconPresent == TipoPlazo.calendarios || proc.TipoReconPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconPresent.ToString();
                        }
                        if (proc.PzoReconPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconPresent + tplazo + '\n' + PzoReconPresent, (int)Fuente.FuenteLetraNormal));
                        }
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;

                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoApelPresent == TipoPlazo.calendarios || proc.TipoApelPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelPresent.ToString();
                        }

                        if (proc.PzoApelPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelPresent + tplazo + '\n' + PzoApelPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        ////////////**************************************////


                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        if (proc.TipoOtrosPresent == TipoPlazo.calendarios || proc.TipoOtrosPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoOtrosPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoOtrosPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoOtrosPresent.ToString();
                        }

                        if (proc.PzoPresentOtros == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoPresentOtros + tplazo + '\n' + PzoOtrosPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);
                    }
                    else
                    {

                        ////////////**************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoReconPresent == TipoPlazo.calendarios || proc.TipoReconPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconPresent.ToString();
                        }
                        if (proc.PzoReconPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconPresent + tplazo + '\n' + PzoReconPresent, (int)Fuente.FuenteLetraNormal));
                        }
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoApelPresent == TipoPlazo.calendarios || proc.TipoApelPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelPresent.ToString();
                        }

                        if (proc.PzoApelPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelPresent + tplazo + '\n' + PzoApelPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        ////////////**************************************////

                    }


                    celda = new Cell();
                    //celda.BorderWidthRight = 1f; 
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Plazo máximo de respuesta", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);


                    if (proc.revision == 1)
                    {


                        //*******************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoReconResol == TipoPlazo.calendarios || proc.TipoReconResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconResol.ToString();
                        }

                        if (proc.PzoReconResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconResol + tplazo + '\n' + PzoReconResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoApelResol == TipoPlazo.calendarios || proc.TipoApelResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelResol.ToString();
                        }

                        if (proc.PzoApelResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelResol + tplazo + '\n' + PzoApelResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        //**********************************////

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        if (proc.TipoOtrosResol == TipoPlazo.calendarios || proc.TipoOtrosResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoOtrosResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoOtrosResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoOtrosResol.ToString();
                        }

                        if (proc.PzoResolOtros == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoResolOtros + tplazo + '\n' + PzoOtrosResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);
                    }
                    else
                    {


                        //*******************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoReconResol == TipoPlazo.calendarios || proc.TipoReconResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconResol.ToString();
                        }

                        if (proc.PzoReconResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconResol + tplazo + '\n' + PzoReconResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoApelResol == TipoPlazo.calendarios || proc.TipoApelResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelResol.ToString();
                        }

                        if (proc.PzoApelResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelResol + tplazo + '\n' + PzoApelResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        //**********************************////
                    }


                    /*Inicio Multiple*/
                    /*

                    var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                    if (reconideracion != null)
                    { 
                        foreach (ProcedimientoCargos rec in reconideracion)
                            {
 
                                //Doc.Add(tdatos15);


                            tdatos15.WidthPercentage = 100;
                            tdatos15.Border = 0;
                            tdatos15.BorderWidth = 0;
                            tdatos15.Padding = 2;
                            tdatos15.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Autoridad competente", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            //var autoridad2 = "";
                            //var autoridad = "";
                            //var PzoReconPresent = "";
                            //var PzoApelPresent = "";

                            //var PzoReconResol = "";
                            //var PzoApelResol = "";



                            //var cargo = "";
                            //var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                            if (rec.Cargo != null)
                            {
                                if (rec.UndOrgId == 0)
                                {
                                    autoridad = rec.Cargo == null ? "" : rec.Cargo;
                                }
                                else
                                {
                                    if (rec.UndOrgId != 0)
                                    {
                                        autoridad = rec.Cargo == null ? "" : rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;

                                        //if (reconideracion!=null) {
                                        //    char c1 = 'A';
                                        //    foreach (ProcedimientoCargos rec in reconideracion)
                                        //    {

                                        //        c1++;
                                        //        autoridad = autoridad + '\n' + c1 + "- "+ rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;

                                        //        PzoReconPresent=  PzoReconPresent + '\n' + c1 + "- " + rec.PzoPresent + " días hábiles.";
                                        //        PzoReconResol = PzoReconResol + '\n' + c1 + "- " + rec.PzoResol + " días hábiles.";
                                        //    }
                                        //} 

                                    }
                                    else
                                    {
                                        autoridad = rec.Cargo == null ? "" : rec.Cargo + " - " + "";
                                    }
                                }


                            }



                            //else {
                            //    autoridad = "No Corresponde";
                            //}
                            var apelacion = _procedimientoCargosApeService.LsitaGetOneorden(proc.ProcedimientoId,rec.orden);

                            if (apelacion.CargoApe != null)
                            {
                                if (apelacion.UndOrgIdApe == 0)
                                {
                                    cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe;
                                }
                                else
                                {
                                    if (apelacion.UndOrgIdApe != 0)
                                    {
                                        cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe + " - " + _unidadOrganicaService.GetOne(apelacion.UndOrgIdApe).Nombre;

                                        //if (apelacion != null)
                                        //{
                                        //    char c1 = 'A';
                                        //    foreach (ProcedimientoCargosApe ape in apelacion)
                                        //    {

                                        //        c1++;
                                        //        cargo = cargo + '\n' + c1 + "- " + ape.CargoApe + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdApe).Nombre;

                                        //        PzoApelPresent = PzoApelPresent + '\n' + c1 + "- " + ape.PzoPresentApe + " días hábiles.";
                                        //        PzoApelResol = PzoApelResol + '\n' + c1 + "- " + ape.PzoResolApe + " días hábiles.";
                                        //    }
                                        //}
                                    }
                                    else
                                    {
                                        cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe + " - " + "";
                                    }

                                }
                            }


                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk(autoridad, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk(cargo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Plazo máximo de presentación", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);



                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            if (rec.TipoReconPresent == TipoPlazo.calendarios || rec.TipoReconPresent == TipoPlazo.habiles)
                            {
                                if (rec.TipoReconPresent == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoReconPresent;
                                }
                            }
                            else
                            {
                                tplazo = " " + rec.TipoReconPresent.ToString(); 
                            }

                            celda.Add(fnChunk(rec.PzoPresent + " "+ tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (apelacion.TipoApelPresent == TipoPlazo.calendarios || apelacion.TipoApelPresent == TipoPlazo.habiles)
                            {
                                if (apelacion.TipoApelPresent == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoApelPresent;
                                }
                            }
                            else
                            {
                                tplazo = " " + apelacion.TipoApelPresent.ToString();
                            }
                            celda.Add(fnChunk(apelacion.PzoPresentApe + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Plazo máximo de respuesta", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);


                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (rec.TipoReconResol == TipoPlazo.calendarios || rec.TipoReconResol == TipoPlazo.habiles)
                            {
                                if (rec.TipoReconResol == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + rec.TipoReconResol;
                                }
                            }
                            else
                            {
                                tplazo = " " + rec.TipoReconResol.ToString();
                            }

                            celda.Add(fnChunk(rec.PzoResol + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (apelacion.TipoApelResol == TipoPlazo.calendarios || apelacion.TipoApelResol == TipoPlazo.habiles)
                            {
                                if (apelacion.TipoApelResol == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoApelResol;
                                }
                            }
                            else
                            {
                                tplazo = " " + apelacion.TipoApelResol.ToString();
                            }
                            celda.Add(fnChunk(apelacion.PzoResolApe + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            }
                    }
                    /*Fin Multiple*/


                    if (proc.TipoProcedimiento == TipoProcedimiento.Estandar)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoReconsideracion != null && proc.CargoApelacion == null && proc.sinnotas == 0)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de reconsideración se interpondrá ante el mismo órgano que dictó el primer acto que es materia de la impugnación y deberá sustentarse en nueva prueba", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoApelacion != null && proc.CargoReconsideracion == null)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de apelación se interpondrá cuando la impugnación se sustente en diferente interpretación de las pruebas producidas o cuando se trate de cuestiones de puro derecho, debiendo dirigirse a la misma autoridad que expidió el acto que se impugna para que eleve lo actuado al superior jerárquico.", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoApelacion != null && proc.CargoReconsideracion != null)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de reconsideración se interpondrá ante el mismo órgano que dictó el primer acto que es materia de la impugnación y deberá sustentarse en nueva prueba.\nEl recurso de apelación se interpondrá cuando la impugnación se sustente en diferente interpretación de las pruebas producidas o cuando se trate de cuestiones de puro derecho, debiendo dirigirse a la misma autoridad que expidió el acto que se impugna para que eleve lo actuado al superior jerárquico.", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }



                    Doc.Add(tdatos15);

                    //inicio
                    Table tdatos16 = new Table(2);
                    int[] widths16 = new int[2];
                    widths16[0] = 2;
                    widths16[1] = 100;
                    tdatos16.SetWidths(widths16);

                    tdatos16.WidthPercentage = 100;
                    tdatos16.Border = 0;
                    tdatos16.BorderWidth = 0;
                    tdatos16.Padding = 2;
                    tdatos16.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos16.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Base legal", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);

                    Doc.Add(tdatos16);

                    Table tdatos4 = new Table(20);
                    int[] widths = new int[20];
                    widths[0] = 30;
                    widths[1] = 100;
                    widths[2] = 100;
                    widths[3] = 100;
                    widths[4] = 100;
                    widths[5] = 100;
                    widths[6] = 100;
                    widths[7] = 100;
                    widths[8] = 100;
                    widths[9] = 100;
                    widths[10] = 100;
                    widths[11] = 100;
                    widths[12] = 100;
                    widths[13] = 100;
                    widths[14] = 100;
                    widths[15] = 100;
                    widths[16] = 100;
                    widths[17] = 100;
                    widths[18] = 100;
                    widths[19] = 100;
                    tdatos4.SetWidths(widths);

                    tdatos4.WidthPercentage = 100;
                    tdatos4.Border = 0;
                    tdatos4.BorderWidth = 0;
                    tdatos4.Padding = 2;
                    tdatos4.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Artículo", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 8;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 3;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Tipo", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 3;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Número", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 2;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Fecha Publicación", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    int sedebase = 0;
                    for (int iii = 0; iii < dataBaseLegal.Count(); iii++)
                    {
                        if (dataBaseLegal[iii].BaseLegalId == proc.BaseLegalId)
                        {

                            var descripcionACR = "";
                            var nomsede = "";
                            var dessede = "";
                            var numsede = "";
                            var articulosede = "";
                            var fechasede = "";
                            var valornom = dataBaseLegal.Count();
                            var valornom2 = iii;

                            if (valornom != 0)
                            {
                                if (ProcedimientoIds[0] == 0)
                                {
                                    if (valornom != 1 && valornom2 != 1)
                                    {


                                        if (dataBaseLegal[iii].EstadoACR == "2")
                                        {
                                            descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                        }
                                        else
                                        {
                                            if (dataBaseLegal.Count <= iii)
                                            {
                                                nomsede = "";
                                                dessede = "";
                                                numsede = "";
                                                articulosede = "";
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                                dessede = dataBaseLegal[iii].Descripcion;
                                                numsede = dataBaseLegal[iii].Numero;
                                                articulosede = dataBaseLegal[iii].Articulo;
                                                if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                                {
                                                    fechasede = "";
                                                }
                                                else
                                                {
                                                    fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                                }


                                            }
                                        }
                                    }
                                    else
                                    {
                                        nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                        dessede = dataBaseLegal[iii].Descripcion;
                                        numsede = dataBaseLegal[iii].Numero;
                                        articulosede = dataBaseLegal[iii].Articulo;
                                        if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                        {
                                            fechasede = "";
                                        }
                                        else
                                        {
                                            fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                        }

                                    }

                                }
                                else
                                {

                                    if (dataBaseLegal[iii].EstadoACR == "2")
                                    {
                                        descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                    }
                                    else
                                    {
                                        nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                        dessede = dataBaseLegal[iii].Descripcion;
                                        numsede = dataBaseLegal[iii].Numero;
                                        articulosede = dataBaseLegal[iii].Articulo;
                                        if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                        {
                                            fechasede = "";
                                        }
                                        else
                                        {
                                            fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                        }
                                    }


                                }
                            }

                            if (valornom != 0)
                            {
                                if (dataBaseLegal[iii].EstadoACR == "2")
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 20;
                                    celda.Add(fnChunk(descripcionACR, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }
                                else
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 4;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 8;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 2;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }

                            }
                            else
                            {
                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 4;
                                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 8;
                                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 3;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 3;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                            }
                        }

                        sedebase = sedebase++;

                    }
                    Doc.Add(tdatos4);

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    contpag = 1;
                    //Doc.NewPage();

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();
                }
                cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                cb.Stroke();
            }
            //fin grupo
        }


        private void GenerarProceAdmCompleto(long ExpedienteId, List<long> ProcedimientoIds, PdfWriter writer)
        {

            //caratula 

            var rutpag = @pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf";
            PdfReader Rdpag = new PdfReader(rutpag);
            var npag = Rdpag.NumberOfPages;
            pagcabhoja = pagcabhoja + npag;


            rutpag = @pathdocumentos + "Archivo" + ExpedienteId + "_indiceConteo.pdf";
            Rdpag = new PdfReader(rutpag);
            npag = Rdpag.NumberOfPages;
            pagcabhoja = pagcabhoja + npag;

            rutpag = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloProce.pdf";
            Rdpag = new PdfReader(rutpag);
            npag = Rdpag.NumberOfPages;
            pagcabhoja = pagcabhoja + npag++;



            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).OrderBy(x => x.RecNum).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

            if (ProcedimientoIds[0] == 0)
            {

                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3).OrderBy(x => x.RecNum);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);



            //deta grupo
            //generacion de los reportes formato tupa por procedimento
            List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
            if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
            //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
            int sededat = 0;

            int contpag = 0;
            MemoryStream stream = new MemoryStream();
            foreach (Procedimiento proc in dataProc)
            {
                proc.TablaAsme = proc.TablaAsme.OrderBy(x => x.TablaAsmeId).ToList();
                //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                //cb.Stroke();
                string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                if (tipo == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)
                {


                    Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
                    PdfWriter writer1 = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_P" + contpag + ".pdf", FileMode.Create));
                    //PdfContentByte cb = writer.DirectContent;
                    //AdicionarCabecera(Doc, ExpedienteId);

                    Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                    HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                    footer.Border = 0;
                    //footer.BorderWidthTop = 1;
                    footer.Alignment = Element.ALIGN_RIGHT;
                    Doc.Footer = footer;

                    string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

                    Table tcab = new Table(1);
                    Cell celda;

                    tcab.WidthPercentage = 100;
                    tcab.Border = 0;
                    tcab.BorderWidth = 0;
                    tcab.Padding = 2;
                    tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;
                    tcab.DefaultVerticalAlignment = Element.ALIGN_MIDDLE;

                    //inicio
                    Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                    Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                    Phrase p1 = new Phrase(chkHeader);
                    footer = new HeaderFooter(p1, false);
                    footer.Border = Rectangle.NO_BORDER;
                    footer.Alignment = Element.ALIGN_CENTER;
                    footer.BorderColor = new Color(242, 242, 242);
                    footer.BackgroundColor = new Color(242, 242, 242);
                    Doc.Header = footer;
                    //fin

                    //cuadro total de la hoaj
                    RoundRectangle rr = new RoundRectangle();

                    for (int i = 0; i < pagcabhoja; i++)
                    {
                        Doc.Open();
                    }
                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderColor = new Color(242, 242, 242);
                    //celda.BackgroundColor = new Color(242, 242, 242);
                    //celda.Leading = 10;
                    //celda.BorderColor = new Color(242, 242, 242);
                    //celda.BackgroundColor = new Color(242, 242, 242);
                    //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
                    //tcab.AddCell(celda);
                    //Doc.Add(tcab);



                    //--- NoSe,nose, ancho,alto
                    PdfContentByte cb = writer1.DirectContent;
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    //Doc.Open();

                    Table tdatos41 = new Table(20);
                    int[] widths1 = new int[20];
                    widths1[0] = 30;
                    widths1[1] = 100;
                    widths1[2] = 100;
                    widths1[3] = 100;
                    widths1[4] = 100;
                    widths1[5] = 100;
                    widths1[6] = 100;
                    widths1[7] = 100;
                    widths1[8] = 100;
                    widths1[9] = 100;
                    widths1[10] = 100;
                    widths1[11] = 100;
                    widths1[12] = 100;
                    widths1[13] = 100;
                    widths1[14] = 100;
                    widths1[15] = 100;
                    widths1[16] = 100;
                    widths1[17] = 100;
                    widths1[18] = 100;
                    widths1[19] = 100;
                    tdatos41.SetWidths(widths1);

                    var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);

                    tdatos41.WidthPercentage = 100;
                    tdatos41.Border = 0;
                    tdatos41.BorderWidth = 0;
                    tdatos41.Padding = 2;
                    tdatos41.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Colspan = 8;
                    celda.Add(fnChunk("Denominación del Procedimiento Administrativo", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 12;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("\"" + proc.Denominacion + "\"", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    if (proc.CodigoCorto != null)
                    {
                        celda.Add(fnChunk("Código: " + proc.CodigoCorto.ToUpper(), (int)Fuente.FuenteNegrita));
                    }
                    else
                    {
                        celda.Add(fnChunk("Código: ", (int)Fuente.FuenteNegrita));
                    }

                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 19;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Descripción del procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    var reno = "";
                    celda.BorderColor = Color.BLACK;
                    if (proc.Renovacio.ToString() == "Si")
                    {
                        var mes = "";
                        if (proc.Plazorenovacion.ToString() == "mes1") { mes = "1 mes"; }
                        else if (proc.Plazorenovacion.ToString() == "mes2") { mes = "2 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes3") { mes = "3 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes4") { mes = "4 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes5") { mes = "5 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes6") { mes = "6 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes7") { mes = "7 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes8") { mes = "8 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes9") { mes = "9 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes10") { mes = "10 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes11") { mes = "11 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "anio1") { mes = "1 año"; }
                        else if (proc.Plazorenovacion.ToString() == "anio2") { mes = "2 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio3") { mes = "3 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio4") { mes = "4 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio5") { mes = "5 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio6") { mes = "6 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio7") { mes = "7 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio8") { mes = "8 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio9") { mes = "9 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio10") { mes = "10 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio20") { mes = "20 años"; }
                        else
                        {
                            mes = proc.Plazorenovacion.ToString();
                        }

                        reno = "\n Renovación : " + mes;

                    }


                    Doc.Add(tdatos41);

                    PdfPTable table = new PdfPTable(1);
                    //table.SpacingBefore = 65f;
                    //table.SpacingAfter = 65f;
                    table.TotalWidth = 480f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = Element.ALIGN_JUSTIFIED;


                    string ARIALUNI_TFF = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "Arial.TTF");

                    BaseFont bf = BaseFont.CreateFont(ARIALUNI_TFF, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);

                    Font f = new Font(bf, 7, Font.NORMAL);
                    Font centrar = new Font(bf, 7, Font.BOLD);
                    Font fontsNegrita = FontFactory.GetFont("Arial", 7, Font.BOLD);

                    PdfPCell cell2 = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, proc.Objetivo + reno, f),
                    };

                    table.AddCell(cell2);
                    Doc.Add(table);


                    Table tdatos5 = new Table(2);
                    int[] widths5 = new int[2];
                    widths5[0] = 2;
                    widths5[1] = 100;
                    tdatos5.SetWidths(widths5);

                    tdatos5.WidthPercentage = 100;
                    tdatos5.Border = 0;
                    tdatos5.BorderWidth = 0;
                    tdatos5.Padding = 2;
                    tdatos5.DefaultHorizontalAlignment = Element.ALIGN_LEFT;


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos5.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Requisitos", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);
                    Doc.Add(tdatos5);
                    //fin
                    string Generales = "";
                    int idGenerales = 1;

                    if (proc.sinnotas == 0)
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "1")
                            {
                                if (Generales == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Generales = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = "" + req.RecNum + ".- " + req.Nombre + "\n";
                                    }
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Generales = Generales + "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre + "\n";
                                }
                                else
                                {
                                    Generales = Generales + "\n" + req.RecNum + ".- " + req.Nombre + "\n";
                                }

                                idGenerales = idGenerales++;

                            }
                        }
                    }
                    else
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "1")
                            {
                                if (Generales == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Generales = "\n" + req.Titulo + "\n" + "" + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = "" + req.Nombre;
                                    }
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Generales = Generales + "\n" + req.Titulo + "\n" + "" + req.Nombre + "\n";
                                }
                                else
                                {
                                    Generales = Generales + "\n" + "" + req.Nombre + "\n";
                                }

                                idGenerales = idGenerales++;

                            }
                        }
                    }

                    string Nota = "";
                    int idnota = 1;
                    var idproce = proc.ProcedimientoId;

                    if (proc.sinnotas == 0)
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "2")
                            {

                                if (Nota == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Nota = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = req.RecNum + ".- " + req.Nombre + "\n";
                                    }
                                    //Nota = req.RecNum + ".- " + req.Nombre;
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Nota = Nota + "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                }
                                else
                                {
                                    Nota = Nota + "\n" + req.RecNum + ".- " + req.Nombre;
                                }

                                idnota = idnota++;
                            }
                        }
                    }
                    else
                    {

                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "2")
                            {

                                if (Nota == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Nota = "\n" + req.Titulo + "\n" + "" + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = req.Nombre;
                                    }
                                    //Nota = req.RecNum + ".- " + req.Nombre;
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Nota = Nota + "\n" + req.Titulo + "\n" + "" + req.Nombre + "\n";
                                }
                                else
                                {
                                    Nota = Nota + "\n" + "" + req.Nombre + "\n";
                                }

                                idnota = idnota++;
                            }
                        }
                    }

                    string nombnotas = "\nNotas:\n\n";

                    if (proc.sinnotas == 0)
                    {
                        if (Nota == "")
                        {
                            nombnotas = "\n";
                        }
                    }
                    else
                    {
                        nombnotas = "";
                    }
                    PdfPTable tablegeneral = new PdfPTable(1);
                    tablegeneral.TotalWidth = 480f;
                    tablegeneral.LockedWidth = true;
                    tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                    PdfPCell cellgeneral = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        //HorizontalAlignment=3,
                        VerticalAlignment = 3,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, Generales + nombnotas + Nota, f),
                    };


                    tablegeneral.AddCell(cellgeneral);
                    Doc.Add(tablegeneral);

                    //inicio
                    Table tdatos7 = new Table(2);
                    int[] widths7 = new int[2];
                    widths7[0] = 2;
                    widths7[1] = 100;
                    tdatos7.SetWidths(widths7);

                    tdatos7.WidthPercentage = 100;
                    tdatos7.Border = 0;
                    tdatos7.BorderWidth = 0;
                    tdatos7.Padding = 2;
                    tdatos7.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos7.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Formularios", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);

                    Doc.Add(tdatos7);

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();
                    string Formulario = "";
                    string FormularionNombre = "";
                    if (proc.Requisito != null || proc.Requisito.Count > 0)
                    {
                        foreach (Requisito r in proc.Requisito.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                        {

                            if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                            {
                                foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                                {
                                    var rut = "\n";
                                    var urlrut = "\n";
                                    if (rf.Url != null)
                                    {
                                        urlrut = "\nUrl: " + rf.Url + "\n";
                                    }
                                    if (rf.ArchivoAdjuntoId != null)
                                    {
                                        long cod = rf.ArchivoAdjuntoId.Value;
                                        var archivo = _archivoAdjuntoService.GetOne(cod);
                                        rut = "\nUbicación: " + @pathLinkarchivos + archivo.Ruta + archivo.Extension;
                                        estadoformulario = rut;



                                        if (archivo.Extension == ".pdf")
                                        {
                                            FormularionNombre = "Formulario PDF: ";
                                        }
                                        else if (archivo.Extension == ".doc" || archivo.Extension == ".docx")
                                        {
                                            FormularionNombre = "Formulario Word: ";
                                        }
                                        else
                                        {
                                            FormularionNombre = "Formulario Excel: ";
                                        }
                                    };

                                    if (Formulario == "")
                                    {
                                        Formulario = FormularionNombre + rf.Nombre + rut + urlrut;
                                    }
                                    else
                                    {
                                        Formulario = Formulario + "\n" + FormularionNombre + rf.Nombre + rut + urlrut;
                                    }

                                }
                            }
                        }
                    }

                    PdfPTable tableformulario = new PdfPTable(1);
                    tableformulario.TotalWidth = 480f;
                    tableformulario.LockedWidth = true;
                    tableformulario.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    PdfPCell cellformulario = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, Formulario, f),
                    };

                    tableformulario.AddCell(cellformulario);
                    Doc.Add(tableformulario);
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    //inicio
                    Table tdatos8 = new Table(2);
                    int[] widths8 = new int[2];
                    widths8[0] = 2;
                    widths8[1] = 100;
                    tdatos8.SetWidths(widths8);

                    tdatos8.WidthPercentage = 100;
                    tdatos8.Border = 0;
                    tdatos8.BorderWidth = 0;
                    tdatos8.Padding = 2;
                    tdatos8.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos8.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Canales de atención", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);

                    Doc.Add(tdatos8);


                    var oficina = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 1 && x.Checked == true).Count() > 0;
                    var virt = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 2 && x.Checked == true).Count() > 0;
                    var tel = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 3 && x.Checked == true).Count() > 0;

                    string canales = "";

                    if ((bool)oficina)
                    {

                        if (canales == "")
                        {
                            canales = "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                        }

                    }
                    if ((bool)virt)
                    {

                        if (canales == "")
                        {
                            canales = "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                        }

                    }
                    if ((bool)tel)
                    {

                        if (canales == "")
                        {
                            canales = "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                        }

                    }

                    PdfPTable tablecanales = new PdfPTable(1);
                    tablecanales.TotalWidth = 480f;
                    tablecanales.LockedWidth = true;
                    tablecanales.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    PdfPCell cellcanales = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, canales, f),
                    };

                    tablecanales.AddCell(cellcanales);
                    Doc.Add(tablecanales);

                    //inicio Pago por derecho de tramitación 
                    Table tdatos9 = new Table(5);
                    int[] widths9 = new int[5];
                    widths9[0] = 2;
                    widths9[1] = 50;
                    widths9[2] = 5;
                    widths9[3] = 2;
                    widths9[4] = 50;
                    tdatos9.SetWidths(widths9);

                    tdatos9.WidthPercentage = 100;
                    tdatos9.Border = 0;
                    tdatos9.BorderWidth = 0;
                    tdatos9.Padding = 2;
                    tdatos9.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Pago por derecho de tramitación", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Modalidad de pagos", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    Doc.Add(tdatos9);

                    //Pago por derecho de Tramitación 

                    string tramite = "";

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();
                    for (int i = 0; i < proc.TablaAsme.Count(); i++)
                    {
                        if (proc.TablaAsme[i].EsGratuito == false)
                        {


                            if (proc.Expediente.TipoExpediente == TipoExpediente.CargaInicial)
                            {

                                if (tramite == "")
                                {

                                    //tramite = proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].CostoUnitario != 0)
                                    {


                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                        tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = desp + " S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0" ;
                                    }

                                }
                                else
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].CostoUnitario != 0)
                                    {
                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                        tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   

                                    }

                                    //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                }

                            }
                            else
                            {

                                if (tramite == "")
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                    {
                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;
                                        tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";

                                        //tramite = desp + " S/ " +  string.Format("{0:0.0}", proc.TablaAsme[i].DerechoTramitacion) + "0";
                                    }
                                    else
                                    {
                                        if (proc.Operacion == OperacionExpediente.Ninguna)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }
                                        else
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }

                                    }

                                }
                                else
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                        //decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;
                                        //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                    }

                                    if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                    {

                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                        tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].DerechoTramitacion) + "0";  

                                    }
                                    else
                                    {
                                        if (proc.Operacion == OperacionExpediente.Ninguna)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }
                                        else
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }

                                    }




                                }
                            }

                        }
                        else
                        {

                            List<TablaAsmeReproduccion> repro = _tablaAsmeReproduccionService.GetAll(proc.TablaAsme[i].TablaAsmeId);
                            if (tramite == "")
                            {
                                if (proc.TablaAsme[i].Descripcion == null)
                                {

                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = "";
                                    }
                                    else
                                    {
                                        tramite = "Gratuito ";
                                    }

                                }
                                else
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = proc.TablaAsme[i].Descripcion + '\n';
                                    }
                                    else
                                    {
                                        tramite = proc.TablaAsme[i].Descripcion + '\n' + "Gratuito ";
                                    }

                                }
                                if (repro.Count > 0)
                                {
                                    //tramite = "";
                                    //tramite = tramite + "\n\n Costo por Reproducción \n";
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + "Costo por Reproducción \n";
                                    }

                                }


                                foreach (var rp in repro)
                                {
                                    //if (proc.CodigoCorto == "PE123299E43")
                                    //{
                                    //    tramite = tramite +  "\n";
                                    //}
                                    //else
                                    //{
                                    tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                    //}

                                }
                                tramite = tramite + "\n";
                            }
                            else
                            {
                                if (proc.TablaAsme[i].Descripcion == null)
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n ";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n Gratuito ";
                                    }


                                }
                                else
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n';
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + " Gratuito";
                                    }


                                }

                                if (repro.Count > 0)
                                {
                                    //tramite = "";
                                    //tramite = tramite + "\n\n Costo por Reproducción \n";

                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + "Costo por Reproducción \n";
                                    }

                                }

                                foreach (var rp in repro)
                                {
                                    //if (proc.CodigoCorto == "PE123299E43")
                                    //{
                                    //    tramite = tramite + "\n";
                                    //}
                                    //else
                                    //{
                                    tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                    //}


                                }
                                tramite = tramite + "\n";
                            }
                        }

                    }

                    string titulo1 = "Caja de la Entidad \n";
                    string cajaentidad = "";


                    var Efectivo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 6 && x.Checked == true).Count() > 0;
                    var Debito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 7 && x.Checked == true).Count() > 0;
                    var Credito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 8 && x.Checked == true).Count() > 0;



                    if ((bool)Efectivo)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                        }

                    }


                    if ((bool)Debito)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                        }
                    }



                    if ((bool)Credito)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                        }

                    }



                    string titulo2 = "\nOtras opciones\n";
                    string otrasopciones = "";



                    var Agencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 9 && x.Checked == true).Count() > 0;
                    var Transferencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 10 && x.Checked == true).Count() > 0;
                    var Pagalo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 11 && x.Checked == true).Count() > 0;

                    if ((bool)Agencia)
                    {


                        if (otrasopciones == "")
                        {
                            otrasopciones = "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                        }
                    }

                    if ((bool)Transferencia)
                    {
                        if (otrasopciones == "")
                        {
                            otrasopciones = "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                        }
                    }
                    if ((bool)Pagalo)
                    {

                        if (otrasopciones == "")
                        {
                            otrasopciones = "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                        }
                    }



                    RoundRectangle2 rr2 = new RoundRectangle2();
                    RoundRectangle3 rr3 = new RoundRectangle3();
                    PdfPTable table2 = new PdfPTable(2);
                    table2.TotalWidth = 480f;
                    table2.LockedWidth = true;
                    table2.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    float[] values = new float[2];
                    values[0] = 105;
                    values[1] = 100;
                    table2.SetWidths(values);
                    PdfPCell cell1 = new PdfPCell()
                    {
                        CellEvent = rr2,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, tramite, f),

                    };
                    table2.AddCell(cell1);


                    if (cajaentidad == "")
                    {
                        titulo1 = "";
                    }


                    if (otrasopciones == "")
                    {
                        titulo2 = "";
                    }

                    Phrase phrase = new Phrase();
                    phrase.Add(
                        new Chunk(titulo1, fontsNegrita)

                    );
                    phrase.Add(new Chunk(cajaentidad, f));
                    phrase.Add(new Chunk(titulo2, fontsNegrita));
                    phrase.Add(new Chunk(otrasopciones, f));

                    PdfPCell cell23 = new PdfPCell()
                    {
                        CellEvent = rr3,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = phrase,
                        //Phrase = new Phrase(0, tramite, f),  
                    };
                    table2.AddCell(cell23);
                    Doc.Add(table2);

                    //inicio
                    Table tdatos10 = new Table(5);
                    int[] widths10 = new int[5];
                    widths10[0] = 2;
                    widths10[1] = 17;
                    widths10[2] = 5;
                    widths10[3] = 2;
                    widths10[4] = 100;
                    tdatos10.SetWidths(widths10);

                    tdatos10.WidthPercentage = 100;
                    tdatos10.Border = 0;
                    tdatos10.BorderWidth = 0;
                    tdatos10.Padding = 2;
                    tdatos10.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Plazo de atención", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Calificación del procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    Doc.Add(tdatos10);

                    var calificacion = proc.Calificacion.ToString();
                    string calProcedimiento = "";

                    //if (proc.TipoProcedimiento == TipoProcedimiento.Procedimiento )
                    //{

                    if (proc.Calificaciones == 1)
                    {
                        string Descripciontablas = proc.TablaAsme[0].Descripcion;
                        if (calificacion == "Automatica")
                        {
                            calProcedimiento = Descripciontablas + ": Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad." + "\n";
                        }
                        else if (calificacion == "SilencioPositivo")
                        {
                            calProcedimiento = Descripciontablas + ": Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada." + "\n";
                        }
                        else if (calificacion == "SilencioNegativo")
                        {
                            calProcedimiento = Descripciontablas + ": Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos." + "\n";
                        }

                        for (int i = 1; i < proc.TablaAsme.Count(); i++)
                        {
                            calificacion = proc.TablaAsme[i].Calificacion.ToString();
                            Descripciontablas = proc.TablaAsme[i].Descripcion.ToString();

                            if (calificacion == "Automatica")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad." + "\n";
                            }
                            else if (calificacion == "SilencioPositivo")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada." + "\n";
                            }
                            else if (calificacion == "SilencioNegativo")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos." + "\n";
                            }
                        }

                    }
                    else
                    {
                        if (calificacion == "Automatica")
                        {
                            calProcedimiento = "Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad.";
                        }
                        else if (calificacion == "SilencioPositivo")
                        {
                            calProcedimiento = "Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada.";
                        }
                        else if (calificacion == "SilencioNegativo")
                        {
                            calProcedimiento = "Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos.";
                        }
                    }

                    //}
                    //else
                    //{
                    //    if (calificacion == "Automatica")
                    //    {
                    //        calProcedimiento = "Aprobación automática: El procedimiento se da por aprobado a la sola presentación de todos los documentos";
                    //    }
                    //    else if (calificacion == "SilencioPositivo")
                    //    {
                    //        calProcedimiento = "Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, su solicitud ha sido aprobada.";
                    //    }
                    //    else if (calificacion == "SilencioNegativo")
                    //    {
                    //        calProcedimiento = "Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta puede interponer los recursos administrativos.";
                    //    }

                    //}




                    string plazos = "";
                    string tplazo = "";
                    List<PlazoAtencion> lstplazo = _plazoAtencionService.GetAll(proc.ProcedimientoId);

                    if (proc.TipoPlazo == TipoPlazo.calendarios || proc.TipoPlazo == TipoPlazo.habiles)
                    {
                        if (proc.TipoPlazo == TipoPlazo.habiles)
                        {
                            tplazo = " días hábiles";
                        }
                        else
                        {
                            tplazo = " días " + proc.TipoPlazo;
                        }
                    }
                    else
                    {
                        tplazo = " " + proc.TipoPlazo;
                    }
                    if (lstplazo.Count() != 0)
                    {
                        plazos = proc.PlazoAtencionDes + ": " + proc.PlazoAtencion + " " + tplazo + "\n";
                        foreach (var lstplazos in lstplazo)
                        {
                            if (lstplazos.TipoPlazo == TipoPlazo.calendarios || lstplazos.TipoPlazo == TipoPlazo.habiles)
                            {
                                if (proc.TipoPlazo == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + lstplazos.TipoPlazo;
                                }

                            }
                            else
                            {
                                tplazo = " " + lstplazos.TipoPlazo;
                            }
                            plazos = plazos + " " + lstplazos.Descripcion + ": " + lstplazos.Plazo + tplazo + "\n";

                        }
                    }
                    else
                    {
                        plazos = proc.PlazoAtencion + tplazo;
                    }


                    RoundRectangle4 rr4 = new RoundRectangle4();
                    RoundRectangle5 rr5 = new RoundRectangle5();
                    PdfPTable table3 = new PdfPTable(2);
                    table3.TotalWidth = 480f;
                    table3.LockedWidth = true;
                    table3.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    float[] values1 = new float[2];
                    values1[0] = 60;
                    values1[1] = 240;
                    table3.SetWidths(values1);

                    if (proc.PlazoAtencion != 0)
                    {

                        PdfPCell cell3 = new PdfPCell()
                        {
                            CellEvent = rr4,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, plazos, f),

                        };
                        table3.AddCell(cell3);
                    }
                    else
                    {

                        PdfPCell cell3 = new PdfPCell()
                        {
                            CellEvent = rr4,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, "", f),

                        };
                        table3.AddCell(cell3);
                    }


                    PdfPCell cell24 = new PdfPCell()
                    {
                        CellEvent = rr5,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, calProcedimiento, f),
                    };
                    table3.AddCell(cell24);
                    Doc.Add(table3);


                    //inicio
                    Table tdatos11 = new Table(2);
                    int[] widths11 = new int[2];
                    widths11[0] = 2;
                    widths11[1] = 100;
                    tdatos11.SetWidths(widths11);

                    tdatos11.WidthPercentage = 100;
                    tdatos11.Border = 0;
                    tdatos11.BorderWidth = 0;
                    tdatos11.Padding = 2;
                    tdatos11.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos11.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Sedes y horarios de atención", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);

                    Doc.Add(tdatos11);

                    //string sedehora = "";
                    //foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                    //{
                    //    var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                    //   string.Format("Lunes a Viernes de {0} a {1}. ",
                    //           item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                    //   : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                    //           item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                    //           item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                    //           item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                    //           item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                    //           )
                    //           : "") +
                    //        (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                    //           item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                    //           : "") +
                    //            (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                    //           item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                    //           : "");

                    //    if (sedehora == "")
                    //    {
                    //        sedehora = item.Sede.Nombre + ": " + horario;
                    //    }
                    //    else
                    //    {
                    //        sedehora = sedehora + "\n" + item.Sede.Nombre + ": " + horario;
                    //    }

                    //}


                    //PdfPTable tablesedes = new PdfPTable(1);
                    //tablesedes.TotalWidth = 480f;
                    //tablesedes.LockedWidth = true;
                    //tablesedes.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    //PdfPCell cellsedes = new PdfPCell()
                    //{
                    //    CellEvent = rr,
                    //    Padding = 10,
                    //    BorderWidth = 0,
                    //    Phrase = new Phrase(0, sedehora, f),
                    //};

                    //tablesedes.AddCell(cellsedes);
                    //Doc.Add(tablesedes);

                    PdfPCell celdasede;
                    PdfPCell celdapdf;
                    IPdfPCellEvent roundRectangleh = new RoundedBorder85();
                    PdfPTable outertableh = new PdfPTable(1);

                    outertableh.WidthPercentage = 100;

                    PdfPTable tdatossedes = new PdfPTable(2);
                    int[] widthssedes = new int[2];
                    widthssedes[0] = 60;
                    widthssedes[1] = 100;
                    tdatossedes.SetWidths(widthssedes);

                    tdatossedes.WidthPercentage = 100;
                    //tdatossedes.Border = 0;
                    //tdatossedes.BorderWidth = 0;
                    //tdatossedes.Padding = 2;
                    tdatossedes.HorizontalAlignment = Element.ALIGN_LEFT;


                    foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                    {
                        var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                       string.Format("Lunes a Viernes de {0} a {1}. ",
                               item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                               item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                       : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                               item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                               item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                               item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                               item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                               )
                               : (item.Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                            (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                               item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                               item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                               : "") +
                                (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                               item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                               item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                               : "");


                        celdasede = new PdfPCell();
                        celdasede.Border = PdfPCell.NO_BORDER;
                        //celdasede.Leading = 10; 
                        celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celdasede.AddElement(fnChunk(item.Sede.Nombre, (int)Fuente.FuenteLetraNormal));
                        tdatossedes.AddCell(celdasede);

                        celdasede = new PdfPCell();
                        celdasede.Border = PdfPCell.NO_BORDER;
                        //celda.Leading = 10; 
                        celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celdasede.AddElement(fnChunk(horario, (int)Fuente.FuenteLetraNormal));
                        tdatossedes.AddCell(celdasede);

                    }

                    celdapdf = new PdfPCell(tdatossedes);
                    celdapdf.CellEvent = roundRectangleh;
                    celdapdf.Border = PdfPCell.NO_BORDER;
                    celdapdf.Padding = 8;

                    outertableh.AddCell(celdapdf);
                    Doc.Add(outertableh);


                    //inicio
                    Table tdatos12 = new Table(2);
                    int[] widths12 = new int[2];
                    widths12[0] = 2;
                    widths12[1] = 100;
                    tdatos12.SetWidths(widths12);

                    tdatos12.WidthPercentage = 100;
                    tdatos12.Border = 0;
                    tdatos12.BorderWidth = 0;
                    tdatos12.Padding = 2;
                    tdatos12.DefaultHorizontalAlignment = Element.ALIGN_LEFT;



                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos12.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Unidad de organización donde se presenta la documentación", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);

                    Doc.Add(tdatos12);

                    string unidad = "";

                    List<UndOrgRecepcionDocumentos> nuevo;
                    var variable = dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId).ToList();

                    if (variable.Count == 0)
                    {
                        unidad = "";
                    }
                    else
                    {
                        if (variable.Count == 1)
                        {
                            nuevo = variable[0].UndOrgRecepcionDocumentos;
                        }
                        else
                        {
                            if (variable.Count <= sededat)
                            {
                                unidad = "";
                            }
                            else { nuevo = variable[sededat].UndOrgRecepcionDocumentos; }
                        }

                        int sededat3 = 0;
                        int sededat4 = 0;
                        List<int> oficinas = new List<int>();
                        List<long> idoficinas = new List<long>();
                        List<string> idsede = new List<string>();
                        MetaDato ofi = new MetaDato();
                        foreach (var item2 in variable)
                        {
                            var nuevo2 = variable[sededat3].UndOrgRecepcionDocumentos;
                            foreach (var item in nuevo2)
                            {
                                oficinas.Add(Convert.ToInt16(item.SedeId));
                                idoficinas.Add(item.UnidadOrganicaId);

                                if (item.UnidadOrganica == null)
                                {
                                    idsede.Add("No existe dentro de la sede: " + item.Sede.Nombre.ToString() + " Revisar");
                                }
                                else
                                {
                                    idsede.Add(item.UnidadOrganica.Nombre);
                                }
                                //idsede.Add(item.UnidadOrganica.Nombre);

                                String ver = proc.ProcedimientoId.ToString();
                            }

                            sededat3 = sededat3++;

                        }

                        string nom = string.Empty;
                        int valor = 0;
                        int idvalor = 0;
                        string nomb = "";
                        foreach (var item in idoficinas.Distinct())
                        {
                            valor = 0;
                            string sedes = "";
                            foreach (var item2 in variable)
                            {
                                int con = item2.UndOrgRecepcionDocumentos.Count();
                                for (int i = 0; i < con; i++)
                                {
                                    if (item == item2.UndOrgRecepcionDocumentos[i].UnidadOrganicaId)
                                    {

                                        sedes = sedes + ", " + item2.Sede.Nombre;
                                        valor = valor++;

                                        if (item2.UndOrgRecepcionDocumentos[i].UnidadOrganica == null)
                                        {

                                            nomb = "No existe dentro de la Und Org Recepcion Documentos:  Revisar";
                                        }
                                        else
                                        {
                                            nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                        }

                                        //nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                    }
                                }
                            }

                            //if (valor == variable.Count())
                            //{ 
                            //    nom = nomb + " : Todas las Sedes";

                            //    if (unidad == "")
                            //    {
                            //        unidad = nom;
                            //    }
                            //    else
                            //    {
                            //        unidad = unidad + "\n" + nom;
                            //    }

                            //}
                            //else
                            //{
                            int asd = sedes.Length;
                            nom = nomb + " : " + sedes.Substring(1, asd - 1);

                            if (unidad == "")
                            {
                                unidad = nom;
                            }
                            else
                            {
                                unidad = unidad + "\n" + nom;
                            }
                            //}
                            idvalor = valor++;
                            sededat4 = sededat4++;
                        }
                    }


                    PdfPTable tableunidad = new PdfPTable(1);
                    tableunidad.TotalWidth = 480f;
                    tableunidad.LockedWidth = true;
                    tableunidad.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                    PdfPCell cellunidad = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, unidad, f),
                    };

                    tableunidad.AddCell(cellunidad);
                    Doc.Add(tableunidad);


                    sededat = sededat++;

                    //inicio
                    Table tdatos13 = new Table(5);
                    int[] widths13 = new int[5];
                    widths13[0] = 2;
                    widths13[1] = 50;
                    widths13[2] = 5;
                    widths13[3] = 2;
                    widths13[4] = 50;
                    tdatos13.SetWidths(widths13);

                    tdatos13.WidthPercentage = 100;
                    tdatos13.Border = 0;
                    tdatos13.BorderWidth = 0;
                    tdatos13.Padding = 2;
                    tdatos13.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Unidad de organización responsable de aprobar la solicitud", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Consulta sobre el procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    Doc.Add(tdatos13);

                    PdfPTable table4 = new PdfPTable(2);
                    table4.TotalWidth = 480f;
                    table4.LockedWidth = true;
                    table4.HorizontalAlignment = Element.ALIGN_LEFT;
                    float[] values4 = new float[2];
                    values4[0] = 105;
                    values4[1] = 90;
                    table4.SetWidths(values4);



                    if (proc.UndOrgResponsable != null)
                    {

                        string UndOrgResponsable;

                        UndOrgResponsable = proc.UndOrgResponsable.Nombre;

                        List<ProcedimientoUndOrgResponsable> ProcedimientoUndOrgResponsable = _ProcedimientoUndOrgResponsableService.GetAll(proc.ProcedimientoId);

                        if (ProcedimientoUndOrgResponsable.Count() != 0)
                        {
                            foreach (ProcedimientoUndOrgResponsable rec in ProcedimientoUndOrgResponsable)
                            {
                                UndOrgResponsable = UndOrgResponsable + "\n" + _unidadOrganicaService.GetOne(rec.UndOrgResponsableId2).Nombre;
                            }

                        }


                        PdfPCell cell12 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_LEFT,
                            Phrase = new Phrase(0, UndOrgResponsable, f),

                        };
                        table4.AddCell(cell12);
                    }
                    else
                    {

                        PdfPCell cell12 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_LEFT,
                            Phrase = new Phrase(0, "", f),

                        };
                        table4.AddCell(cell12);
                    }



                    PdfPCell cell25 = new PdfPCell()
                    {
                        CellEvent = rr3,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_LEFT,
                        Phrase = new Phrase(0, "Teléfono: " + proc.Telefono + "\n" + "Anexo: " + proc.Anexo + "\n" + "Correo: " + proc.Correo, f),
                    };
                    table4.AddCell(cell25);
                    Doc.Add(table4);


                    //inicio
                    Table tdatos14 = new Table(2);
                    int[] widths14 = new int[2];
                    widths14[0] = 2;
                    widths14[1] = 100;
                    tdatos14.SetWidths(widths14);

                    tdatos14.WidthPercentage = 100;
                    tdatos14.Border = 0;
                    tdatos14.BorderWidth = 0;
                    tdatos14.Padding = 2;
                    tdatos14.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);

                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);


                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);

                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos14.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Instancias de resolución de recursos", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);

                    Doc.Add(tdatos14);

                    Table tdatos15 = new Table(20);
                    int[] widths15 = new int[20];
                    widths15[0] = 30;
                    widths15[1] = 100;
                    widths15[2] = 100;
                    widths15[3] = 100;
                    widths15[4] = 100;
                    widths15[5] = 100;
                    widths15[6] = 100;
                    widths15[7] = 100;
                    widths15[8] = 100;
                    widths15[9] = 100;
                    widths15[10] = 100;
                    widths15[11] = 100;
                    widths15[12] = 100;
                    widths15[13] = 100;
                    widths15[14] = 100;
                    widths15[15] = 100;
                    widths15[16] = 100;
                    widths15[17] = 100;
                    widths15[18] = 100;
                    widths15[19] = 100;
                    tdatos15.SetWidths(widths15);

                    tdatos15.WidthPercentage = 100;
                    tdatos15.Border = 0;
                    tdatos15.BorderWidth = 0;
                    tdatos15.Padding = 2;
                    tdatos15.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos15.AddCell(celda);



                    if (proc.revision == 1)
                    {
                        //*****************************///
                        if (proc.reclamacion == 1)
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 5;
                            celda.Add(fnChunk("Reclamación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }
                        else
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 5;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }


                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                        //**********************************//

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        celda.Add(fnChunk("Revisión", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        //*****************************///
                        if (proc.reclamacion == 1)
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reclamación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }
                        else
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }


                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                        //**********************************//

                    }

                    celda = new Cell();
                    //celda.BorderWidthRight = 1f;
                    //celda.BorderWidthBottom = 1f;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Autoridad competente", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);

                    //var autoridad2 = "";
                    var autoridad = "";
                    var PzoReconPresent = "";
                    var PzoApelPresent = "";
                    var PzoOtrosPresent = "";

                    var PzoReconResol = "";
                    var PzoApelResol = "";
                    var PzoOtrosResol = "";


                    var cargo = "";
                    var cargootros = "";
                    var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                    if (proc.CargoReconsideracion != null)
                    {
                        if (proc.UndOrgReconsideracion == null)
                        {
                            autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion;
                        }
                        else
                        {
                            if (proc.UndOrgReconsideracion != null)
                            {
                                autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion + " - " + proc.UndOrgReconsideracion.Nombre;

                                if (reconideracion != null)
                                {
                                    //char c1 = 'A';
                                    foreach (ProcedimientoCargos rec in reconideracion)
                                    {

                                        //c1++;


                                        autoridad = autoridad + '\n' + rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;



                                        if (rec.PzoPresent != 0)
                                        {
                                            var mese = "";
                                            if (rec.TipoReconPresent == TipoPlazo.calendarios || rec.TipoReconPresent == TipoPlazo.habiles)
                                            {
                                                if (rec.TipoReconPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + rec.TipoReconPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + rec.TipoReconPresent.ToString();
                                            }

                                            PzoReconPresent = PzoReconPresent + '\n' + rec.PzoPresent + mese;
                                        }

                                        if (rec.PzoResol != 0)
                                        {
                                            var mese = "";
                                            if (rec.TipoReconResol == TipoPlazo.calendarios || rec.TipoReconResol == TipoPlazo.habiles)
                                            {
                                                if (rec.TipoReconResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + rec.TipoReconResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + rec.TipoReconResol.ToString();
                                            }
                                            PzoReconResol = PzoReconResol + '\n' + rec.PzoResol + mese;
                                        }

                                    }
                                }


                            }
                            else
                            {
                                autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion + " - " + "";
                            }
                        }


                    }



                    //else {
                    //    autoridad = "No Corresponde";
                    //}
                    var apelacion = _procedimientoCargosApeService.GetOnelista(proc.ProcedimientoId);

                    if (proc.CargoApelacion != null)
                    {
                        if (proc.UndOrgApelacion == null)
                        {
                            cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion;
                        }
                        else
                        {
                            if (proc.UndOrgApelacion != null)
                            {
                                cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion + " - " + proc.UndOrgApelacion.Nombre;

                                if (apelacion != null)
                                {

                                    foreach (ProcedimientoCargosApe ape in apelacion)
                                    {


                                        cargo = cargo + '\n' + ape.CargoApe + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdApe).Nombre;


                                        if (ape.PzoPresentApe != 0)
                                        {

                                            var mese = "";
                                            if (ape.TipoApelPresent == TipoPlazo.calendarios || ape.TipoApelPresent == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoApelPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoApelPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoApelPresent.ToString();
                                            }

                                            PzoApelPresent = PzoApelPresent + '\n' + ape.PzoPresentApe + mese;
                                        }

                                        if (ape.PzoResolApe != 0)
                                        {
                                            var mese = "";
                                            if (ape.TipoApelResol == TipoPlazo.calendarios || ape.TipoApelResol == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoApelResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoApelResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoApelResol.ToString();
                                            }
                                            PzoApelResol = PzoApelResol + '\n' + ape.PzoResolApe + mese;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion + " - " + "";
                            }

                        }
                    }
                    /******************************************************************/

                    //var Otros = _procedimientoCargosApeService.GetOnelista(proc.ProcedimientoId);

                    var Otros = _procedimientoCargosOtrosService.GetOnelista(proc.ProcedimientoId);

                    if (proc.CargoOtros != null)
                    {
                        if (proc.UndOrgOtros == null)
                        {
                            cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros;
                        }
                        else
                        {
                            if (proc.UndOrgOtros != null)
                            {
                                cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros + " - " + proc.UndOrgOtros.Nombre;

                                if (apelacion != null)
                                {

                                    foreach (ProcedimientoCargosOtros ape in Otros)
                                    {


                                        cargootros = cargootros + '\n' + ape.CargoOtros + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdOtros).Nombre;


                                        if (ape.PzoPresentOtros != 0)
                                        {

                                            var mese = "";
                                            if (ape.TipoOtrosPresent == TipoPlazo.calendarios || ape.TipoOtrosPresent == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoOtrosPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoOtrosPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoOtrosPresent.ToString();
                                            }

                                            PzoOtrosPresent = PzoOtrosPresent + '\n' + ape.PzoPresentOtros + mese;
                                        }

                                        if (ape.PzoResolOtros != 0)
                                        {
                                            var mese = "";
                                            if (ape.TipoOtrosResol == TipoPlazo.calendarios || ape.TipoOtrosResol == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoOtrosResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoOtrosResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoOtrosResol.ToString();
                                            }
                                            PzoOtrosResol = PzoOtrosResol + '\n' + ape.PzoResolOtros + mese;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros + " - " + "";
                            }

                        }
                    }
                    /**********************************************************************/



                    if (proc.revision == 1)
                    {

                        //**************************************/////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk(autoridad.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk(cargo.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        //**************************************/////


                        celda = new Cell();
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        celda.Add(fnChunk(cargootros.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        //**************************************/////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk(autoridad.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk(cargo.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        //**************************************/////
                    }


                    celda = new Cell();
                    //celda.BorderWidthRight = 1f;
                    //celda.BorderWidthBottom = 1f;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Plazo máximo de presentación", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);



                    if (proc.revision == 1)
                    {


                        ////////////**************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoReconPresent == TipoPlazo.calendarios || proc.TipoReconPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconPresent.ToString();
                        }
                        if (proc.PzoReconPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconPresent + tplazo + '\n' + PzoReconPresent, (int)Fuente.FuenteLetraNormal));
                        }
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;

                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoApelPresent == TipoPlazo.calendarios || proc.TipoApelPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelPresent.ToString();
                        }

                        if (proc.PzoApelPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelPresent + tplazo + '\n' + PzoApelPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        ////////////**************************************////


                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        if (proc.TipoOtrosPresent == TipoPlazo.calendarios || proc.TipoOtrosPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoOtrosPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoOtrosPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoOtrosPresent.ToString();
                        }

                        if (proc.PzoPresentOtros == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoPresentOtros + tplazo + '\n' + PzoOtrosPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);
                    }
                    else
                    {

                        ////////////**************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoReconPresent == TipoPlazo.calendarios || proc.TipoReconPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconPresent.ToString();
                        }
                        if (proc.PzoReconPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconPresent + tplazo + '\n' + PzoReconPresent, (int)Fuente.FuenteLetraNormal));
                        }
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoApelPresent == TipoPlazo.calendarios || proc.TipoApelPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelPresent.ToString();
                        }

                        if (proc.PzoApelPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelPresent + tplazo + '\n' + PzoApelPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        ////////////**************************************////

                    }


                    celda = new Cell();
                    //celda.BorderWidthRight = 1f; 
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Plazo máximo de respuesta", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);


                    if (proc.revision == 1)
                    {


                        //*******************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoReconResol == TipoPlazo.calendarios || proc.TipoReconResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconResol.ToString();
                        }

                        if (proc.PzoReconResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconResol + tplazo + '\n' + PzoReconResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoApelResol == TipoPlazo.calendarios || proc.TipoApelResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelResol.ToString();
                        }

                        if (proc.PzoApelResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelResol + tplazo + '\n' + PzoApelResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        //**********************************////

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        if (proc.TipoOtrosResol == TipoPlazo.calendarios || proc.TipoOtrosResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoOtrosResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoOtrosResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoOtrosResol.ToString();
                        }

                        if (proc.PzoResolOtros == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoResolOtros + tplazo + '\n' + PzoOtrosResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);
                    }
                    else
                    {


                        //*******************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoReconResol == TipoPlazo.calendarios || proc.TipoReconResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconResol.ToString();
                        }

                        if (proc.PzoReconResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconResol + tplazo + '\n' + PzoReconResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoApelResol == TipoPlazo.calendarios || proc.TipoApelResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelResol.ToString();
                        }

                        if (proc.PzoApelResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelResol + tplazo + '\n' + PzoApelResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        //**********************************////
                    }


                    /*Inicio Multiple*/
                    /*

                    var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                    if (reconideracion != null)
                    { 
                        foreach (ProcedimientoCargos rec in reconideracion)
                            {
 
                                //Doc.Add(tdatos15);


                            tdatos15.WidthPercentage = 100;
                            tdatos15.Border = 0;
                            tdatos15.BorderWidth = 0;
                            tdatos15.Padding = 2;
                            tdatos15.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Autoridad competente", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            //var autoridad2 = "";
                            //var autoridad = "";
                            //var PzoReconPresent = "";
                            //var PzoApelPresent = "";

                            //var PzoReconResol = "";
                            //var PzoApelResol = "";



                            //var cargo = "";
                            //var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                            if (rec.Cargo != null)
                            {
                                if (rec.UndOrgId == 0)
                                {
                                    autoridad = rec.Cargo == null ? "" : rec.Cargo;
                                }
                                else
                                {
                                    if (rec.UndOrgId != 0)
                                    {
                                        autoridad = rec.Cargo == null ? "" : rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;

                                        //if (reconideracion!=null) {
                                        //    char c1 = 'A';
                                        //    foreach (ProcedimientoCargos rec in reconideracion)
                                        //    {

                                        //        c1++;
                                        //        autoridad = autoridad + '\n' + c1 + "- "+ rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;

                                        //        PzoReconPresent=  PzoReconPresent + '\n' + c1 + "- " + rec.PzoPresent + " días hábiles.";
                                        //        PzoReconResol = PzoReconResol + '\n' + c1 + "- " + rec.PzoResol + " días hábiles.";
                                        //    }
                                        //} 

                                    }
                                    else
                                    {
                                        autoridad = rec.Cargo == null ? "" : rec.Cargo + " - " + "";
                                    }
                                }


                            }



                            //else {
                            //    autoridad = "No Corresponde";
                            //}
                            var apelacion = _procedimientoCargosApeService.LsitaGetOneorden(proc.ProcedimientoId,rec.orden);

                            if (apelacion.CargoApe != null)
                            {
                                if (apelacion.UndOrgIdApe == 0)
                                {
                                    cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe;
                                }
                                else
                                {
                                    if (apelacion.UndOrgIdApe != 0)
                                    {
                                        cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe + " - " + _unidadOrganicaService.GetOne(apelacion.UndOrgIdApe).Nombre;

                                        //if (apelacion != null)
                                        //{
                                        //    char c1 = 'A';
                                        //    foreach (ProcedimientoCargosApe ape in apelacion)
                                        //    {

                                        //        c1++;
                                        //        cargo = cargo + '\n' + c1 + "- " + ape.CargoApe + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdApe).Nombre;

                                        //        PzoApelPresent = PzoApelPresent + '\n' + c1 + "- " + ape.PzoPresentApe + " días hábiles.";
                                        //        PzoApelResol = PzoApelResol + '\n' + c1 + "- " + ape.PzoResolApe + " días hábiles.";
                                        //    }
                                        //}
                                    }
                                    else
                                    {
                                        cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe + " - " + "";
                                    }

                                }
                            }


                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk(autoridad, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk(cargo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Plazo máximo de presentación", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);



                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            if (rec.TipoReconPresent == TipoPlazo.calendarios || rec.TipoReconPresent == TipoPlazo.habiles)
                            {
                                if (rec.TipoReconPresent == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoReconPresent;
                                }
                            }
                            else
                            {
                                tplazo = " " + rec.TipoReconPresent.ToString(); 
                            }

                            celda.Add(fnChunk(rec.PzoPresent + " "+ tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (apelacion.TipoApelPresent == TipoPlazo.calendarios || apelacion.TipoApelPresent == TipoPlazo.habiles)
                            {
                                if (apelacion.TipoApelPresent == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoApelPresent;
                                }
                            }
                            else
                            {
                                tplazo = " " + apelacion.TipoApelPresent.ToString();
                            }
                            celda.Add(fnChunk(apelacion.PzoPresentApe + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Plazo máximo de respuesta", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);


                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (rec.TipoReconResol == TipoPlazo.calendarios || rec.TipoReconResol == TipoPlazo.habiles)
                            {
                                if (rec.TipoReconResol == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + rec.TipoReconResol;
                                }
                            }
                            else
                            {
                                tplazo = " " + rec.TipoReconResol.ToString();
                            }

                            celda.Add(fnChunk(rec.PzoResol + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (apelacion.TipoApelResol == TipoPlazo.calendarios || apelacion.TipoApelResol == TipoPlazo.habiles)
                            {
                                if (apelacion.TipoApelResol == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoApelResol;
                                }
                            }
                            else
                            {
                                tplazo = " " + apelacion.TipoApelResol.ToString();
                            }
                            celda.Add(fnChunk(apelacion.PzoResolApe + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            }
                    }
                    /*Fin Multiple*/


                    if (proc.TipoProcedimiento == TipoProcedimiento.Estandar)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoReconsideracion != null && proc.CargoApelacion == null && proc.sinnotas == 0)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de reconsideración se interpondrá ante el mismo órgano que dictó el primer acto que es materia de la impugnación y deberá sustentarse en nueva prueba", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoApelacion != null && proc.CargoReconsideracion == null)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de apelación se interpondrá cuando la impugnación se sustente en diferente interpretación de las pruebas producidas o cuando se trate de cuestiones de puro derecho, debiendo dirigirse a la misma autoridad que expidió el acto que se impugna para que eleve lo actuado al superior jerárquico.", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoApelacion != null && proc.CargoReconsideracion != null)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de reconsideración se interpondrá ante el mismo órgano que dictó el primer acto que es materia de la impugnación y deberá sustentarse en nueva prueba.\nEl recurso de apelación se interpondrá cuando la impugnación se sustente en diferente interpretación de las pruebas producidas o cuando se trate de cuestiones de puro derecho, debiendo dirigirse a la misma autoridad que expidió el acto que se impugna para que eleve lo actuado al superior jerárquico.", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }



                    Doc.Add(tdatos15);

                    //inicio
                    Table tdatos16 = new Table(2);
                    int[] widths16 = new int[2];
                    widths16[0] = 2;
                    widths16[1] = 100;
                    tdatos16.SetWidths(widths16);

                    tdatos16.WidthPercentage = 100;
                    tdatos16.Border = 0;
                    tdatos16.BorderWidth = 0;
                    tdatos16.Padding = 2;
                    tdatos16.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos16.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Base legal", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);

                    Doc.Add(tdatos16);

                    Table tdatos4 = new Table(20);
                    int[] widths = new int[20];
                    widths[0] = 30;
                    widths[1] = 100;
                    widths[2] = 100;
                    widths[3] = 100;
                    widths[4] = 100;
                    widths[5] = 100;
                    widths[6] = 100;
                    widths[7] = 100;
                    widths[8] = 100;
                    widths[9] = 100;
                    widths[10] = 100;
                    widths[11] = 100;
                    widths[12] = 100;
                    widths[13] = 100;
                    widths[14] = 100;
                    widths[15] = 100;
                    widths[16] = 100;
                    widths[17] = 100;
                    widths[18] = 100;
                    widths[19] = 100;
                    tdatos4.SetWidths(widths);

                    tdatos4.WidthPercentage = 100;
                    tdatos4.Border = 0;
                    tdatos4.BorderWidth = 0;
                    tdatos4.Padding = 2;
                    tdatos4.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Artículo", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 8;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 3;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Tipo", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 3;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Número", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 2;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Fecha Publicación", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);


                    int sedebase = 0;
                    for (int iii = 0; iii < dataBaseLegal.Count(); iii++)
                    {
                        if (dataBaseLegal[iii].BaseLegalId == proc.BaseLegalId)
                        {

                            var descripcionACR = "";
                            var nomsede = "";
                            var dessede = "";
                            var numsede = "";
                            var articulosede = "";
                            var fechasede = "";
                            var valornom = dataBaseLegal.Count();
                            var valornom2 = iii;

                            if (valornom != 0)
                            {
                                if (ProcedimientoIds[0] == 0)
                                {
                                    if (valornom != 1 && valornom2 != 1)
                                    {


                                        if (dataBaseLegal[iii].EstadoACR == "2")
                                        {
                                            descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                        }
                                        else
                                        {
                                            if (dataBaseLegal.Count <= iii)
                                            {
                                                nomsede = "";
                                                dessede = "";
                                                numsede = "";
                                                articulosede = "";
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                                dessede = dataBaseLegal[iii].Descripcion;
                                                numsede = dataBaseLegal[iii].Numero;
                                                articulosede = dataBaseLegal[iii].Articulo;
                                                if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                                {
                                                    fechasede = "";
                                                }
                                                else
                                                {
                                                    fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                                }


                                            }
                                        }
                                    }
                                    else
                                    {
                                        nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                        dessede = dataBaseLegal[iii].Descripcion;
                                        numsede = dataBaseLegal[iii].Numero;
                                        articulosede = dataBaseLegal[iii].Articulo;
                                        if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                        {
                                            fechasede = "";
                                        }
                                        else
                                        {
                                            fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                        }

                                    }

                                }
                                else
                                {

                                    if (dataBaseLegal[iii].EstadoACR == "2")
                                    {
                                        descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                    }
                                    else
                                    {
                                        nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                        dessede = dataBaseLegal[iii].Descripcion;
                                        numsede = dataBaseLegal[iii].Numero;
                                        articulosede = dataBaseLegal[iii].Articulo;
                                        if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                        {
                                            fechasede = "";
                                        }
                                        else
                                        {
                                            fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                        }
                                    }


                                }
                            }

                            if (valornom != 0)
                            {
                                if (dataBaseLegal[iii].EstadoACR == "2")
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 20;
                                    celda.Add(fnChunk(descripcionACR, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }
                                else
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 4;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 8;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 2;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }

                            }
                            else
                            {
                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 4;
                                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 8;
                                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 3;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 3;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                            }
                        }

                        sedebase = sedebase++;

                    }
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();
                    Doc.Add(tdatos4);

                    // los costados, ancho, alto, curva
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();



                    Doc.Close();
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();



                    rutpag = @pathdocumentos + "Archivo" + ExpedienteId + "_P" + contpag + ".pdf";
                    Rdpag = new PdfReader(rutpag);
                    npag = Rdpag.NumberOfPages;

                    contpag = contpag++;
                    //Doc.NewPage();
                    pagcabhoja = pagcabhoja + npag;


                }

            }
            //fin grupo




        }
        private void GenerarProceAdmCompletoDiario(long ExpedienteId, List<long> ProcedimientoIds, PdfWriter writer)
        {



            var rutpag = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloProce.pdf";
            PdfReader Rdpag = new PdfReader(rutpag);
            var npag = Rdpag.NumberOfPages;
            pagcabhoja = pagcabhoja + npag;


            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);


            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3).OrderBy(x => x.RecNum);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);



            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);



            //deta grupo
            //generacion de los reportes formato tupa por procedimento
            List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
            if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
            //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
            int sededat = 0;

            int contpag = 0;
            MemoryStream stream = new MemoryStream();
            foreach (Procedimiento proc in dataProc)
            {
                proc.TablaAsme = proc.TablaAsme.OrderBy(x => x.TablaAsmeId).ToList();
                //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                //cb.Stroke();
                string tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                if (tipo == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)
                {


                    Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
                    PdfWriter writer1 = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_P" + contpag + ".pdf", FileMode.Create));
                    //PdfContentByte cb = writer.DirectContent;

                    //AdicionarCabecera(Doc, ExpedienteId);

                    //Phrase obje = new Phrase(fnChunk("", (int)Fuente.FuenteCabFooter));
                    //HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                    //footer.Border = 0;
                    ////footer.BorderWidthTop = 1;
                    //footer.Alignment = Element.ALIGN_RIGHT;
                    //Doc.Footer = footer;

                    string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

                    Table tcab = new Table(1);
                    Cell celda;

                    tcab.WidthPercentage = 100;
                    tcab.Border = 0;
                    tcab.BorderWidth = 0;
                    tcab.Padding = 2;
                    tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;
                    tcab.DefaultVerticalAlignment = Element.ALIGN_MIDDLE;

                    //inicio
                    Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                    Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                    Phrase p1 = new Phrase(chkHeader);
                    HeaderFooter footer = new HeaderFooter(p1, false);
                    footer.Border = Rectangle.NO_BORDER;
                    footer.Alignment = Element.ALIGN_CENTER;
                    footer.BorderColor = new Color(242, 242, 242);
                    footer.BackgroundColor = new Color(242, 242, 242);
                    Doc.Header = footer;
                    //fin

                    //cuadro total de la hoaj
                    RoundRectangle rr = new RoundRectangle();

                    for (int i = 0; i < pagcabhoja; i++)
                    {
                        Doc.Open();
                    }

                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderColor = new Color(242, 242, 242);
                    //celda.BackgroundColor = new Color(242, 242, 242);
                    //celda.Leading = 10;
                    //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
                    //tcab.AddCell(celda);
                    //Doc.Add(tcab);


                    //--- NoSe,nose, ancho,alto
                    PdfContentByte cb = writer1.DirectContent;
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    //Doc.Open();

                    Table tdatos41 = new Table(20);
                    int[] widths1 = new int[20];
                    widths1[0] = 30;
                    widths1[1] = 100;
                    widths1[2] = 100;
                    widths1[3] = 100;
                    widths1[4] = 100;
                    widths1[5] = 100;
                    widths1[6] = 100;
                    widths1[7] = 100;
                    widths1[8] = 100;
                    widths1[9] = 100;
                    widths1[10] = 100;
                    widths1[11] = 100;
                    widths1[12] = 100;
                    widths1[13] = 100;
                    widths1[14] = 100;
                    widths1[15] = 100;
                    widths1[16] = 100;
                    widths1[17] = 100;
                    widths1[18] = 100;
                    widths1[19] = 100;
                    tdatos41.SetWidths(widths1);

                    var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);

                    tdatos41.WidthPercentage = 100;
                    tdatos41.Border = 0;
                    tdatos41.BorderWidth = 0;
                    tdatos41.Padding = 2;
                    tdatos41.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Colspan = 8;
                    celda.Add(fnChunk("Denominación del Procedimiento Administrativo", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 12;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("\"" + proc.Denominacion + "\"", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    if (proc.CodigoCorto != null)
                    {
                        celda.Add(fnChunk("Código: " + proc.CodigoCorto.ToUpper(), (int)Fuente.FuenteNegrita));
                    }
                    else
                    {
                        celda.Add(fnChunk("Código: ", (int)Fuente.FuenteNegrita));
                    }

                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos41.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 19;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Descripción del procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 20;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos41.AddCell(celda);

                    var reno = "";
                    celda.BorderColor = Color.BLACK;
                    if (proc.Renovacio.ToString() == "Si")
                    {
                        var mes = "";
                        if (proc.Plazorenovacion.ToString() == "mes1") { mes = "1 mes"; }
                        else if (proc.Plazorenovacion.ToString() == "mes2") { mes = "2 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes3") { mes = "3 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes4") { mes = "4 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes5") { mes = "5 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes6") { mes = "6 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes7") { mes = "7 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes8") { mes = "8 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes9") { mes = "9 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes10") { mes = "10 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "mes11") { mes = "11 meses"; }
                        else if (proc.Plazorenovacion.ToString() == "anio1") { mes = "1 año"; }
                        else if (proc.Plazorenovacion.ToString() == "anio2") { mes = "2 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio3") { mes = "3 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio4") { mes = "4 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio5") { mes = "5 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio6") { mes = "6 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio7") { mes = "7 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio8") { mes = "8 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio9") { mes = "9 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio10") { mes = "10 años"; }
                        else if (proc.Plazorenovacion.ToString() == "anio20") { mes = "20 años"; }
                        else
                        {
                            mes = proc.Plazorenovacion.ToString();
                        }

                        reno = "\n Renovación : " + mes;

                    }


                    Doc.Add(tdatos41);

                    PdfPTable table = new PdfPTable(1);
                    //table.SpacingBefore = 65f;
                    //table.SpacingAfter = 65f;
                    table.TotalWidth = 480f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = Element.ALIGN_JUSTIFIED;


                    string ARIALUNI_TFF = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "Arial.TTF");

                    BaseFont bf = BaseFont.CreateFont(ARIALUNI_TFF, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);

                    Font f = new Font(bf, 7, Font.NORMAL);
                    Font centrar = new Font(bf, 7, Font.BOLD);
                    Font fontsNegrita = FontFactory.GetFont("Arial", 7, Font.BOLD);

                    PdfPCell cell2 = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, proc.Objetivo + reno, f),
                    };

                    table.AddCell(cell2);
                    Doc.Add(table);


                    Table tdatos5 = new Table(2);
                    int[] widths5 = new int[2];
                    widths5[0] = 2;
                    widths5[1] = 100;
                    tdatos5.SetWidths(widths5);

                    tdatos5.WidthPercentage = 100;
                    tdatos5.Border = 0;
                    tdatos5.BorderWidth = 0;
                    tdatos5.Padding = 2;
                    tdatos5.DefaultHorizontalAlignment = Element.ALIGN_LEFT;


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos5.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Requisitos", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos5.AddCell(celda);
                    Doc.Add(tdatos5);
                    //fin
                    string Generales = "";
                    int idGenerales = 1;

                    if (proc.sinnotas == 0)
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "1")
                            {
                                if (Generales == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Generales = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = "" + req.RecNum + ".- " + req.Nombre + "\n";
                                    }
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Generales = Generales + "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre + "\n";
                                }
                                else
                                {
                                    Generales = Generales + "\n" + req.RecNum + ".- " + req.Nombre + "\n";
                                }

                                idGenerales = idGenerales++;

                            }
                        }
                    }
                    else
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "1")
                            {
                                if (Generales == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Generales = "\n" + req.Titulo + "\n" + "" + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = "" + req.Nombre;
                                    }
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Generales = Generales + "\n" + req.Titulo + "\n" + "" + req.Nombre + "\n";
                                }
                                else
                                {
                                    Generales = Generales + "\n" + "" + req.Nombre + "\n";
                                }

                                idGenerales = idGenerales++;

                            }
                        }
                    }

                    string Nota = "";
                    int idnota = 1;
                    var idproce = proc.ProcedimientoId;

                    if (proc.sinnotas == 0)
                    {
                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "2")
                            {

                                if (Nota == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Nota = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = req.RecNum + ".- " + req.Nombre + "\n";
                                    }
                                    //Nota = req.RecNum + ".- " + req.Nombre;
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Nota = Nota + "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                }
                                else
                                {
                                    Nota = Nota + "\n" + req.RecNum + ".- " + req.Nombre;
                                }

                                idnota = idnota++;
                            }
                        }
                    }
                    else
                    {

                        foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                        {
                            string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                            if (tiporeq == "2")
                            {

                                if (Nota == "")
                                {
                                    if (req.EditableTitulo == 1)
                                    {
                                        Nota = "\n" + req.Titulo + "\n" + "" + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = req.Nombre;
                                    }
                                    //Nota = req.RecNum + ".- " + req.Nombre;
                                }
                                else if (req.EditableTitulo == 1)
                                {
                                    Nota = Nota + "\n" + req.Titulo + "\n" + "" + req.Nombre + "\n";
                                }
                                else
                                {
                                    Nota = Nota + "\n" + "" + req.Nombre + "\n";
                                }

                                idnota = idnota++;
                            }
                        }
                    }

                    string nombnotas = "\nNotas:\n\n";

                    if (proc.sinnotas == 0)
                    {
                        if (Nota == "")
                        {
                            nombnotas = "\n";
                        }
                    }
                    else
                    {
                        nombnotas = "";
                    }
                    PdfPTable tablegeneral = new PdfPTable(1);
                    tablegeneral.TotalWidth = 480f;
                    tablegeneral.LockedWidth = true;
                    tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                    PdfPCell cellgeneral = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        //HorizontalAlignment=3,
                        VerticalAlignment = 3,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, Generales + nombnotas + Nota, f),
                    };


                    tablegeneral.AddCell(cellgeneral);
                    Doc.Add(tablegeneral);

                    //inicio
                    Table tdatos7 = new Table(2);
                    int[] widths7 = new int[2];
                    widths7[0] = 2;
                    widths7[1] = 100;
                    tdatos7.SetWidths(widths7);

                    tdatos7.WidthPercentage = 100;
                    tdatos7.Border = 0;
                    tdatos7.BorderWidth = 0;
                    tdatos7.Padding = 2;
                    tdatos7.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos7.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Formularios", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos7.AddCell(celda);

                    Doc.Add(tdatos7);

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();
                    string Formulario = "";
                    string FormularionNombre = "";
                    if (proc.Requisito != null || proc.Requisito.Count > 0)
                    {
                        foreach (Requisito r in proc.Requisito.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                        {

                            if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                            {
                                foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                                {
                                    var rut = "\n";
                                    var urlrut = "\n";
                                    if (rf.Url != null)
                                    {
                                        urlrut = "\nUrl: " + rf.Url + "\n";
                                    }
                                    if (rf.ArchivoAdjuntoId != null)
                                    {
                                        long cod = rf.ArchivoAdjuntoId.Value;
                                        var archivo = _archivoAdjuntoService.GetOne(cod);
                                        rut = "\nUbicación: " + @pathLinkarchivos + archivo.Ruta + archivo.Extension;
                                        estadoformulario = rut;



                                        if (archivo.Extension == ".pdf")
                                        {
                                            FormularionNombre = "Formulario PDF: ";
                                        }
                                        else if (archivo.Extension == ".doc" || archivo.Extension == ".docx")
                                        {
                                            FormularionNombre = "Formulario Word: ";
                                        }
                                        else
                                        {
                                            FormularionNombre = "Formulario Excel: ";
                                        }
                                    };

                                    if (Formulario == "")
                                    {
                                        Formulario = FormularionNombre + rf.Nombre + rut + urlrut;
                                    }
                                    else
                                    {
                                        Formulario = Formulario + "\n" + FormularionNombre + rf.Nombre + rut + urlrut;
                                    }

                                }
                            }
                        }
                    }

                    PdfPTable tableformulario = new PdfPTable(1);
                    tableformulario.TotalWidth = 480f;
                    tableformulario.LockedWidth = true;
                    tableformulario.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    PdfPCell cellformulario = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, Formulario, f),
                    };

                    tableformulario.AddCell(cellformulario);
                    Doc.Add(tableformulario);
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    //inicio
                    Table tdatos8 = new Table(2);
                    int[] widths8 = new int[2];
                    widths8[0] = 2;
                    widths8[1] = 100;
                    tdatos8.SetWidths(widths8);

                    tdatos8.WidthPercentage = 100;
                    tdatos8.Border = 0;
                    tdatos8.BorderWidth = 0;
                    tdatos8.Padding = 2;
                    tdatos8.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos8.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Canales de atención", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos8.AddCell(celda);

                    Doc.Add(tdatos8);


                    var oficina = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 1 && x.Checked == true).Count() > 0;
                    var virt = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 2 && x.Checked == true).Count() > 0;
                    var tel = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 3 && x.Checked == true).Count() > 0;

                    string canales = "";

                    if ((bool)oficina)
                    {

                        if (canales == "")
                        {
                            canales = "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                        }

                    }
                    if ((bool)virt)
                    {

                        if (canales == "")
                        {
                            canales = "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                        }

                    }
                    if ((bool)tel)
                    {

                        if (canales == "")
                        {
                            canales = "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                        }
                        else
                        {
                            canales = canales + "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                        }

                    }

                    PdfPTable tablecanales = new PdfPTable(1);
                    tablecanales.TotalWidth = 480f;
                    tablecanales.LockedWidth = true;
                    tablecanales.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    PdfPCell cellcanales = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, canales, f),
                    };

                    tablecanales.AddCell(cellcanales);
                    Doc.Add(tablecanales);

                    //inicio Pago por derecho de tramitación 
                    Table tdatos9 = new Table(5);
                    int[] widths9 = new int[5];
                    widths9[0] = 2;
                    widths9[1] = 50;
                    widths9[2] = 5;
                    widths9[3] = 2;
                    widths9[4] = 50;
                    tdatos9.SetWidths(widths9);

                    tdatos9.WidthPercentage = 100;
                    tdatos9.Border = 0;
                    tdatos9.BorderWidth = 0;
                    tdatos9.Padding = 2;
                    tdatos9.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Pago por derecho de tramitación", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos9.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Modalidad de pagos", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos9.AddCell(celda);

                    Doc.Add(tdatos9);

                    //Pago por derecho de Tramitación 

                    string tramite = "";

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();
                    for (int i = 0; i < proc.TablaAsme.Count(); i++)
                    {
                        if (proc.TablaAsme[i].EsGratuito == false)
                        {


                            if (proc.Expediente.TipoExpediente == TipoExpediente.CargaInicial)
                            {

                                if (tramite == "")
                                {

                                    //tramite = proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].CostoUnitario != 0)
                                    {


                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                        tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = desp + " S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0" ;
                                    }

                                }
                                else
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].CostoUnitario != 0)
                                    {
                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                        tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   

                                    }

                                    //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                }

                            }
                            else
                            {

                                if (tramite == "")
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                    }

                                    if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                    {
                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;
                                        tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";

                                        //tramite = desp + " S/ " +  string.Format("{0:0.0}", proc.TablaAsme[i].DerechoTramitacion) + "0";
                                    }
                                    else
                                    {
                                        if (proc.Operacion == OperacionExpediente.Ninguna)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }
                                        else
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }

                                    }

                                }
                                else
                                {
                                    string desp = "";
                                    if (proc.TablaAsme[i].Descripcion != null)
                                    {
                                        desp = proc.TablaAsme[i].Descripcion;

                                        //decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;
                                        //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                    }

                                    if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                    {

                                        decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                        tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].DerechoTramitacion) + "0";  

                                    }
                                    else
                                    {
                                        if (proc.Operacion == OperacionExpediente.Ninguna)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }
                                        else
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                        }

                                    }




                                }
                            }

                        }
                        else
                        {

                            List<TablaAsmeReproduccion> repro = _tablaAsmeReproduccionService.GetAll(proc.TablaAsme[i].TablaAsmeId);
                            if (tramite == "")
                            {
                                if (proc.TablaAsme[i].Descripcion == null)
                                {

                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = "";
                                    }
                                    else
                                    {
                                        tramite = "Gratuito ";
                                    }

                                }
                                else
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = proc.TablaAsme[i].Descripcion + '\n';
                                    }
                                    else
                                    {
                                        tramite = proc.TablaAsme[i].Descripcion + '\n' + "Gratuito ";
                                    }

                                }
                                if (repro.Count > 0)
                                {
                                    //tramite = "";
                                    //tramite = tramite + "\n\n Costo por Reproducción \n";
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + "Costo por Reproducción \n";
                                    }

                                }


                                foreach (var rp in repro)
                                {
                                    //if (proc.CodigoCorto == "PE123299E43")
                                    //{
                                    //    tramite = tramite +  "\n";
                                    //}
                                    //else
                                    //{
                                    tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                    //}

                                }
                                tramite = tramite + "\n";
                            }
                            else
                            {
                                if (proc.TablaAsme[i].Descripcion == null)
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n ";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n Gratuito ";
                                    }


                                }
                                else
                                {
                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n';
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + " Gratuito";
                                    }


                                }

                                if (repro.Count > 0)
                                {
                                    //tramite = "";
                                    //tramite = tramite + "\n\n Costo por Reproducción \n";

                                    if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                    {
                                        tramite = tramite + "\n";
                                    }
                                    else
                                    {
                                        tramite = tramite + "\n" + "Costo por Reproducción \n";
                                    }

                                }

                                foreach (var rp in repro)
                                {
                                    //if (proc.CodigoCorto == "PE123299E43")
                                    //{
                                    //    tramite = tramite + "\n";
                                    //}
                                    //else
                                    //{
                                    tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                    //}


                                }
                                tramite = tramite + "\n";
                            }
                        }

                    }

                    string titulo1 = "Caja de la Entidad \n";
                    string cajaentidad = "";


                    var Efectivo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 6 && x.Checked == true).Count() > 0;
                    var Debito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 7 && x.Checked == true).Count() > 0;
                    var Credito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 8 && x.Checked == true).Count() > 0;



                    if ((bool)Efectivo)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                        }

                    }


                    if ((bool)Debito)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                        }
                    }



                    if ((bool)Credito)
                    {

                        if (cajaentidad == "")
                        {
                            cajaentidad = "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            cajaentidad = cajaentidad + "\n" + "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                        }

                    }



                    string titulo2 = "\nOtras opciones\n";
                    string otrasopciones = "";



                    var Agencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 9 && x.Checked == true).Count() > 0;
                    var Transferencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 10 && x.Checked == true).Count() > 0;
                    var Pagalo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 11 && x.Checked == true).Count() > 0;

                    if ((bool)Agencia)
                    {


                        if (otrasopciones == "")
                        {
                            otrasopciones = "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                        }
                    }

                    if ((bool)Transferencia)
                    {
                        if (otrasopciones == "")
                        {
                            otrasopciones = "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                        }
                    }
                    if ((bool)Pagalo)
                    {

                        if (otrasopciones == "")
                        {
                            otrasopciones = "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                        }
                        else
                        {
                            otrasopciones = otrasopciones + "\n" + "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                        }
                    }



                    RoundRectangle2 rr2 = new RoundRectangle2();
                    RoundRectangle3 rr3 = new RoundRectangle3();
                    PdfPTable table2 = new PdfPTable(2);
                    table2.TotalWidth = 480f;
                    table2.LockedWidth = true;
                    table2.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    float[] values = new float[2];
                    values[0] = 105;
                    values[1] = 100;
                    table2.SetWidths(values);
                    PdfPCell cell1 = new PdfPCell()
                    {
                        CellEvent = rr2,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = new Phrase(0, tramite, f),

                    };
                    table2.AddCell(cell1);


                    if (cajaentidad == "")
                    {
                        titulo1 = "";
                    }


                    if (otrasopciones == "")
                    {
                        titulo2 = "";
                    }

                    Phrase phrase = new Phrase();
                    phrase.Add(
                        new Chunk(titulo1, fontsNegrita)

                    );
                    phrase.Add(new Chunk(cajaentidad, f));
                    phrase.Add(new Chunk(titulo2, fontsNegrita));
                    phrase.Add(new Chunk(otrasopciones, f));

                    PdfPCell cell23 = new PdfPCell()
                    {
                        CellEvent = rr3,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        Phrase = phrase,
                        //Phrase = new Phrase(0, tramite, f),  
                    };
                    table2.AddCell(cell23);
                    Doc.Add(table2);

                    //inicio
                    Table tdatos10 = new Table(5);
                    int[] widths10 = new int[5];
                    widths10[0] = 2;
                    widths10[1] = 17;
                    widths10[2] = 5;
                    widths10[3] = 2;
                    widths10[4] = 100;
                    tdatos10.SetWidths(widths10);

                    tdatos10.WidthPercentage = 100;
                    tdatos10.Border = 0;
                    tdatos10.BorderWidth = 0;
                    tdatos10.Padding = 2;
                    tdatos10.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Plazo de atención", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos10.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Calificación del procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos10.AddCell(celda);

                    Doc.Add(tdatos10);

                    var calificacion = proc.Calificacion.ToString();
                    string calProcedimiento = "";

                    //if (proc.TipoProcedimiento == TipoProcedimiento.Procedimiento )
                    //{

                    if (proc.Calificaciones == 1)
                    {
                        string Descripciontablas = proc.TablaAsme[0].Descripcion;
                        if (calificacion == "Automatica")
                        {
                            calProcedimiento = Descripciontablas + ": Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad." + "\n";
                        }
                        else if (calificacion == "SilencioPositivo")
                        {
                            calProcedimiento = Descripciontablas + ": Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada." + "\n";
                        }
                        else if (calificacion == "SilencioNegativo")
                        {
                            calProcedimiento = Descripciontablas + ": Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos." + "\n";
                        }

                        for (int i = 1; i < proc.TablaAsme.Count(); i++)
                        {
                            calificacion = proc.TablaAsme[i].Calificacion.ToString();
                            Descripciontablas = proc.TablaAsme[i].Descripcion.ToString();

                            if (calificacion == "Automatica")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad." + "\n";
                            }
                            else if (calificacion == "SilencioPositivo")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada." + "\n";
                            }
                            else if (calificacion == "SilencioNegativo")
                            {
                                calProcedimiento = calProcedimiento + "\n" + Descripciontablas + ": Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos." + "\n";
                            }
                        }

                    }
                    else
                    {
                        if (calificacion == "Automatica")
                        {
                            calProcedimiento = "Aprobación automática: La solicitud es considerada aprobada desde el mismo momento de su presentación ante la entidad competente para conocerla, siempre que el administrado cumpla con los requisitos y entregue la documentación completa, exigidos en el TUPA de la entidad.";
                        }
                        else if (calificacion == "SilencioPositivo")
                        {
                            calProcedimiento = "Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, la petición se considera aprobada.";
                        }
                        else if (calificacion == "SilencioNegativo")
                        {
                            calProcedimiento = "Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta, puede interponer los recursos administrativos.";
                        }
                    }

                    //}
                    //else
                    //{
                    //    if (calificacion == "Automatica")
                    //    {
                    //        calProcedimiento = "Aprobación automática: El procedimiento se da por aprobado a la sola presentación de todos los documentos";
                    //    }
                    //    else if (calificacion == "SilencioPositivo")
                    //    {
                    //        calProcedimiento = "Evaluación previa – Silencio Administrativo Positivo: Si vencido el plazo de atención, no obtiene respuesta, su solicitud ha sido aprobada.";
                    //    }
                    //    else if (calificacion == "SilencioNegativo")
                    //    {
                    //        calProcedimiento = "Evaluación previa- Silencio Administrativo Negativo: Si vencido el plazo de atención, no obtiene respuesta puede interponer los recursos administrativos.";
                    //    }

                    //}




                    string plazos = "";
                    string tplazo = "";
                    List<PlazoAtencion> lstplazo = _plazoAtencionService.GetAll(proc.ProcedimientoId);

                    if (proc.TipoPlazo == TipoPlazo.calendarios || proc.TipoPlazo == TipoPlazo.habiles)
                    {
                        if (proc.TipoPlazo == TipoPlazo.habiles)
                        {
                            tplazo = " días hábiles";
                        }
                        else
                        {
                            tplazo = " días " + proc.TipoPlazo;
                        }
                    }
                    else
                    {
                        tplazo = " " + proc.TipoPlazo;
                    }
                    if (lstplazo.Count() != 0)
                    {
                        plazos = proc.PlazoAtencionDes + ": " + proc.PlazoAtencion + " " + tplazo + "\n";
                        foreach (var lstplazos in lstplazo)
                        {
                            if (lstplazos.TipoPlazo == TipoPlazo.calendarios || lstplazos.TipoPlazo == TipoPlazo.habiles)
                            {
                                if (proc.TipoPlazo == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + lstplazos.TipoPlazo;
                                }

                            }
                            else
                            {
                                tplazo = " " + lstplazos.TipoPlazo;
                            }
                            plazos = plazos + " " + lstplazos.Descripcion + ": " + lstplazos.Plazo + tplazo + "\n";

                        }
                    }
                    else
                    {
                        plazos = proc.PlazoAtencion + tplazo;
                    }


                    RoundRectangle4 rr4 = new RoundRectangle4();
                    RoundRectangle5 rr5 = new RoundRectangle5();
                    PdfPTable table3 = new PdfPTable(2);
                    table3.TotalWidth = 480f;
                    table3.LockedWidth = true;
                    table3.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    float[] values1 = new float[2];
                    values1[0] = 60;
                    values1[1] = 240;
                    table3.SetWidths(values1);

                    if (proc.PlazoAtencion != 0)
                    {

                        PdfPCell cell3 = new PdfPCell()
                        {
                            CellEvent = rr4,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, plazos, f),

                        };
                        table3.AddCell(cell3);
                    }
                    else
                    {

                        PdfPCell cell3 = new PdfPCell()
                        {
                            CellEvent = rr4,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, "", f),

                        };
                        table3.AddCell(cell3);
                    }


                    PdfPCell cell24 = new PdfPCell()
                    {
                        CellEvent = rr5,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, calProcedimiento, f),
                    };
                    table3.AddCell(cell24);
                    Doc.Add(table3);


                    //inicio
                    Table tdatos11 = new Table(2);
                    int[] widths11 = new int[2];
                    widths11[0] = 2;
                    widths11[1] = 100;
                    tdatos11.SetWidths(widths11);

                    tdatos11.WidthPercentage = 100;
                    tdatos11.Border = 0;
                    tdatos11.BorderWidth = 0;
                    tdatos11.Padding = 2;
                    tdatos11.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos11.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Sedes y horarios de atención", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos11.AddCell(celda);

                    Doc.Add(tdatos11);

                    //string sedehora = "";
                    //foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                    //{
                    //    var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                    //   string.Format("Lunes a Viernes de {0} a {1}. ",
                    //           item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                    //   : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                    //           item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                    //           item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                    //           item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                    //           item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                    //           )
                    //           : "") +
                    //        (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                    //           item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                    //           : "") +
                    //            (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                    //           item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                    //           item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                    //           : "");

                    //    if (sedehora == "")
                    //    {
                    //        sedehora = item.Sede.Nombre + ": " + horario;
                    //    }
                    //    else
                    //    {
                    //        sedehora = sedehora + "\n" + item.Sede.Nombre + ": " + horario;
                    //    }

                    //}


                    //PdfPTable tablesedes = new PdfPTable(1);
                    //tablesedes.TotalWidth = 480f;
                    //tablesedes.LockedWidth = true;
                    //tablesedes.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                    //PdfPCell cellsedes = new PdfPCell()
                    //{
                    //    CellEvent = rr,
                    //    Padding = 10,
                    //    BorderWidth = 0,
                    //    Phrase = new Phrase(0, sedehora, f),
                    //};

                    //tablesedes.AddCell(cellsedes);
                    //Doc.Add(tablesedes);

                    PdfPCell celdasede;
                    PdfPCell celdapdf;
                    IPdfPCellEvent roundRectangleh = new RoundedBorder85();
                    PdfPTable outertableh = new PdfPTable(1);

                    outertableh.WidthPercentage = 100;

                    PdfPTable tdatossedes = new PdfPTable(2);
                    int[] widthssedes = new int[2];
                    widthssedes[0] = 60;
                    widthssedes[1] = 100;
                    tdatossedes.SetWidths(widthssedes);

                    tdatossedes.WidthPercentage = 100;
                    //tdatossedes.Border = 0;
                    //tdatossedes.BorderWidth = 0;
                    //tdatossedes.Padding = 2;
                    tdatossedes.HorizontalAlignment = Element.ALIGN_LEFT;


                    foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                    {
                        var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                       string.Format("Lunes a Viernes de {0} a {1}. ",
                               item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                               item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                       : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                               item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                               item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                               item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                               item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                               )
                               : (item.Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                            (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                               item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                               item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                               : "") +
                                (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                               item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                               item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                               : "");


                        celdasede = new PdfPCell();
                        celdasede.Border = PdfPCell.NO_BORDER;
                        //celdasede.Leading = 10; 
                        celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celdasede.AddElement(fnChunk(item.Sede.Nombre, (int)Fuente.FuenteLetraNormal));
                        tdatossedes.AddCell(celdasede);

                        celdasede = new PdfPCell();
                        celdasede.Border = PdfPCell.NO_BORDER;
                        //celda.Leading = 10; 
                        celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celdasede.AddElement(fnChunk(horario, (int)Fuente.FuenteLetraNormal));
                        tdatossedes.AddCell(celdasede);

                    }

                    celdapdf = new PdfPCell(tdatossedes);
                    celdapdf.CellEvent = roundRectangleh;
                    celdapdf.Border = PdfPCell.NO_BORDER;
                    celdapdf.Padding = 8;

                    outertableh.AddCell(celdapdf);
                    Doc.Add(outertableh);


                    //inicio
                    Table tdatos12 = new Table(2);
                    int[] widths12 = new int[2];
                    widths12[0] = 2;
                    widths12[1] = 100;
                    tdatos12.SetWidths(widths12);

                    tdatos12.WidthPercentage = 100;
                    tdatos12.Border = 0;
                    tdatos12.BorderWidth = 0;
                    tdatos12.Padding = 2;
                    tdatos12.DefaultHorizontalAlignment = Element.ALIGN_LEFT;



                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos12.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Unidad de organización donde se presenta la documentación", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos12.AddCell(celda);

                    Doc.Add(tdatos12);

                    string unidad = "";

                    List<UndOrgRecepcionDocumentos> nuevo;
                    var variable = dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId).ToList();

                    if (variable.Count == 0)
                    {
                        unidad = "";
                    }
                    else
                    {
                        if (variable.Count == 1)
                        {
                            nuevo = variable[0].UndOrgRecepcionDocumentos;
                        }
                        else
                        {
                            if (variable.Count <= sededat)
                            {
                                unidad = "";
                            }
                            else { nuevo = variable[sededat].UndOrgRecepcionDocumentos; }
                        }

                        int sededat3 = 0;
                        int sededat4 = 0;
                        List<int> oficinas = new List<int>();
                        List<long> idoficinas = new List<long>();
                        List<string> idsede = new List<string>();
                        MetaDato ofi = new MetaDato();
                        foreach (var item2 in variable)
                        {
                            var nuevo2 = variable[sededat3].UndOrgRecepcionDocumentos;
                            foreach (var item in nuevo2)
                            {
                                oficinas.Add(Convert.ToInt16(item.SedeId));
                                idoficinas.Add(item.UnidadOrganicaId);

                                if (item.UnidadOrganica == null)
                                {
                                    idsede.Add("No existe dentro de la sede: " + item.Sede.Nombre.ToString() + " Revisar");
                                }
                                else
                                {
                                    idsede.Add(item.UnidadOrganica.Nombre);
                                }
                                //idsede.Add(item.UnidadOrganica.Nombre);

                                String ver = proc.ProcedimientoId.ToString();
                            }

                            sededat3 = sededat3++;

                        }

                        string nom = string.Empty;
                        int valor = 0;
                        int idvalor = 0;
                        string nomb = "";
                        foreach (var item in idoficinas.Distinct())
                        {
                            valor = 0;
                            string sedes = "";
                            foreach (var item2 in variable)
                            {
                                int con = item2.UndOrgRecepcionDocumentos.Count();
                                for (int i = 0; i < con; i++)
                                {
                                    if (item == item2.UndOrgRecepcionDocumentos[i].UnidadOrganicaId)
                                    {

                                        sedes = sedes + ", " + item2.Sede.Nombre;
                                        valor = valor++;

                                        if (item2.UndOrgRecepcionDocumentos[i].UnidadOrganica == null)
                                        {

                                            nomb = "No existe dentro de la Und Org Recepcion Documentos:  Revisar";
                                        }
                                        else
                                        {
                                            nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                        }

                                        //nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                    }
                                }
                            }

                            //if (valor == variable.Count())
                            //{ 
                            //    nom = nomb + " : Todas las Sedes";

                            //    if (unidad == "")
                            //    {
                            //        unidad = nom;
                            //    }
                            //    else
                            //    {
                            //        unidad = unidad + "\n" + nom;
                            //    }

                            //}
                            //else
                            //{
                            int asd = sedes.Length;
                            nom = nomb + " : " + sedes.Substring(1, asd - 1);

                            if (unidad == "")
                            {
                                unidad = nom;
                            }
                            else
                            {
                                unidad = unidad + "\n" + nom;
                            }
                            //}
                            idvalor = valor++;
                            sededat4 = sededat4++;
                        }
                    }


                    PdfPTable tableunidad = new PdfPTable(1);
                    tableunidad.TotalWidth = 480f;
                    tableunidad.LockedWidth = true;
                    tableunidad.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                    PdfPCell cellunidad = new PdfPCell()
                    {
                        CellEvent = rr,
                        Padding = 8,
                        BorderWidth = 0,
                        Phrase = new Phrase(0, unidad, f),
                    };

                    tableunidad.AddCell(cellunidad);
                    Doc.Add(tableunidad);


                    sededat = sededat++;

                    //inicio
                    Table tdatos13 = new Table(5);
                    int[] widths13 = new int[5];
                    widths13[0] = 2;
                    widths13[1] = 50;
                    widths13[2] = 5;
                    widths13[3] = 2;
                    widths13[4] = 50;
                    tdatos13.SetWidths(widths13);

                    tdatos13.WidthPercentage = 100;
                    tdatos13.Border = 0;
                    tdatos13.BorderWidth = 0;
                    tdatos13.Padding = 2;
                    tdatos13.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Unidad de organización responsable de aprobar la solicitud", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos13.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Consulta sobre el procedimiento", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 5;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos13.AddCell(celda);

                    Doc.Add(tdatos13);

                    PdfPTable table4 = new PdfPTable(2);
                    table4.TotalWidth = 480f;
                    table4.LockedWidth = true;
                    table4.HorizontalAlignment = Element.ALIGN_LEFT;
                    float[] values4 = new float[2];
                    values4[0] = 105;
                    values4[1] = 90;
                    table4.SetWidths(values4);



                    if (proc.UndOrgResponsable != null)
                    {

                        string UndOrgResponsable;

                        UndOrgResponsable = proc.UndOrgResponsable.Nombre;

                        List<ProcedimientoUndOrgResponsable> ProcedimientoUndOrgResponsable = _ProcedimientoUndOrgResponsableService.GetAll(proc.ProcedimientoId);

                        if (ProcedimientoUndOrgResponsable.Count() != 0)
                        {
                            foreach (ProcedimientoUndOrgResponsable rec in ProcedimientoUndOrgResponsable)
                            {
                                UndOrgResponsable = UndOrgResponsable + "\n" + _unidadOrganicaService.GetOne(rec.UndOrgResponsableId2).Nombre;
                            }

                        }


                        PdfPCell cell12 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_LEFT,
                            Phrase = new Phrase(0, UndOrgResponsable, f),

                        };
                        table4.AddCell(cell12);
                    }
                    else
                    {

                        PdfPCell cell12 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_LEFT,
                            Phrase = new Phrase(0, "", f),

                        };
                        table4.AddCell(cell12);
                    }



                    PdfPCell cell25 = new PdfPCell()
                    {
                        CellEvent = rr3,
                        Border = 5,
                        Padding = 8,
                        BorderWidth = 0,
                        HorizontalAlignment = Element.ALIGN_LEFT,
                        Phrase = new Phrase(0, "Teléfono: " + proc.Telefono + "\n" + "Anexo: " + proc.Anexo + "\n" + "Correo: " + proc.Correo, f),
                    };
                    table4.AddCell(cell25);
                    Doc.Add(table4);


                    //inicio
                    Table tdatos14 = new Table(2);
                    int[] widths14 = new int[2];
                    widths14[0] = 2;
                    widths14[1] = 100;
                    tdatos14.SetWidths(widths14);

                    tdatos14.WidthPercentage = 100;
                    tdatos14.Border = 0;
                    tdatos14.BorderWidth = 0;
                    tdatos14.Padding = 2;
                    tdatos14.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);

                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);


                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);

                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    //celda.Leading = 20;
                    //celda.Colspan = 2;
                    //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    //tdatos14.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos14.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Instancias de resolución de recursos", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos14.AddCell(celda);

                    Doc.Add(tdatos14);

                    Table tdatos15 = new Table(20);
                    int[] widths15 = new int[20];
                    widths15[0] = 30;
                    widths15[1] = 100;
                    widths15[2] = 100;
                    widths15[3] = 100;
                    widths15[4] = 100;
                    widths15[5] = 100;
                    widths15[6] = 100;
                    widths15[7] = 100;
                    widths15[8] = 100;
                    widths15[9] = 100;
                    widths15[10] = 100;
                    widths15[11] = 100;
                    widths15[12] = 100;
                    widths15[13] = 100;
                    widths15[14] = 100;
                    widths15[15] = 100;
                    widths15[16] = 100;
                    widths15[17] = 100;
                    widths15[18] = 100;
                    widths15[19] = 100;
                    tdatos15.SetWidths(widths15);

                    tdatos15.WidthPercentage = 100;
                    tdatos15.Border = 0;
                    tdatos15.BorderWidth = 0;
                    tdatos15.Padding = 2;
                    tdatos15.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos15.AddCell(celda);



                    if (proc.revision == 1)
                    {
                        //*****************************///
                        if (proc.reclamacion == 1)
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 5;
                            celda.Add(fnChunk("Reclamación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }
                        else
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 5;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }


                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                        //**********************************//

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        celda.Add(fnChunk("Revisión", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        //*****************************///
                        if (proc.reclamacion == 1)
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reclamación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }
                        else
                        {
                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);
                        }


                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos15.AddCell(celda);
                        //**********************************//

                    }

                    celda = new Cell();
                    //celda.BorderWidthRight = 1f;
                    //celda.BorderWidthBottom = 1f;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Autoridad competente", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);

                    //var autoridad2 = "";
                    var autoridad = "";
                    var PzoReconPresent = "";
                    var PzoApelPresent = "";
                    var PzoOtrosPresent = "";

                    var PzoReconResol = "";
                    var PzoApelResol = "";
                    var PzoOtrosResol = "";


                    var cargo = "";
                    var cargootros = "";
                    var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                    if (proc.CargoReconsideracion != null)
                    {
                        if (proc.UndOrgReconsideracion == null)
                        {
                            autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion;
                        }
                        else
                        {
                            if (proc.UndOrgReconsideracion != null)
                            {
                                autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion + " - " + proc.UndOrgReconsideracion.Nombre;

                                if (reconideracion != null)
                                {
                                    //char c1 = 'A';
                                    foreach (ProcedimientoCargos rec in reconideracion)
                                    {

                                        //c1++;


                                        autoridad = autoridad + '\n' + rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;



                                        if (rec.PzoPresent != 0)
                                        {
                                            var mese = "";
                                            if (rec.TipoReconPresent == TipoPlazo.calendarios || rec.TipoReconPresent == TipoPlazo.habiles)
                                            {
                                                if (rec.TipoReconPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + rec.TipoReconPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + rec.TipoReconPresent.ToString();
                                            }

                                            PzoReconPresent = PzoReconPresent + '\n' + rec.PzoPresent + mese;
                                        }

                                        if (rec.PzoResol != 0)
                                        {
                                            var mese = "";
                                            if (rec.TipoReconResol == TipoPlazo.calendarios || rec.TipoReconResol == TipoPlazo.habiles)
                                            {
                                                if (rec.TipoReconResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + rec.TipoReconResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + rec.TipoReconResol.ToString();
                                            }
                                            PzoReconResol = PzoReconResol + '\n' + rec.PzoResol + mese;
                                        }

                                    }
                                }


                            }
                            else
                            {
                                autoridad = proc.CargoReconsideracion == null ? "" : proc.CargoReconsideracion + " - " + "";
                            }
                        }


                    }



                    //else {
                    //    autoridad = "No Corresponde";
                    //}
                    var apelacion = _procedimientoCargosApeService.GetOnelista(proc.ProcedimientoId);

                    if (proc.CargoApelacion != null)
                    {
                        if (proc.UndOrgApelacion == null)
                        {
                            cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion;
                        }
                        else
                        {
                            if (proc.UndOrgApelacion != null)
                            {
                                cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion + " - " + proc.UndOrgApelacion.Nombre;

                                if (apelacion != null)
                                {

                                    foreach (ProcedimientoCargosApe ape in apelacion)
                                    {


                                        cargo = cargo + '\n' + ape.CargoApe + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdApe).Nombre;


                                        if (ape.PzoPresentApe != 0)
                                        {

                                            var mese = "";
                                            if (ape.TipoApelPresent == TipoPlazo.calendarios || ape.TipoApelPresent == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoApelPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoApelPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoApelPresent.ToString();
                                            }

                                            PzoApelPresent = PzoApelPresent + '\n' + ape.PzoPresentApe + mese;
                                        }

                                        if (ape.PzoResolApe != 0)
                                        {
                                            var mese = "";
                                            if (ape.TipoApelResol == TipoPlazo.calendarios || ape.TipoApelResol == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoApelResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoApelResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoApelResol.ToString();
                                            }
                                            PzoApelResol = PzoApelResol + '\n' + ape.PzoResolApe + mese;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cargo = proc.CargoApelacion == null ? "" : proc.CargoApelacion + " - " + "";
                            }

                        }
                    }
                    /******************************************************************/

                    //var Otros = _procedimientoCargosApeService.GetOnelista(proc.ProcedimientoId);

                    var Otros = _procedimientoCargosOtrosService.GetOnelista(proc.ProcedimientoId);

                    if (proc.CargoOtros != null)
                    {
                        if (proc.UndOrgOtros == null)
                        {
                            cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros;
                        }
                        else
                        {
                            if (proc.UndOrgOtros != null)
                            {
                                cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros + " - " + proc.UndOrgOtros.Nombre;

                                if (apelacion != null)
                                {

                                    foreach (ProcedimientoCargosOtros ape in Otros)
                                    {


                                        cargootros = cargootros + '\n' + ape.CargoOtros + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdOtros).Nombre;


                                        if (ape.PzoPresentOtros != 0)
                                        {

                                            var mese = "";
                                            if (ape.TipoOtrosPresent == TipoPlazo.calendarios || ape.TipoOtrosPresent == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoOtrosPresent == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoOtrosPresent;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoOtrosPresent.ToString();
                                            }

                                            PzoOtrosPresent = PzoOtrosPresent + '\n' + ape.PzoPresentOtros + mese;
                                        }

                                        if (ape.PzoResolOtros != 0)
                                        {
                                            var mese = "";
                                            if (ape.TipoOtrosResol == TipoPlazo.calendarios || ape.TipoOtrosResol == TipoPlazo.habiles)
                                            {
                                                if (ape.TipoOtrosResol == TipoPlazo.habiles)
                                                {
                                                    mese = " días hábiles";
                                                }
                                                else
                                                {
                                                    mese = " días " + ape.TipoOtrosResol;
                                                }
                                            }
                                            else
                                            {
                                                mese = " " + ape.TipoOtrosResol.ToString();
                                            }
                                            PzoOtrosResol = PzoOtrosResol + '\n' + ape.PzoResolOtros + mese;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cargootros = proc.CargoOtros == null ? "" : proc.CargoOtros + " - " + "";
                            }

                        }
                    }
                    /**********************************************************************/



                    if (proc.revision == 1)
                    {

                        //**************************************/////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk(autoridad.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk(cargo.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        //**************************************/////


                        celda = new Cell();
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        celda.Add(fnChunk(cargootros.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        //**************************************/////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk(autoridad.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.Add(fnChunk(cargo.Replace("null", ""), (int)Fuente.FuenteLetraNormal));
                        tdatos15.AddCell(celda);

                        //**************************************/////
                    }


                    celda = new Cell();
                    //celda.BorderWidthRight = 1f;
                    //celda.BorderWidthBottom = 1f;
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Plazo máximo de presentación", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);



                    if (proc.revision == 1)
                    {


                        ////////////**************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoReconPresent == TipoPlazo.calendarios || proc.TipoReconPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconPresent.ToString();
                        }
                        if (proc.PzoReconPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconPresent + tplazo + '\n' + PzoReconPresent, (int)Fuente.FuenteLetraNormal));
                        }
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;

                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoApelPresent == TipoPlazo.calendarios || proc.TipoApelPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelPresent.ToString();
                        }

                        if (proc.PzoApelPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelPresent + tplazo + '\n' + PzoApelPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        ////////////**************************************////


                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        if (proc.TipoOtrosPresent == TipoPlazo.calendarios || proc.TipoOtrosPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoOtrosPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoOtrosPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoOtrosPresent.ToString();
                        }

                        if (proc.PzoPresentOtros == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoPresentOtros + tplazo + '\n' + PzoOtrosPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);
                    }
                    else
                    {

                        ////////////**************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoReconPresent == TipoPlazo.calendarios || proc.TipoReconPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconPresent.ToString();
                        }
                        if (proc.PzoReconPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconPresent + tplazo + '\n' + PzoReconPresent, (int)Fuente.FuenteLetraNormal));
                        }
                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidthBottom = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoApelPresent == TipoPlazo.calendarios || proc.TipoApelPresent == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelPresent == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelPresent;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelPresent.ToString();
                        }

                        if (proc.PzoApelPresent == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelPresent + tplazo + '\n' + PzoApelPresent, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        ////////////**************************************////

                    }


                    celda = new Cell();
                    //celda.BorderWidthRight = 1f; 
                    celda.BorderColor = Color.BLACK;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.Add(fnChunk("Plazo máximo de respuesta", (int)Fuente.FuenteLetraNormal));
                    tdatos15.AddCell(celda);


                    if (proc.revision == 1)
                    {


                        //*******************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoReconResol == TipoPlazo.calendarios || proc.TipoReconResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconResol.ToString();
                        }

                        if (proc.PzoReconResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconResol + tplazo + '\n' + PzoReconResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        if (proc.TipoApelResol == TipoPlazo.calendarios || proc.TipoApelResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelResol.ToString();
                        }

                        if (proc.PzoApelResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelResol + tplazo + '\n' + PzoApelResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        //**********************************////

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 6;
                        if (proc.TipoOtrosResol == TipoPlazo.calendarios || proc.TipoOtrosResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoOtrosResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoOtrosResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoOtrosResol.ToString();
                        }

                        if (proc.PzoResolOtros == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoResolOtros + tplazo + '\n' + PzoOtrosResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);
                    }
                    else
                    {


                        //*******************************************////
                        celda = new Cell();
                        //celda.BorderWidthRight = 1f;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoReconResol == TipoPlazo.calendarios || proc.TipoReconResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoReconResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoReconResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoReconResol.ToString();
                        }

                        if (proc.PzoReconResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoReconResol + tplazo + '\n' + PzoReconResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        celda.BorderColor = Color.BLACK;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        if (proc.TipoApelResol == TipoPlazo.calendarios || proc.TipoApelResol == TipoPlazo.habiles)
                        {
                            if (proc.TipoApelResol == TipoPlazo.habiles)
                            {
                                tplazo = " días hábiles";
                            }
                            else
                            {
                                tplazo = " días " + proc.TipoApelResol;
                            }
                        }
                        else
                        {
                            tplazo = " " + proc.TipoApelResol.ToString();
                        }

                        if (proc.PzoApelResol == 0)
                        {

                            celda.Add(fnChunk("No aplica", (int)Fuente.FuenteLetraNormal));
                        }
                        else
                        {
                            celda.Add(fnChunk(proc.PzoApelResol + tplazo + '\n' + PzoApelResol, (int)Fuente.FuenteLetraNormal));
                        }

                        tdatos15.AddCell(celda);

                        //**********************************////
                    }


                    /*Inicio Multiple*/
                    /*

                    var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                    if (reconideracion != null)
                    { 
                        foreach (ProcedimientoCargos rec in reconideracion)
                            {
 
                                //Doc.Add(tdatos15);


                            tdatos15.WidthPercentage = 100;
                            tdatos15.Border = 0;
                            tdatos15.BorderWidth = 0;
                            tdatos15.Padding = 2;
                            tdatos15.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Reconsideración", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk("Apelación", (int)Fuente.FuenteNegrita));
                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Autoridad competente", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            //var autoridad2 = "";
                            //var autoridad = "";
                            //var PzoReconPresent = "";
                            //var PzoApelPresent = "";

                            //var PzoReconResol = "";
                            //var PzoApelResol = "";



                            //var cargo = "";
                            //var reconideracion = _procedimientoCargosService.GetOnelista(proc.ProcedimientoId);
                            if (rec.Cargo != null)
                            {
                                if (rec.UndOrgId == 0)
                                {
                                    autoridad = rec.Cargo == null ? "" : rec.Cargo;
                                }
                                else
                                {
                                    if (rec.UndOrgId != 0)
                                    {
                                        autoridad = rec.Cargo == null ? "" : rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;

                                        //if (reconideracion!=null) {
                                        //    char c1 = 'A';
                                        //    foreach (ProcedimientoCargos rec in reconideracion)
                                        //    {

                                        //        c1++;
                                        //        autoridad = autoridad + '\n' + c1 + "- "+ rec.Cargo + " - " + _unidadOrganicaService.GetOne(rec.UndOrgId).Nombre;

                                        //        PzoReconPresent=  PzoReconPresent + '\n' + c1 + "- " + rec.PzoPresent + " días hábiles.";
                                        //        PzoReconResol = PzoReconResol + '\n' + c1 + "- " + rec.PzoResol + " días hábiles.";
                                        //    }
                                        //} 

                                    }
                                    else
                                    {
                                        autoridad = rec.Cargo == null ? "" : rec.Cargo + " - " + "";
                                    }
                                }


                            }



                            //else {
                            //    autoridad = "No Corresponde";
                            //}
                            var apelacion = _procedimientoCargosApeService.LsitaGetOneorden(proc.ProcedimientoId,rec.orden);

                            if (apelacion.CargoApe != null)
                            {
                                if (apelacion.UndOrgIdApe == 0)
                                {
                                    cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe;
                                }
                                else
                                {
                                    if (apelacion.UndOrgIdApe != 0)
                                    {
                                        cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe + " - " + _unidadOrganicaService.GetOne(apelacion.UndOrgIdApe).Nombre;

                                        //if (apelacion != null)
                                        //{
                                        //    char c1 = 'A';
                                        //    foreach (ProcedimientoCargosApe ape in apelacion)
                                        //    {

                                        //        c1++;
                                        //        cargo = cargo + '\n' + c1 + "- " + ape.CargoApe + " - " + _unidadOrganicaService.GetOne(ape.UndOrgIdApe).Nombre;

                                        //        PzoApelPresent = PzoApelPresent + '\n' + c1 + "- " + ape.PzoPresentApe + " días hábiles.";
                                        //        PzoApelResol = PzoApelResol + '\n' + c1 + "- " + ape.PzoResolApe + " días hábiles.";
                                        //    }
                                        //}
                                    }
                                    else
                                    {
                                        cargo = apelacion.CargoApe == null ? "" : apelacion.CargoApe + " - " + "";
                                    }

                                }
                            }


                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk(autoridad, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            celda.Add(fnChunk(cargo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Plazo máximo de presentación", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);



                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;
                            if (rec.TipoReconPresent == TipoPlazo.calendarios || rec.TipoReconPresent == TipoPlazo.habiles)
                            {
                                if (rec.TipoReconPresent == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoReconPresent;
                                }
                            }
                            else
                            {
                                tplazo = " " + rec.TipoReconPresent.ToString(); 
                            }

                            celda.Add(fnChunk(rec.PzoPresent + " "+ tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            //celda.Border = 0;
                            celda.BorderWidthBottom = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (apelacion.TipoApelPresent == TipoPlazo.calendarios || apelacion.TipoApelPresent == TipoPlazo.habiles)
                            {
                                if (apelacion.TipoApelPresent == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoApelPresent;
                                }
                            }
                            else
                            {
                                tplazo = " " + apelacion.TipoApelPresent.ToString();
                            }
                            celda.Add(fnChunk(apelacion.PzoPresentApe + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 4;
                            celda.Add(fnChunk("Plazo máximo de respuesta", (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);


                            celda = new Cell();
                            celda.BorderWidthRight = 1f;
                            //celda.BorderColor = Color.BLACK;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (rec.TipoReconResol == TipoPlazo.calendarios || rec.TipoReconResol == TipoPlazo.habiles)
                            {
                                if (rec.TipoReconResol == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + rec.TipoReconResol;
                                }
                            }
                            else
                            {
                                tplazo = " " + rec.TipoReconResol.ToString();
                            }

                            celda.Add(fnChunk(rec.PzoResol + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            celda = new Cell();
                            celda.Border = 0;
                            celda.Leading = 10;
                            celda.Colspan = 8;

                            if (apelacion.TipoApelResol == TipoPlazo.calendarios || apelacion.TipoApelResol == TipoPlazo.habiles)
                            {
                                if (apelacion.TipoApelResol == TipoPlazo.habiles)
                                {
                                    tplazo = " días hábiles";
                                }
                                else
                                {
                                    tplazo = " días " + proc.TipoApelResol;
                                }
                            }
                            else
                            {
                                tplazo = " " + apelacion.TipoApelResol.ToString();
                            }
                            celda.Add(fnChunk(apelacion.PzoResolApe + tplazo, (int)Fuente.FuenteLetraNormal));
                            tdatos15.AddCell(celda);

                            }
                    }
                    /*Fin Multiple*/


                    if (proc.TipoProcedimiento == TipoProcedimiento.Estandar)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoReconsideracion != null && proc.CargoApelacion == null && proc.sinnotas == 0)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de reconsideración se interpondrá ante el mismo órgano que dictó el primer acto que es materia de la impugnación y deberá sustentarse en nueva prueba", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoApelacion != null && proc.CargoReconsideracion == null)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de apelación se interpondrá cuando la impugnación se sustente en diferente interpretación de las pruebas producidas o cuando se trate de cuestiones de puro derecho, debiendo dirigirse a la misma autoridad que expidió el acto que se impugna para que eleve lo actuado al superior jerárquico.", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else if (proc.CargoApelacion != null && proc.CargoReconsideracion != null)
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("El recurso de reconsideración se interpondrá ante el mismo órgano que dictó el primer acto que es materia de la impugnación y deberá sustentarse en nueva prueba.\nEl recurso de apelación se interpondrá cuando la impugnación se sustente en diferente interpretación de las pruebas producidas o cuando se trate de cuestiones de puro derecho, debiendo dirigirse a la misma autoridad que expidió el acto que se impugna para que eleve lo actuado al superior jerárquico.", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }
                    else
                    {
                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 20;
                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        celda.Add(fnChunk("", (int)Fuente.FuentesubLetraNormal));
                        tdatos15.AddCell(celda);
                    }



                    Doc.Add(tdatos15);

                    //inicio
                    Table tdatos16 = new Table(2);
                    int[] widths16 = new int[2];
                    widths16[0] = 2;
                    widths16[1] = 100;
                    tdatos16.SetWidths(widths16);

                    tdatos16.WidthPercentage = 100;
                    tdatos16.Border = 0;
                    tdatos16.BorderWidth = 0;
                    tdatos16.Padding = 2;
                    tdatos16.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 20;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 2f;
                    celda.Leading = 8;
                    celda.BackgroundColor = new Color(242, 242, 242);
                    tdatos16.AddCell(celda);

                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 1;
                    celda.BorderColor = new Color(242, 242, 242);
                    celda.BackgroundColor = new Color(242, 242, 242);
                    celda.Add(fnChunk("Base legal", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);


                    celda = new Cell();
                    celda.Border = 0;
                    celda.BorderWidth = 0;
                    celda.Leading = 8;
                    celda.Colspan = 2;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos16.AddCell(celda);

                    Doc.Add(tdatos16);

                    Table tdatos4 = new Table(20);
                    int[] widths = new int[20];
                    widths[0] = 30;
                    widths[1] = 100;
                    widths[2] = 100;
                    widths[3] = 100;
                    widths[4] = 100;
                    widths[5] = 100;
                    widths[6] = 100;
                    widths[7] = 100;
                    widths[8] = 100;
                    widths[9] = 100;
                    widths[10] = 100;
                    widths[11] = 100;
                    widths[12] = 100;
                    widths[13] = 100;
                    widths[14] = 100;
                    widths[15] = 100;
                    widths[16] = 100;
                    widths[17] = 100;
                    widths[18] = 100;
                    widths[19] = 100;
                    tdatos4.SetWidths(widths);

                    tdatos4.WidthPercentage = 100;
                    tdatos4.Border = 0;
                    tdatos4.BorderWidth = 0;
                    tdatos4.Padding = 2;
                    tdatos4.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 4;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Artículo", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 8;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 3;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Tipo", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 3;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Número", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);

                    celda = new Cell();
                    //celda.Border = 0;
                    //celda.BorderWidth = 0;
                    celda.Leading = 10;
                    celda.Colspan = 2;
                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk("Fecha Publicación", (int)Fuente.FuenteNegrita));
                    tdatos4.AddCell(celda);


                    int sedebase = 0;
                    for (int iii = 0; iii < dataBaseLegal.Count(); iii++)
                    {
                        if (dataBaseLegal[iii].BaseLegalId == proc.BaseLegalId)
                        {

                            var descripcionACR = "";
                            var nomsede = "";
                            var dessede = "";
                            var numsede = "";
                            var articulosede = "";
                            var fechasede = "";
                            var valornom = dataBaseLegal.Count();
                            var valornom2 = iii;

                            if (valornom != 0)
                            {
                                if (ProcedimientoIds[0] == 0)
                                {
                                    if (valornom != 1 && valornom2 != 1)
                                    {


                                        if (dataBaseLegal[iii].EstadoACR == "2")
                                        {
                                            descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                        }
                                        else
                                        {
                                            if (dataBaseLegal.Count <= iii)
                                            {
                                                nomsede = "";
                                                dessede = "";
                                                numsede = "";
                                                articulosede = "";
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                                dessede = dataBaseLegal[iii].Descripcion;
                                                numsede = dataBaseLegal[iii].Numero;
                                                articulosede = dataBaseLegal[iii].Articulo;
                                                if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                                {
                                                    fechasede = "";
                                                }
                                                else
                                                {
                                                    fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                                }


                                            }
                                        }
                                    }
                                    else
                                    {
                                        nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                        dessede = dataBaseLegal[iii].Descripcion;
                                        numsede = dataBaseLegal[iii].Numero;
                                        articulosede = dataBaseLegal[iii].Articulo;
                                        if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                        {
                                            fechasede = "";
                                        }
                                        else
                                        {
                                            fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                        }

                                    }

                                }
                                else
                                {

                                    if (dataBaseLegal[iii].EstadoACR == "2")
                                    {
                                        descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                    }
                                    else
                                    {
                                        nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                        dessede = dataBaseLegal[iii].Descripcion;
                                        numsede = dataBaseLegal[iii].Numero;
                                        articulosede = dataBaseLegal[iii].Articulo;
                                        if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                        {
                                            fechasede = "";
                                        }
                                        else
                                        {
                                            fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                        }
                                    }


                                }
                            }

                            if (valornom != 0)
                            {
                                if (dataBaseLegal[iii].EstadoACR == "2")
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 20;
                                    celda.Add(fnChunk(descripcionACR, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }
                                else
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 4;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 8;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 2;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }

                            }
                            else
                            {
                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 4;
                                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 8;
                                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 3;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 3;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                                celda = new Cell();
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                tdatos4.AddCell(celda);

                            }
                        }

                        sedebase = sedebase++;

                    }
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();
                    Doc.Add(tdatos4);

                    // los costados, ancho, alto, curva
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();



                    Doc.Close();
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();



                    rutpag = @pathdocumentos + "Archivo" + ExpedienteId + "_P" + contpag + ".pdf";
                    Rdpag = new PdfReader(rutpag);
                    npag = Rdpag.NumberOfPages;

                    contpag = contpag++;
                    //Doc.NewPage();
                    pagcabhoja = pagcabhoja + npag;


                }

            }
            //fin grupo




        }


        private void TituloPresExc(Document Doc, long ExpedienteId, List<long> ProcedimientoIds)
        {

            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);


            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = "SECCIÓN N° 2: SERVICIOS PRESTADOS EN EXCLUSIVIDAD";


            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);


            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 40;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            Doc.Add(tdatos);


        }

        private void TituloPresExcCompleto(long ExpedienteId, List<long> ProcedimientoIds)
        {



            Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
            PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_titulopresexc.pdf", FileMode.Create));
            //PdfContentByte cb = writer.DirectContent;
            //AdicionarCabecera(Doc, ExpedienteId);
            Doc.Open();



            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);


            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = "SECCIÓN N° 2: SERVICIOS PRESTADOS EN EXCLUSIVIDAD";


            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);


            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 40;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            Doc.Add(tdatos);

            Doc.Close();

        }
        private void GenerarPresExc(Document Doc, long ExpedienteId, List<long> ProcedimientoIds, PdfWriter writer)
        {

            try
            {
                List<ItemIndice> lstIndice = new List<ItemIndice>();
                var expediente = _expedienteService.GetOne(ExpedienteId);
                var entidad = _entidadService.GetOne(expediente.EntidadId);
                var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
                var dataReq = _requisitoService.GetByExpediente(ExpedienteId).OrderBy(x => x.RecNum).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
                var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
                var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
                var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

                if (ProcedimientoIds[0] == 0)
                {
                    dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                    dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3).OrderBy(x => x.RecNum);
                    dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                    dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                    dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                    dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
                }

                int totalRows = 0;

                /*cUADRO DE LA CABECERA PRINCIPAL*/
                ExpedienteNorma en = new ExpedienteNorma()
                {
                    ExpedienteId = expediente.ExpedienteId
                };
                IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

                List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);

                string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

                Table tcab = new Table(1);
                Cell celda;


                //cuadro total de la hoaj
                RoundRectangle rr = new RoundRectangle();

                PdfContentByte cb = writer.DirectContent;
                //deta grupo
                //generacion de los reportes formato tupa por procedimento
                List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
                if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
                //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
                int sededat = 0;
                int contpag = 0;
                MemoryStream stream = new MemoryStream();
                foreach (Procedimiento proc in dataProc)
                {
                    if (contpag == 1)
                    {
                        Doc.NewPage();
                    }
                    proc.TablaAsme = proc.TablaAsme.OrderBy(x => x.TablaAsmeId).ToList();
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    string tipo = "E";

                    if (proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                    {
                        tipo = proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio ? "S" : "P";
                    }
                    else if (proc.TipoProcedimiento == TipoProcedimiento.Servicio)
                    {
                        tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                    }


                    if (tipo == "S")
                    {


                        Table tdatos41 = new Table(20);
                        int[] widths1 = new int[20];
                        widths1[0] = 30;
                        widths1[1] = 100;
                        widths1[2] = 100;
                        widths1[3] = 100;
                        widths1[4] = 100;
                        widths1[5] = 100;
                        widths1[6] = 100;
                        widths1[7] = 100;
                        widths1[8] = 100;
                        widths1[9] = 100;
                        widths1[10] = 100;
                        widths1[11] = 100;
                        widths1[12] = 100;
                        widths1[13] = 100;
                        widths1[14] = 100;
                        widths1[15] = 100;
                        widths1[16] = 100;
                        widths1[17] = 100;
                        widths1[18] = 100;
                        widths1[19] = 100;
                        tdatos41.SetWidths(widths1);

                        var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);

                        tdatos41.WidthPercentage = 100;
                        tdatos41.Border = 0;
                        tdatos41.BorderWidth = 0;
                        tdatos41.Padding = 2;
                        tdatos41.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Colspan = 8;
                        celda.Add(fnChunk("Denominación del Servicio", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 12;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("\"" + proc.Denominacion + "\"", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        if (proc.CodigoCorto != null)
                        {
                            celda.Add(fnChunk("Código: " + proc.CodigoCorto.ToUpper(), (int)Fuente.FuenteNegrita));
                        }
                        else
                        {
                            celda.Add(fnChunk("Código: ", (int)Fuente.FuenteNegrita));
                        }

                        tdatos41.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 19;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Descripción del Servicio", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        var reno = "";
                        celda.BorderColor = Color.BLACK;
                        if (proc.Renovacio.ToString() == "Si")
                        {
                            var mes = "";
                            if (proc.Plazorenovacion.ToString() == "mes1") { mes = "1 mes"; }
                            else if (proc.Plazorenovacion.ToString() == "mes2") { mes = "2 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes3") { mes = "3 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes4") { mes = "4 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes5") { mes = "5 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes6") { mes = "6 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes7") { mes = "7 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes8") { mes = "8 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes9") { mes = "9 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes10") { mes = "10 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes11") { mes = "11 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "anio1") { mes = "1 año"; }
                            else if (proc.Plazorenovacion.ToString() == "anio2") { mes = "2 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio3") { mes = "3 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio4") { mes = "4 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio5") { mes = "5 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio6") { mes = "6 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio7") { mes = "7 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio8") { mes = "8 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio9") { mes = "9 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio10") { mes = "10 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio20") { mes = "20 años"; }
                            else
                            {
                                mes = proc.Plazorenovacion.ToString();
                            }

                            reno = "\n Renovación : " + mes;

                        }

                        Doc.Add(tdatos41);

                        PdfPTable table = new PdfPTable(1);
                        table.TotalWidth = 480f;
                        table.LockedWidth = true;
                        table.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        string ARIALUNI_TFF = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "Arial.TTF");

                        BaseFont bf = BaseFont.CreateFont(ARIALUNI_TFF, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);

                        Font f = new Font(bf, 7, Font.NORMAL);
                        Font centrar = new Font(bf, 7, Font.BOLD);
                        Font fontsNegrita = FontFactory.GetFont("Arial", 7, Font.BOLD);

                        PdfPCell cell2 = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, proc.Objetivo + reno, f),
                        };

                        table.AddCell(cell2);
                        Doc.Add(table);


                        Table tdatos5 = new Table(2);
                        int[] widths5 = new int[2];
                        widths5[0] = 2;
                        widths5[1] = 100;
                        tdatos5.SetWidths(widths5);

                        tdatos5.WidthPercentage = 100;
                        tdatos5.Border = 0;
                        tdatos5.BorderWidth = 0;
                        tdatos5.Padding = 2;
                        tdatos5.DefaultHorizontalAlignment = Element.ALIGN_LEFT;


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Requisitos", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);
                        Doc.Add(tdatos5);
                        //fin
                        string Generales = "";
                        int idGenerales = 1;
                        //foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId).OrderBy(x=>x.RecNum))
                        //{
                        //    string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                        //    if (tiporeq == "1")
                        //    {
                        //        //celda.Add(fnChunk(req.Nombre + "\n", (int)Fuente.FuenteNormal)); 
                        //        if (Generales == "")
                        //        {
                        //            Generales = req.RecNum + ".- " + req.Nombre;
                        //        }
                        //        else
                        //        {
                        //            Generales = Generales + "\n\n" + req.RecNum + ".- " + req.Nombre;
                        //        }
                        //        idGenerales = idGenerales++;
                        //    }
                        //}
                        if (proc.sinnotas == 0)
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "1")
                                {
                                    if (Generales == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Generales = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                        }
                                        else
                                        {
                                            Generales = req.RecNum + ".- " + req.Nombre + "\n";
                                        }
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Generales = Generales + "\n  " + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = Generales + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }

                                    idGenerales = idGenerales++;

                                }
                            }
                        }
                        else
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "1")
                                {
                                    if (Generales == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Generales = "\n" + req.Titulo + "\n" + "        " + req.Nombre;
                                        }
                                        else
                                        {
                                            Generales = req.Nombre;
                                        }
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Generales = Generales + "\n  " + req.Titulo + "\n" + "        " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = Generales + "\n" + "        " + req.Nombre + "\n";
                                    }

                                    idGenerales = idGenerales++;

                                }
                            }

                        }
                        string Nota = "";
                        int idnota = 1;
                        var idproce = proc.ProcedimientoId;
                        //foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                        //{
                        //    string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                        //    if (tiporeq == "2")
                        //    {

                        //        if (Nota == "")
                        //        {
                        //            Nota = idnota + ".- " + req.Nombre;
                        //        }
                        //        else
                        //        {
                        //            Nota = Nota + "\n\n" + idnota + ".- " + req.Nombre;
                        //        }

                        //        idnota = idnota++;
                        //    }
                        //}

                        if (proc.sinnotas == 0)
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "2")
                                {

                                    if (Nota == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Nota = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                        }
                                        else
                                        {
                                            Nota = req.RecNum + ".- " + req.Nombre + "\n";
                                        }
                                        //Nota = req.RecNum + ".- " + req.Nombre;
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Nota = Nota + "\n  " + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = Nota + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }

                                    idnota = idnota++;
                                }
                            }
                        }
                        else
                        {

                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "2")
                                {

                                    if (Nota == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Nota = "\n" + req.Titulo + "\n" + "        " + req.Nombre;
                                        }
                                        else
                                        {
                                            Nota = req.Nombre;
                                        }
                                        //Nota = req.RecNum + ".- " + req.Nombre;
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Nota = Nota + "\n  " + req.Titulo + "\n" + "        " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = Nota + "\n" + "        " + req.Nombre + "\n";
                                    }

                                    idnota = idnota++;
                                }
                            }
                        }
                        string nombnotas = "\nNotas:\n";

                        if (proc.sinnotas == 0)
                        {
                            if (Nota == "")
                            {
                                nombnotas = "\n";
                            }
                        }
                        else { nombnotas = ""; }

                        PdfPTable tablegeneral = new PdfPTable(1);
                        tablegeneral.TotalWidth = 480f;
                        tablegeneral.LockedWidth = true;
                        tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                        PdfPCell cellgeneral = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            //HorizontalAlignment=3,
                            VerticalAlignment = 3,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, Generales + nombnotas + Nota, f),
                        };


                        tablegeneral.AddCell(cellgeneral);
                        Doc.Add(tablegeneral);

                        //inicio
                        Table tdatos7 = new Table(2);
                        int[] widths7 = new int[2];
                        widths7[0] = 2;
                        widths7[1] = 100;
                        tdatos7.SetWidths(widths7);

                        tdatos7.WidthPercentage = 100;
                        tdatos7.Border = 0;
                        tdatos7.BorderWidth = 0;
                        tdatos7.Padding = 2;
                        tdatos7.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos7.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Formularios", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);

                        Doc.Add(tdatos7);

                        string Formulario = "";
                        string FormularionNombre = "";
                        if (proc.Requisito != null || proc.Requisito.Count > 0)
                        {
                            foreach (Requisito r in proc.Requisito.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                            {

                                if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                                {
                                    foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                                    {
                                        var rut = "\n";
                                        var urlrut = "\n";
                                        if (rf.Url != null)
                                        {
                                            urlrut = "\nUrl: " + rf.Url + "\n";
                                        }
                                        if (rf.ArchivoAdjuntoId != null)
                                        {
                                            long cod = rf.ArchivoAdjuntoId.Value;
                                            var archivo = _archivoAdjuntoService.GetOne(cod);
                                            rut = "\nUbicación: " + @pathLinkarchivos + archivo.Ruta + archivo.Extension;
                                            estadoformulario = rut;
                                            if (archivo.Extension == ".pdf")
                                            {
                                                FormularionNombre = "Formulario PDF: ";
                                            }
                                            else if (archivo.Extension == ".doc" || archivo.Extension == ".docx")
                                            {
                                                FormularionNombre = "Formulario Word: ";
                                            }
                                            else
                                            {
                                                FormularionNombre = "Formulario Excel: ";
                                            }

                                        };

                                        if (Formulario == "")
                                        {
                                            Formulario = FormularionNombre + rf.Nombre + rut + urlrut;
                                        }
                                        else
                                        {
                                            Formulario = Formulario + "\n" + FormularionNombre + rf.Nombre + rut + urlrut;
                                        }

                                    }
                                }
                            }
                        }

                        PdfPTable tableformulario = new PdfPTable(1);
                        tableformulario.TotalWidth = 480f;
                        tableformulario.LockedWidth = true;
                        tableformulario.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        PdfPCell cellformulario = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, Formulario, f),
                        };

                        tableformulario.AddCell(cellformulario);
                        Doc.Add(tableformulario);



                        //inicio
                        Table tdatos8 = new Table(2);
                        int[] widths8 = new int[2];
                        widths8[0] = 2;
                        widths8[1] = 100;
                        tdatos8.SetWidths(widths8);

                        tdatos8.WidthPercentage = 100;
                        tdatos8.Border = 0;
                        tdatos8.BorderWidth = 0;
                        tdatos8.Padding = 2;
                        tdatos8.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos8.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Canales de atención", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);

                        Doc.Add(tdatos8);


                        var oficina = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 1 && x.Checked == true).Count() > 0;
                        var virt = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 2 && x.Checked == true).Count() > 0;
                        var tel = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 3 && x.Checked == true).Count() > 0;

                        string canales = "";

                        if ((bool)oficina)
                        {

                            if (canales == "")
                            {
                                canales = "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                            }

                        }
                        if ((bool)virt)
                        {

                            if (canales == "")
                            {
                                canales = "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                            }

                        }
                        if ((bool)tel)
                        {

                            if (canales == "")
                            {
                                canales = "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                            }

                        }

                        PdfPTable tablecanales = new PdfPTable(1);
                        tablecanales.TotalWidth = 480f;
                        tablecanales.LockedWidth = true;
                        tablecanales.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        PdfPCell cellcanales = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, canales, f),
                        };

                        tablecanales.AddCell(cellcanales);
                        Doc.Add(tablecanales);


                        //inicio
                        Table tdatos9 = new Table(5);
                        int[] widths9 = new int[5];
                        widths9[0] = 2;
                        widths9[1] = 50;
                        widths9[2] = 5;
                        widths9[3] = 2;
                        widths9[4] = 50;
                        tdatos9.SetWidths(widths9);

                        tdatos9.WidthPercentage = 100;
                        tdatos9.Border = 0;
                        tdatos9.BorderWidth = 0;
                        tdatos9.Padding = 2;
                        tdatos9.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);



                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Pago por derecho de tramitación", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Modalidad de pago", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        Doc.Add(tdatos9);

                        //Pago por derecho de Tramitación 

                        string tramite = "";
                        //string monto = "";

                        for (int i = 0; i < proc.TablaAsme.Count(); i++)
                        {
                            if (proc.TablaAsme[i].EsGratuito == false)
                            {


                                if (proc.Expediente.TipoExpediente == TipoExpediente.CargaInicial)
                                {

                                    if (tramite == "")
                                    {

                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].CostoUnitario != 0)
                                        {
                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';
                                            //tramite = desp + " S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   
                                        }
                                        //tramite = proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;


                                    }
                                    else
                                    {
                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].CostoUnitario != 0)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;

                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';

                                            //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   

                                        }

                                        //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                    }

                                }
                                else
                                {

                                    if (tramite == "")
                                    {
                                        string desp = "";


                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {

                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                            tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';

                                        }
                                        else
                                        {
                                            if (proc.Operacion == OperacionExpediente.Ninguna)
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }
                                            else
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }

                                        }




                                    }
                                    else
                                    {
                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                        {
                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram, Font.BOLD) + '\n';


                                        }
                                        else
                                        {
                                            if (proc.Operacion == OperacionExpediente.Ninguna)
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }
                                            else
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }

                                        }
                                    }

                                }

                            }
                            else
                            {
                                List<TablaAsmeReproduccion> repro = _tablaAsmeReproduccionService.GetAll(proc.TablaAsme[i].TablaAsmeId);
                                if (tramite == "")
                                {

                                    if (proc.TablaAsme[i].Descripcion == null)
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = " ";
                                        }
                                        else
                                        {
                                            tramite = " Gratuito ";
                                        }

                                    }
                                    else
                                    {

                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = proc.TablaAsme[i].Descripcion + '\n';
                                        }
                                        else
                                        {
                                            tramite = proc.TablaAsme[i].Descripcion + '\n' + "Gratuito ";
                                        }

                                    }

                                    if (repro.Count > 0)
                                    {
                                        //tramite = "";
                                        //tramite = tramite + "\n\n Costo por Reproducción \n";

                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n";
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + "Costo por Reproducción \n";
                                        }

                                    }


                                    foreach (var rp in repro)
                                    {

                                        //if (proc.CodigoCorto == "PE123299E43")
                                        //{
                                        //    tramite = tramite + "\n";
                                        //}
                                        //else
                                        //{
                                        tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                        //}

                                    }
                                    tramite = tramite + "\n";
                                }
                                else
                                {
                                    if (proc.TablaAsme[i].Descripcion == null)
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            //tramite = tramite;
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n  Gratuito ";
                                        }

                                    }
                                    else
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n';
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + ":  Gratuito ";
                                        }

                                    }

                                    if (repro.Count > 0)
                                    {
                                        //tramite = "";
                                        //tramite = tramite + "\n\n Costo por Reproducción \n";
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n";
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + "Costo por Reproducción \n";
                                        }

                                    }

                                    foreach (var rp in repro)
                                    {
                                        //if (proc.CodigoCorto == "PE123299E43")
                                        //{
                                        //    tramite = tramite + "\n";
                                        //}
                                        //else
                                        //{
                                        tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo;
                                        //}


                                    }
                                    tramite = tramite + "\n";

                                }
                            }

                        }





                        string titulo1 = "Caja de la Entidad \n";
                        string cajaentidad = "";


                        var Efectivo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 6 && x.Checked == true).Count() > 0;
                        var Debito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 7 && x.Checked == true).Count() > 0;
                        var Credito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 8 && x.Checked == true).Count() > 0;



                        if ((bool)Efectivo)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                            }

                        }


                        if ((bool)Debito)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                            }
                        }



                        if ((bool)Credito)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                            }

                        }

                        string titulo2 = "\nOtras opciones\n";
                        string otrasopciones = "";

                        var Agencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 9 && x.Checked == true).Count() > 0;
                        var Transferencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 10 && x.Checked == true).Count() > 0;
                        var Pagalo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 11 && x.Checked == true).Count() > 0;

                        if ((bool)Agencia)
                        {


                            if (otrasopciones == "")
                            {
                                otrasopciones = "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                            }
                        }

                        if ((bool)Transferencia)
                        {
                            if (otrasopciones == "")
                            {
                                otrasopciones = "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                            }
                        }
                        if ((bool)Pagalo)
                        {

                            if (otrasopciones == "")
                            {
                                otrasopciones = "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                            }
                        }

                        RoundRectangle2 rr2 = new RoundRectangle2();
                        RoundRectangle3 rr3 = new RoundRectangle3();
                        PdfPTable table2 = new PdfPTable(2);
                        table2.TotalWidth = 480f;
                        table2.LockedWidth = true;
                        table2.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        float[] values = new float[2];
                        values[0] = 105;
                        values[1] = 100;
                        table2.SetWidths(values);


                        PdfPCell cell1 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, tramite, f),

                        };
                        table2.AddCell(cell1);


                        if (cajaentidad == "")
                        {
                            titulo1 = "";
                        }


                        if (otrasopciones == "")
                        {
                            titulo2 = "";
                        }

                        Phrase phrase = new Phrase();
                        phrase.Add(
                            new Chunk(titulo1, fontsNegrita)
                        );
                        phrase.Add(new Chunk(cajaentidad, f));
                        phrase.Add(new Chunk(titulo2, fontsNegrita));
                        phrase.Add(new Chunk(otrasopciones, f));

                        PdfPCell cell23 = new PdfPCell()
                        {
                            CellEvent = rr3,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = phrase,
                            //Phrase = new Phrase(0, tramite, f),  
                        };
                        table2.AddCell(cell23);
                        Doc.Add(table2);

                        //inicio
                        Table tdatos19 = new Table(2);
                        int[] widths19 = new int[2];
                        widths19[0] = 2;
                        widths19[1] = 100;
                        tdatos19.SetWidths(widths19);

                        tdatos19.WidthPercentage = 100;
                        tdatos19.Border = 0;
                        tdatos19.BorderWidth = 0;
                        tdatos19.Padding = 2;
                        tdatos19.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Plazo", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        Doc.Add(tdatos19);

                        PdfPTable tableplazo = new PdfPTable(1);
                        tableplazo.TotalWidth = 480f;
                        tableplazo.LockedWidth = true;
                        tableplazo.HorizontalAlignment = Element.ALIGN_JUSTIFIED;


                        string plazos = "";
                        string tplazo = "";
                        List<PlazoAtencion> lstplazo = _plazoAtencionService.GetAll(proc.ProcedimientoId);

                        if (proc.TipoPlazo == TipoPlazo.calendarios || proc.TipoPlazo == TipoPlazo.habiles)
                        {
                            tplazo = " dias " + proc.TipoPlazo;
                        }
                        else
                        {
                            tplazo = " " + proc.TipoPlazo;
                        }
                        if (lstplazo.Count() != 0)
                        {
                            plazos = proc.PlazoAtencionDes + ": " + proc.PlazoAtencion + " " + tplazo + "\n";
                            foreach (var lstplazos in lstplazo)
                            {
                                if (lstplazos.TipoPlazo == TipoPlazo.calendarios || lstplazos.TipoPlazo == TipoPlazo.habiles)
                                {
                                    tplazo = " dias " + lstplazos.TipoPlazo;
                                }
                                else
                                {
                                    tplazo = " " + lstplazos.TipoPlazo;
                                }
                                plazos = plazos + "" + lstplazos.Descripcion + ": " + lstplazos.Plazo + tplazo + "\n";

                            }
                        }
                        else
                        {
                            plazos = proc.PlazoAtencion + tplazo;
                        }

                        if (proc.PlazoAtencion == 0)
                        {
                            plazos = "";
                        }
                        PdfPCell cellplazo = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, plazos, f),
                        };


                        tableplazo.AddCell(cellplazo);
                        Doc.Add(tableplazo);




                        //inicio
                        Table tdatos11 = new Table(2);
                        int[] widths11 = new int[2];
                        widths11[0] = 2;
                        widths11[1] = 100;
                        tdatos11.SetWidths(widths11);

                        tdatos11.WidthPercentage = 100;
                        tdatos11.Border = 0;
                        tdatos11.BorderWidth = 0;
                        tdatos11.Padding = 2;
                        tdatos11.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos11.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Sedes y horarios de atención", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);

                        Doc.Add(tdatos11);

                        ////string sedehora = "";
                        ////foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                        ////{
                        ////    var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                        ////   string.Format("Lunes a Viernes de {0} a {1}. ",
                        ////           item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                        ////           item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        ////   : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                        ////           item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                        ////           item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                        ////           item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                        ////           item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                        ////           )
                        ////           : "") +
                        ////        (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                        ////           item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                        ////           item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                        ////           : "") +
                        ////            (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                        ////           item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                        ////           item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                        ////           : "");

                        ////    if (sedehora == "")
                        ////    {
                        ////        sedehora = item.Sede.Nombre + ": " + horario;
                        ////    }
                        ////    else
                        ////    {
                        ////        sedehora = sedehora + "\n" + item.Sede.Nombre + ": " + horario;
                        ////    }

                        ////}

                        //PdfPTable tablesedes = new PdfPTable(1);
                        //tablesedes.TotalWidth = 480f;
                        //tablesedes.LockedWidth = true;
                        //tablesedes.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        //PdfPCell cellsedes = new PdfPCell()
                        //{
                        //    CellEvent = rr,
                        //    Padding = 10,
                        //    BorderWidth = 0,
                        //    Phrase = new Phrase(0, sedehora, f),
                        //};

                        //tablesedes.AddCell(cellsedes);
                        //Doc.Add(tablesedes);



                        PdfPCell celdasede;
                        PdfPCell celdapdf;
                        IPdfPCellEvent roundRectangleh = new RoundedBorder85();
                        PdfPTable outertableh = new PdfPTable(1);

                        outertableh.WidthPercentage = 100;

                        PdfPTable tdatossedes = new PdfPTable(2);
                        int[] widthssedes = new int[2];
                        widthssedes[0] = 60;
                        widthssedes[1] = 100;
                        tdatossedes.SetWidths(widthssedes);

                        tdatossedes.WidthPercentage = 100;
                        //tdatossedes.Border = 0;
                        //tdatossedes.BorderWidth = 0;
                        //tdatossedes.Padding = 2;
                        tdatossedes.HorizontalAlignment = Element.ALIGN_LEFT;


                        //string sedehora = "";
                        foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                        {
                            var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                           string.Format("Lunes a Viernes de {0} a {1}. ",
                                   item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                           : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                                   item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                   item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                   item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                   item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                   )
                                   : (item.Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                                (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                                   item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                                   : "") +
                                    (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                                   item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                                   : "");


                            celdasede = new PdfPCell();
                            celdasede.Border = PdfPCell.NO_BORDER;
                            //celdasede.Leading = 10; 
                            celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                            celdasede.AddElement(fnChunk(item.Sede.Nombre, (int)Fuente.FuenteLetraNormal));
                            tdatossedes.AddCell(celdasede);

                            celdasede = new PdfPCell();
                            celdasede.Border = PdfPCell.NO_BORDER;
                            //celda.Leading = 10; 
                            celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                            celdasede.AddElement(fnChunk(horario, (int)Fuente.FuenteLetraNormal));
                            tdatossedes.AddCell(celdasede);

                        }

                        celdapdf = new PdfPCell(tdatossedes);
                        celdapdf.CellEvent = roundRectangleh;
                        celdapdf.Border = PdfPCell.NO_BORDER;
                        celdapdf.Padding = 8;

                        outertableh.AddCell(celdapdf);
                        Doc.Add(outertableh);

                        //Doc.Add(tdatossedes);




                        //inicio
                        Table tdatos12 = new Table(2);
                        int[] widths12 = new int[2];
                        widths12[0] = 2;
                        widths12[1] = 100;
                        tdatos12.SetWidths(widths12);

                        tdatos12.WidthPercentage = 100;
                        tdatos12.Border = 0;
                        tdatos12.BorderWidth = 0;
                        tdatos12.Padding = 2;
                        tdatos12.DefaultHorizontalAlignment = Element.ALIGN_LEFT;




                        //celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        //celda.Leading = 20;
                        //celda.Colspan = 2;
                        //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        //tdatos12.AddCell(celda);

                        //celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        //celda.Leading = 20;
                        //celda.Colspan = 2;
                        //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        //tdatos12.AddCell(celda);

                        //celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        //celda.Leading = 20;
                        //celda.Colspan = 2;
                        //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        //tdatos12.AddCell(celda);



                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos12.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Unidad de organización donde se presenta la documentación", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);

                        Doc.Add(tdatos12);

                        string unidad = "";

                        List<UndOrgRecepcionDocumentos> nuevo;
                        var variable = dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId).ToList();

                        if (variable.Count == 0)
                        {
                            unidad = "";
                        }
                        else
                        {
                            if (variable.Count == 1)
                            {
                                nuevo = variable[0].UndOrgRecepcionDocumentos;
                            }
                            else
                            {
                                if (variable.Count <= sededat)
                                {
                                    unidad = "";
                                }
                                else { nuevo = variable[sededat].UndOrgRecepcionDocumentos; }
                            }

                            int sededat3 = 0;
                            int sededat4 = 0;
                            List<int> oficinas = new List<int>();
                            List<long> idoficinas = new List<long>();
                            List<string> idsede = new List<string>();
                            MetaDato ofi = new MetaDato();
                            foreach (var item2 in variable)
                            {
                                var nuevo2 = variable[sededat3].UndOrgRecepcionDocumentos;
                                foreach (var item in nuevo2)
                                {
                                    try
                                    {
                                        oficinas.Add(Convert.ToInt16(item.SedeId));
                                        idoficinas.Add(item.UnidadOrganicaId);
                                        idsede.Add(item.UnidadOrganica.Nombre);
                                    }
                                    catch (Exception e)
                                    {
                                        var mensaje = "Error message: " + e.Message;

                                    }



                                }

                                sededat3 = sededat3++;

                            }

                            string nom = string.Empty;
                            int valor = 0;
                            int idvalor = 0;
                            string nomb = "";
                            foreach (var item in idoficinas.Distinct())
                            {
                                valor = 0;
                                string sedes = "";
                                foreach (var item2 in variable)
                                {
                                    try
                                    {

                                        int con = item2.UndOrgRecepcionDocumentos.Count();
                                        for (int i = 0; i < con; i++)
                                        {
                                            if (item == item2.UndOrgRecepcionDocumentos[i].UnidadOrganicaId)
                                            {

                                                sedes = sedes + ", " + item2.Sede.Nombre;
                                                valor = valor++;

                                                nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        var mensaje = "Error message: " + e.Message;

                                    }

                                }

                                //if (valor == variable.Count())
                                //{
                                //    nom = nomb + " : Todas las Sedes";

                                //    if (unidad == "")
                                //    {
                                //        unidad = nom;
                                //    }
                                //    else
                                //    {
                                //        unidad = unidad + "\n" + nom;
                                //    }

                                //}
                                //else
                                //{
                                int asd = sedes.Length;
                                nom = nomb + " : " + sedes.Substring(1, asd - 1);

                                if (unidad == "")
                                {
                                    unidad = nom;
                                }
                                else
                                {
                                    unidad = unidad + "\n" + nom;
                                }
                                //}
                                idvalor = valor++;
                                sededat4 = sededat4++;
                            }
                        }


                        PdfPTable tableunidad = new PdfPTable(1);
                        tableunidad.TotalWidth = 480f;
                        tableunidad.LockedWidth = true;
                        tableunidad.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                        PdfPCell cellunidad = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, unidad, f),
                        };

                        tableunidad.AddCell(cellunidad);
                        Doc.Add(tableunidad);

                        sededat = sededat++;

                        //inicio
                        Table tdatos13 = new Table(5);
                        int[] widths13 = new int[5];
                        widths13[0] = 2;
                        widths13[1] = 50;
                        widths13[2] = 5;
                        widths13[3] = 2;
                        widths13[4] = 50;
                        tdatos13.SetWidths(widths13);

                        tdatos13.WidthPercentage = 100;
                        tdatos13.Border = 0;
                        tdatos13.BorderWidth = 0;
                        tdatos13.Padding = 2;
                        tdatos13.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Unidad de organización responsable de aprobar la solicitud", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Consulta sobre el Servicio", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        Doc.Add(tdatos13);

                        PdfPTable table4 = new PdfPTable(2);
                        table4.TotalWidth = 480f;
                        table4.LockedWidth = true;
                        table4.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        float[] values4 = new float[2];
                        values4[0] = 105;
                        values4[1] = 100;
                        table4.SetWidths(values4);

                        //PdfPCell cell12 = new PdfPCell()
                        //{
                        //    CellEvent = rr2,
                        //    Border = 5,
                        //    Padding = 10,
                        //    BorderWidth = 0,
                        //    HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                        //    Phrase = new Phrase(0, proc.UndOrgResponsable.Nombre, f),

                        //};
                        //table4.AddCell(cell12);

                        if (proc.UndOrgResponsable != null)
                        {

                            string UndOrgResponsable;

                            UndOrgResponsable = proc.UndOrgResponsable.Nombre;

                            List<ProcedimientoUndOrgResponsable> ProcedimientoUndOrgResponsable = _ProcedimientoUndOrgResponsableService.GetAll(proc.ProcedimientoId);

                            if (ProcedimientoUndOrgResponsable.Count() != 0)
                            {
                                foreach (ProcedimientoUndOrgResponsable rec in ProcedimientoUndOrgResponsable)
                                {
                                    UndOrgResponsable = UndOrgResponsable + "\n" + _unidadOrganicaService.GetOne(rec.UndOrgResponsableId2).Nombre;
                                }

                            }


                            PdfPCell cell12 = new PdfPCell()
                            {
                                CellEvent = rr2,
                                Border = 5,
                                Padding = 8,
                                BorderWidth = 0,
                                HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                                Phrase = new Phrase(0, UndOrgResponsable, f),

                            };
                            table4.AddCell(cell12);
                        }
                        else
                        {

                            PdfPCell cell12 = new PdfPCell()
                            {
                                CellEvent = rr2,
                                Border = 5,
                                Padding = 8,
                                BorderWidth = 0,
                                HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                                Phrase = new Phrase(0, "", f),

                            };
                            table4.AddCell(cell12);
                        }









                        PdfPCell cell25 = new PdfPCell()
                        {
                            CellEvent = rr3,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, "Teléfono: " + proc.Telefono + "\n" + "Anexo: " + proc.Anexo + "\n" + "Correo: " + proc.Correo, f),
                        };
                        table4.AddCell(cell25);
                        Doc.Add(table4);


                        //inicio
                        Table tdatos16 = new Table(2);
                        int[] widths16 = new int[2];
                        widths16[0] = 2;
                        widths16[1] = 100;
                        tdatos16.SetWidths(widths16);

                        tdatos16.WidthPercentage = 100;
                        tdatos16.Border = 0;
                        tdatos16.BorderWidth = 0;
                        tdatos16.Padding = 2;
                        tdatos16.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos16.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Base legal", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);

                        Doc.Add(tdatos16);


                        /*ejem,werewrwer*/


                        //PdfPCell celdapdf;
                        //IPdfPCellEvent roundRectangleh = new RoundedBorder85();
                        //PdfPTable outertableh = new PdfPTable(1);

                        //outertableh.WidthPercentage = 100;

                        //PdfPTable tdatos4pdf = new PdfPTable(20); 


                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        ////celdapdf.CellEvent = new RoundedBorder85();
                        //celdapdf.BorderWidth = 2f;

                        //celdapdf.Colspan = 4;
                        //celdapdf.AddElement(fnChunk("Artículo	", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Colspan = 8;
                        //celdapdf.AddElement(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Colspan = 3;
                        //celdapdf.AddElement(fnChunk("Tipo", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Colspan = 3;
                        //celdapdf.AddElement(fnChunk("Número", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Colspan = 2;
                        //celdapdf.AddElement(fnChunk("Fecha ", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);



                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.BorderWidth = 2f;

                        //celdapdf.Colspan = 4;
                        //celdapdf.AddElement(fnChunk("Artículo	", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Colspan = 8;
                        //celdapdf.AddElement(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Colspan = 3;
                        //celdapdf.AddElement(fnChunk("Tipo", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Colspan = 3;
                        //celdapdf.AddElement(fnChunk("Número", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell();
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Colspan = 2;
                        //celdapdf.AddElement(fnChunk("Fecha 4254254254", (int)Fuente.FuenteNegrita));
                        //tdatos4pdf.AddCell(celdapdf);

                        //celdapdf = new PdfPCell(tdatos4pdf);
                        //celdapdf.CellEvent = roundRectangleh;
                        //celdapdf.Border = PdfPCell.NO_BORDER;
                        //celdapdf.Padding = 8;

                        //outertableh.AddCell(celdapdf);
                        //Doc.Add(outertableh);

                        /*finasdasdas**/






                        Table tdatos4 = new Table(20);
                        int[] widths = new int[20];
                        widths[0] = 30;
                        widths[1] = 100;
                        widths[2] = 100;
                        widths[3] = 100;
                        widths[4] = 100;
                        widths[5] = 100;
                        widths[6] = 100;
                        widths[7] = 100;
                        widths[8] = 100;
                        widths[9] = 100;
                        widths[10] = 100;
                        widths[11] = 100;
                        widths[12] = 100;
                        widths[13] = 100;
                        widths[14] = 100;
                        widths[15] = 100;
                        widths[16] = 100;
                        widths[17] = 100;
                        widths[18] = 100;
                        widths[19] = 100;
                        tdatos4.SetWidths(widths);

                        tdatos4.WidthPercentage = 100;
                        tdatos4.Border = 0;
                        tdatos4.BorderWidth = 0;
                        tdatos4.Padding = 2;
                        tdatos4.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 4;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Artículo	", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 3;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Tipo", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 3;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Número", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Fecha Publicación", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        int sedebase = 0;
                        for (int iii = 0; iii < dataBaseLegal.Count(); iii++)
                        {
                            if (iii == 219)
                            {
                                var ver = 0;
                            }
                            if (dataBaseLegal[iii].BaseLegalId == proc.BaseLegalId)
                            {
                                var descripcionACR = "";
                                var nomsede = "";
                                var dessede = "";
                                var numsede = "";
                                var articulosede = "";
                                var fechasede = "";
                                var valornom = dataBaseLegal.Count();
                                var valornom2 = iii;

                                if (valornom != 0)
                                {
                                    if (ProcedimientoIds[0] == 0)
                                    {
                                        if (valornom != 1 && valornom2 != 1)
                                        {
                                            if (dataBaseLegal.Count <= sedebase)
                                            {
                                                nomsede = "";
                                                dessede = "";
                                                numsede = "";
                                                articulosede = "";
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                                dessede = dataBaseLegal[iii].Descripcion;
                                                numsede = dataBaseLegal[iii].Numero;
                                                articulosede = dataBaseLegal[iii].Articulo;
                                                if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                                {
                                                    fechasede = "";
                                                }
                                                else
                                                {
                                                    fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                                }
                                            }

                                        }
                                        else
                                        {
                                            nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                            dessede = dataBaseLegal[iii].Descripcion;
                                            numsede = dataBaseLegal[iii].Numero;
                                            articulosede = dataBaseLegal[iii].Articulo;
                                            if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                            {
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                            }

                                        }

                                    }
                                    else
                                    {

                                        if (dataBaseLegal[iii].EstadoACR == "2")
                                        {
                                            descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                        }
                                        else
                                        {
                                            nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                            dessede = dataBaseLegal[iii].Descripcion;
                                            numsede = dataBaseLegal[iii].Numero;
                                            articulosede = dataBaseLegal[iii].Articulo;
                                            if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                            {
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                            }
                                        }


                                    }
                                }

                                if (valornom != 0)
                                {
                                    if (dataBaseLegal[iii].EstadoACR == "2")
                                    {
                                        celda = new Cell();
                                        celda.Leading = 16;
                                        celda.Colspan = 20;
                                        celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                    }
                                    else
                                    {
                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 4;
                                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                        celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 8;
                                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                        celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 3;
                                        celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 3;
                                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                        celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 2;
                                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                        celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                    }


                                }
                                else
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 4;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 8;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 2;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }

                                sedebase = sedebase++;

                            }
                        }

                        Doc.Add(tdatos4);

                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();

                        contpag = 1; 
                        // Doc.NewPage();

                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();
                    }
                }
                //fin grupo
            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                throw;
            }


        }
        private void GenerarPresExcCompleto(long ExpedienteId, List<long> ProcedimientoIds, PdfWriter writer)
        {

            try
            {
                pagcabhoja = pagcabhoja++;
                List<ItemIndice> lstIndice = new List<ItemIndice>();
                var expediente = _expedienteService.GetOne(ExpedienteId);
                var entidad = _entidadService.GetOne(expediente.EntidadId);

                var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
                var dataReq = _requisitoService.GetByExpediente(ExpedienteId).OrderBy(x => x.RecNum).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
                var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
                var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
                var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

                if (ProcedimientoIds[0] == 0)
                {
                    dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                    dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3).OrderBy(x => x.RecNum);
                    dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                    dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                    dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                    dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
                }

                int totalRows = 0;

                /*cUADRO DE LA CABECERA PRINCIPAL*/
                ExpedienteNorma en = new ExpedienteNorma()
                {
                    ExpedienteId = expediente.ExpedienteId
                };
                IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

                List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);

                //string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

                //Table tcab = new Table(1);
                //Cell celda;


                //cuadro total de la hoaj
                //RoundRectangle rr = new RoundRectangle();

                //PdfContentByte cb = writer.DirectContent;
                //deta grupo
                //generacion de los reportes formato tupa por procedimento
                List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
                if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
                //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
                int sededat = 0;
                int contpag = 0;
                MemoryStream stream = new MemoryStream();
                foreach (Procedimiento proc in dataProc)
                {
                    proc.TablaAsme = proc.TablaAsme.OrderBy(x => x.TablaAsmeId).ToList();
                    //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                    //cb.Stroke();

                    string tipo = "E";

                    if (proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                    {
                        tipo = proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio ? "S" : "P";
                    }
                    else if (proc.TipoProcedimiento == TipoProcedimiento.Servicio)
                    {
                        tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                    }


                    if (tipo == "S")
                    {

                        Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
                        PdfWriter writer2 = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_S" + contpag + ".pdf", FileMode.Create));
                        //PdfContentByte cb = writer.DirectContent;
                        //AdicionarCabecera(Doc, ExpedienteId);


                        //PdfContentByte cb = writer.DirectContent;


                        Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                        HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                        footer.Border = 0;
                        //footer.BorderWidthTop = 1;
                        footer.Alignment = Element.ALIGN_RIGHT;
                        Doc.Footer = footer;


                        string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

                        Table tcab = new Table(1);
                        Cell celda;

                        tcab.WidthPercentage = 100;
                        tcab.Border = 0;
                        tcab.BorderWidth = 0;
                        tcab.Padding = 2;
                        tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;
                        tcab.DefaultVerticalAlignment = Element.ALIGN_MIDDLE;

                        //inicio
                        Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                        Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                        Phrase p1 = new Phrase(chkHeader);
                        footer = new HeaderFooter(p1, false);
                        footer.Border = Rectangle.NO_BORDER;
                        footer.Alignment = Element.ALIGN_CENTER;
                        footer.BorderColor = new Color(242, 242, 242);
                        footer.BackgroundColor = new Color(242, 242, 242);
                        Doc.Header = footer;
                        //fin

                        //cuadro total de la hoaj
                        RoundRectangle rr = new RoundRectangle();


                        for (int i = 0; i < pagcabhoja; i++)
                        {
                            Doc.Open();
                        }
                        //celda = new Cell();
                        //celda.Border = 0;
                        //celda.Leading = 10;
                        //celda.BorderColor = new Color(242, 242, 242);
                        //celda.BackgroundColor = new Color(242, 242, 242);
                        //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
                        //tcab.AddCell(celda);
                        //Doc.Add(tcab);
                        ////Doc.Open();
                        PdfContentByte cb = writer2.DirectContent;
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();

                        Table tdatos41 = new Table(20);
                        int[] widths1 = new int[20];
                        widths1[0] = 30;
                        widths1[1] = 100;
                        widths1[2] = 100;
                        widths1[3] = 100;
                        widths1[4] = 100;
                        widths1[5] = 100;
                        widths1[6] = 100;
                        widths1[7] = 100;
                        widths1[8] = 100;
                        widths1[9] = 100;
                        widths1[10] = 100;
                        widths1[11] = 100;
                        widths1[12] = 100;
                        widths1[13] = 100;
                        widths1[14] = 100;
                        widths1[15] = 100;
                        widths1[16] = 100;
                        widths1[17] = 100;
                        widths1[18] = 100;
                        widths1[19] = 100;
                        tdatos41.SetWidths(widths1);

                        var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);

                        tdatos41.WidthPercentage = 100;
                        tdatos41.Border = 0;
                        tdatos41.BorderWidth = 0;
                        tdatos41.Padding = 2;
                        tdatos41.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Colspan = 8;
                        celda.Add(fnChunk("Denominación del Servicio", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 12;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("\"" + proc.Denominacion + "\"", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        if (proc.CodigoCorto != null)
                        {
                            celda.Add(fnChunk("Código: " + proc.CodigoCorto.ToUpper(), (int)Fuente.FuenteNegrita));
                        }
                        else
                        {
                            celda.Add(fnChunk("Código: ", (int)Fuente.FuenteNegrita));
                        }

                        tdatos41.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 19;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Descripción del Servicio", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        var reno = "";
                        celda.BorderColor = Color.BLACK;
                        if (proc.Renovacio.ToString() == "Si")
                        {
                            var mes = "";
                            if (proc.Plazorenovacion.ToString() == "mes1") { mes = "1 mes"; }
                            else if (proc.Plazorenovacion.ToString() == "mes2") { mes = "2 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes3") { mes = "3 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes4") { mes = "4 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes5") { mes = "5 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes6") { mes = "6 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes7") { mes = "7 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes8") { mes = "8 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes9") { mes = "9 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes10") { mes = "10 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes11") { mes = "11 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "anio1") { mes = "1 año"; }
                            else if (proc.Plazorenovacion.ToString() == "anio2") { mes = "2 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio3") { mes = "3 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio4") { mes = "4 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio5") { mes = "5 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio6") { mes = "6 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio7") { mes = "7 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio8") { mes = "8 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio9") { mes = "9 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio10") { mes = "10 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio20") { mes = "20 años"; }
                            else
                            {
                                mes = proc.Plazorenovacion.ToString();
                            }

                            reno = "\n Renovación : " + mes;

                        }

                        Doc.Add(tdatos41);

                        PdfPTable table = new PdfPTable(1);
                        table.TotalWidth = 480f;
                        table.LockedWidth = true;
                        table.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        string ARIALUNI_TFF = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "Arial.TTF");

                        BaseFont bf = BaseFont.CreateFont(ARIALUNI_TFF, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);

                        Font f = new Font(bf, 7, Font.NORMAL);
                        Font centrar = new Font(bf, 7, Font.BOLD);
                        Font fontsNegrita = FontFactory.GetFont("Arial", 7, Font.BOLD);

                        PdfPCell cell2 = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, proc.Objetivo + reno, f),
                        };

                        table.AddCell(cell2);
                        Doc.Add(table);


                        Table tdatos5 = new Table(2);
                        int[] widths5 = new int[2];
                        widths5[0] = 2;
                        widths5[1] = 100;
                        tdatos5.SetWidths(widths5);

                        tdatos5.WidthPercentage = 100;
                        tdatos5.Border = 0;
                        tdatos5.BorderWidth = 0;
                        tdatos5.Padding = 2;
                        tdatos5.DefaultHorizontalAlignment = Element.ALIGN_LEFT;


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Requisitos", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);
                        Doc.Add(tdatos5);
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();
                        //fin
                        string Generales = "";
                        int idGenerales = 1;
                        if (proc.sinnotas == 0)
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "1")
                                {
                                    if (Generales == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Generales = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                        }
                                        else
                                        {
                                            Generales = req.RecNum + ".- " + req.Nombre + "\n";
                                        }
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Generales = Generales + "\n  " + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = Generales + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }

                                    idGenerales = idGenerales++;

                                }
                            }
                        }
                        else
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "1")
                                {
                                    if (Generales == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Generales = "\n" + req.Titulo + "\n" + "        " + req.Nombre;
                                        }
                                        else
                                        {
                                            Generales = req.Nombre;
                                        }
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Generales = Generales + "\n  " + req.Titulo + "\n" + "        " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = Generales + "\n" + "        " + req.Nombre + "\n";
                                    }

                                    idGenerales = idGenerales++;

                                }
                            }

                        }
                        string Nota = "";
                        int idnota = 1;
                        var idproce = proc.ProcedimientoId;

                        if (proc.sinnotas == 0)
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "2")
                                {

                                    if (Nota == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Nota = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                        }
                                        else
                                        {
                                            Nota = req.RecNum + ".- " + req.Nombre + "\n";
                                        }
                                        //Nota = req.RecNum + ".- " + req.Nombre;
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Nota = Nota + "\n  " + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = Nota + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }

                                    idnota = idnota++;
                                }
                            }
                        }
                        else
                        {

                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "2")
                                {

                                    if (Nota == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Nota = "\n" + req.Titulo + "\n" + "        " + req.Nombre;
                                        }
                                        else
                                        {
                                            Nota = req.Nombre;
                                        }
                                        //Nota = req.RecNum + ".- " + req.Nombre;
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Nota = Nota + "\n  " + req.Titulo + "\n" + "        " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = Nota + "\n" + "        " + req.Nombre + "\n";
                                    }

                                    idnota = idnota++;
                                }
                            }
                        }
                        string nombnotas = "\nNotas:\n";

                        if (proc.sinnotas == 0)
                        {
                            if (Nota == "")
                            {
                                nombnotas = "\n";
                            }
                        }
                        else { nombnotas = ""; }

                        PdfPTable tablegeneral = new PdfPTable(1);
                        tablegeneral.TotalWidth = 480f;
                        tablegeneral.LockedWidth = true;
                        tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                        PdfPCell cellgeneral = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            //HorizontalAlignment=3,
                            VerticalAlignment = 3,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, Generales + nombnotas + Nota, f),
                        };


                        tablegeneral.AddCell(cellgeneral);
                        Doc.Add(tablegeneral);

                        //inicio
                        Table tdatos7 = new Table(2);
                        int[] widths7 = new int[2];
                        widths7[0] = 2;
                        widths7[1] = 100;
                        tdatos7.SetWidths(widths7);

                        tdatos7.WidthPercentage = 100;
                        tdatos7.Border = 0;
                        tdatos7.BorderWidth = 0;
                        tdatos7.Padding = 2;
                        tdatos7.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos7.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Formularios", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);

                        Doc.Add(tdatos7);
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();
                        string Formulario = "";
                        string FormularionNombre = "";
                        if (proc.Requisito != null || proc.Requisito.Count > 0)
                        {
                            foreach (Requisito r in proc.Requisito.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                            {

                                if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                                {
                                    foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                                    {
                                        var rut = "\n";
                                        var urlrut = "\n";
                                        if (rf.Url != null)
                                        {
                                            urlrut = "\nUrl: " + rf.Url + "\n";
                                        }
                                        if (rf.ArchivoAdjuntoId != null)
                                        {
                                            long cod = rf.ArchivoAdjuntoId.Value;
                                            var archivo = _archivoAdjuntoService.GetOne(cod);
                                            rut = "\nUbicación: " + @pathLinkarchivos + archivo.Ruta + archivo.Extension;
                                            estadoformulario = rut;
                                            if (archivo.Extension == ".pdf")
                                            {
                                                FormularionNombre = "Formulario PDF: ";
                                            }
                                            else if (archivo.Extension == ".doc" || archivo.Extension == ".docx")
                                            {
                                                FormularionNombre = "Formulario Word: ";
                                            }
                                            else
                                            {
                                                FormularionNombre = "Formulario Excel: ";
                                            }

                                        };

                                        if (Formulario == "")
                                        {
                                            Formulario = FormularionNombre + rf.Nombre + rut + urlrut;
                                        }
                                        else
                                        {
                                            Formulario = Formulario + "\n" + FormularionNombre + rf.Nombre + rut + urlrut;
                                        }

                                    }
                                }
                            }
                        }

                        PdfPTable tableformulario = new PdfPTable(1);
                        tableformulario.TotalWidth = 480f;
                        tableformulario.LockedWidth = true;
                        tableformulario.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        PdfPCell cellformulario = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, Formulario, f),
                        };

                        tableformulario.AddCell(cellformulario);
                        Doc.Add(tableformulario);



                        //inicio
                        Table tdatos8 = new Table(2);
                        int[] widths8 = new int[2];
                        widths8[0] = 2;
                        widths8[1] = 100;
                        tdatos8.SetWidths(widths8);

                        tdatos8.WidthPercentage = 100;
                        tdatos8.Border = 0;
                        tdatos8.BorderWidth = 0;
                        tdatos8.Padding = 2;
                        tdatos8.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos8.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Canales de atención", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);

                        Doc.Add(tdatos8);


                        var oficina = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 1 && x.Checked == true).Count() > 0;
                        var virt = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 2 && x.Checked == true).Count() > 0;
                        var tel = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 3 && x.Checked == true).Count() > 0;

                        string canales = "";

                        if ((bool)oficina)
                        {

                            if (canales == "")
                            {
                                canales = "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                            }

                        }
                        if ((bool)virt)
                        {

                            if (canales == "")
                            {
                                canales = "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                            }

                        }
                        if ((bool)tel)
                        {

                            if (canales == "")
                            {
                                canales = "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                            }

                        }

                        PdfPTable tablecanales = new PdfPTable(1);
                        tablecanales.TotalWidth = 480f;
                        tablecanales.LockedWidth = true;
                        tablecanales.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        PdfPCell cellcanales = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, canales, f),
                        };

                        tablecanales.AddCell(cellcanales);
                        Doc.Add(tablecanales);


                        //inicio
                        Table tdatos9 = new Table(5);
                        int[] widths9 = new int[5];
                        widths9[0] = 2;
                        widths9[1] = 50;
                        widths9[2] = 5;
                        widths9[3] = 2;
                        widths9[4] = 50;
                        tdatos9.SetWidths(widths9);

                        tdatos9.WidthPercentage = 100;
                        tdatos9.Border = 0;
                        tdatos9.BorderWidth = 0;
                        tdatos9.Padding = 2;
                        tdatos9.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);



                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Pago por derecho de tramitación", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Modalidad de pago", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        Doc.Add(tdatos9);

                        //Pago por derecho de Tramitación 

                        string tramite = "";
                        //string monto = "";
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();
                        for (int i = 0; i < proc.TablaAsme.Count(); i++)
                        {
                            if (proc.TablaAsme[i].EsGratuito == false)
                            {


                                if (proc.Expediente.TipoExpediente == TipoExpediente.CargaInicial)
                                {

                                    if (tramite == "")
                                    {

                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].CostoUnitario != 0)
                                        {
                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';
                                            //tramite = desp + " S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   
                                        }
                                        //tramite = proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;


                                    }
                                    else
                                    {
                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].CostoUnitario != 0)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;

                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';

                                            //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   

                                        }

                                        //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                    }

                                }
                                else
                                {

                                    if (tramite == "")
                                    {
                                        string desp = "";


                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {

                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                            tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';

                                        }
                                        else
                                        {
                                            if (proc.Operacion == OperacionExpediente.Ninguna)
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }
                                            else
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }

                                        }




                                    }
                                    else
                                    {
                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                        {
                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram, Font.BOLD) + '\n';


                                        }
                                        else
                                        {
                                            if (proc.Operacion == OperacionExpediente.Ninguna)
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }
                                            else
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }

                                        }
                                    }

                                }

                            }
                            else
                            {
                                List<TablaAsmeReproduccion> repro = _tablaAsmeReproduccionService.GetAll(proc.TablaAsme[i].TablaAsmeId);
                                if (tramite == "")
                                {

                                    if (proc.TablaAsme[i].Descripcion == null)
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = " ";
                                        }
                                        else
                                        {
                                            tramite = " Gratuito ";
                                        }

                                    }
                                    else
                                    {

                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = proc.TablaAsme[i].Descripcion + '\n';
                                        }
                                        else
                                        {
                                            tramite = proc.TablaAsme[i].Descripcion + '\n' + "Gratuito ";
                                        }

                                    }

                                    if (repro.Count > 0)
                                    {
                                        //tramite = "";
                                        //tramite = tramite + "\n\n Costo por Reproducción \n";

                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n";
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + "Costo por Reproducción \n";
                                        }

                                    }


                                    foreach (var rp in repro)
                                    {

                                        //if (proc.CodigoCorto == "PE123299E43")
                                        //{
                                        //    tramite = tramite + "\n";
                                        //}
                                        //else
                                        //{
                                        tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                        //}

                                    }
                                    tramite = tramite + "\n";
                                }
                                else
                                {
                                    if (proc.TablaAsme[i].Descripcion == null)
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            //tramite = tramite;
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n  Gratuito ";
                                        }

                                    }
                                    else
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n';
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + ":  Gratuito ";
                                        }

                                    }

                                    if (repro.Count > 0)
                                    {
                                        //tramite = "";
                                        //tramite = tramite + "\n\n Costo por Reproducción \n";
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n";
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + "Costo por Reproducción \n";
                                        }

                                    }

                                    foreach (var rp in repro)
                                    {
                                        //if (proc.CodigoCorto == "PE123299E43")
                                        //{
                                        //    tramite = tramite + "\n";
                                        //}
                                        //else
                                        //{
                                        tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo;
                                        //}


                                    }
                                    tramite = tramite + "\n";

                                }
                            }

                        }





                        string titulo1 = "Caja de la Entidad \n";
                        string cajaentidad = "";


                        var Efectivo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 6 && x.Checked == true).Count() > 0;
                        var Debito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 7 && x.Checked == true).Count() > 0;
                        var Credito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 8 && x.Checked == true).Count() > 0;



                        if ((bool)Efectivo)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                            }

                        }


                        if ((bool)Debito)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                            }
                        }



                        if ((bool)Credito)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                            }

                        }

                        string titulo2 = "\nOtras opciones\n";
                        string otrasopciones = "";

                        var Agencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 9 && x.Checked == true).Count() > 0;
                        var Transferencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 10 && x.Checked == true).Count() > 0;
                        var Pagalo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 11 && x.Checked == true).Count() > 0;

                        if ((bool)Agencia)
                        {


                            if (otrasopciones == "")
                            {
                                otrasopciones = "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                            }
                        }

                        if ((bool)Transferencia)
                        {
                            if (otrasopciones == "")
                            {
                                otrasopciones = "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                            }
                        }
                        if ((bool)Pagalo)
                        {

                            if (otrasopciones == "")
                            {
                                otrasopciones = "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                            }
                        }

                        RoundRectangle2 rr2 = new RoundRectangle2();
                        RoundRectangle3 rr3 = new RoundRectangle3();
                        PdfPTable table2 = new PdfPTable(2);
                        table2.TotalWidth = 480f;
                        table2.LockedWidth = true;
                        table2.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        float[] values = new float[2];
                        values[0] = 105;
                        values[1] = 100;
                        table2.SetWidths(values);


                        PdfPCell cell1 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, tramite, f),

                        };
                        table2.AddCell(cell1);


                        if (cajaentidad == "")
                        {
                            titulo1 = "";
                        }


                        if (otrasopciones == "")
                        {
                            titulo2 = "";
                        }

                        Phrase phrase = new Phrase();
                        phrase.Add(
                            new Chunk(titulo1, fontsNegrita)
                        );
                        phrase.Add(new Chunk(cajaentidad, f));
                        phrase.Add(new Chunk(titulo2, fontsNegrita));
                        phrase.Add(new Chunk(otrasopciones, f));

                        PdfPCell cell23 = new PdfPCell()
                        {
                            CellEvent = rr3,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = phrase,
                            //Phrase = new Phrase(0, tramite, f),  
                        };
                        table2.AddCell(cell23);
                        Doc.Add(table2);

                        //inicio
                        Table tdatos19 = new Table(2);
                        int[] widths19 = new int[2];
                        widths19[0] = 2;
                        widths19[1] = 100;
                        tdatos19.SetWidths(widths19);

                        tdatos19.WidthPercentage = 100;
                        tdatos19.Border = 0;
                        tdatos19.BorderWidth = 0;
                        tdatos19.Padding = 2;
                        tdatos19.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Plazo", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        Doc.Add(tdatos19);

                        PdfPTable tableplazo = new PdfPTable(1);
                        tableplazo.TotalWidth = 480f;
                        tableplazo.LockedWidth = true;
                        tableplazo.HorizontalAlignment = Element.ALIGN_JUSTIFIED;


                        string plazos = "";
                        string tplazo = "";
                        List<PlazoAtencion> lstplazo = _plazoAtencionService.GetAll(proc.ProcedimientoId);

                        if (proc.TipoPlazo == TipoPlazo.calendarios || proc.TipoPlazo == TipoPlazo.habiles)
                        {
                            tplazo = " dias " + proc.TipoPlazo;
                        }
                        else
                        {
                            tplazo = " " + proc.TipoPlazo;
                        }
                        if (lstplazo.Count() != 0)
                        {
                            plazos = proc.PlazoAtencionDes + ": " + proc.PlazoAtencion + " " + tplazo + "\n";
                            foreach (var lstplazos in lstplazo)
                            {
                                if (lstplazos.TipoPlazo == TipoPlazo.calendarios || lstplazos.TipoPlazo == TipoPlazo.habiles)
                                {
                                    tplazo = " dias " + lstplazos.TipoPlazo;
                                }
                                else
                                {
                                    tplazo = " " + lstplazos.TipoPlazo;
                                }
                                plazos = plazos + "" + lstplazos.Descripcion + ": " + lstplazos.Plazo + tplazo + "\n";

                            }
                        }
                        else
                        {
                            plazos = proc.PlazoAtencion + tplazo;
                        }

                        PdfPCell cellplazo = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, plazos, f),
                        };

                        tableplazo.AddCell(cellplazo);
                        Doc.Add(tableplazo);




                        //inicio
                        Table tdatos11 = new Table(2);
                        int[] widths11 = new int[2];
                        widths11[0] = 2;
                        widths11[1] = 100;
                        tdatos11.SetWidths(widths11);

                        tdatos11.WidthPercentage = 100;
                        tdatos11.Border = 0;
                        tdatos11.BorderWidth = 0;
                        tdatos11.Padding = 2;
                        tdatos11.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos11.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Sedes y horarios de atención", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);

                        Doc.Add(tdatos11);



                        PdfPCell celdasede;
                        PdfPCell celdapdf;
                        IPdfPCellEvent roundRectangleh = new RoundedBorder85();
                        PdfPTable outertableh = new PdfPTable(1);

                        outertableh.WidthPercentage = 100;

                        PdfPTable tdatossedes = new PdfPTable(2);
                        int[] widthssedes = new int[2];
                        widthssedes[0] = 60;
                        widthssedes[1] = 100;
                        tdatossedes.SetWidths(widthssedes);

                        tdatossedes.WidthPercentage = 100;
                        //tdatossedes.Border = 0;
                        //tdatossedes.BorderWidth = 0;
                        //tdatossedes.Padding = 2;
                        tdatossedes.HorizontalAlignment = Element.ALIGN_LEFT;


                        //string sedehora = "";
                        foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                        {
                            var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                           string.Format("Lunes a Viernes de {0} a {1}. ",
                                   item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                           : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                                   item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                   item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                   item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                   item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                   )
                                   : (item.Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                                (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                                   item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                                   : "") +
                                    (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                                   item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                                   : "");


                            celdasede = new PdfPCell();
                            celdasede.Border = PdfPCell.NO_BORDER;
                            //celdasede.Leading = 10; 
                            celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                            celdasede.AddElement(fnChunk(item.Sede.Nombre, (int)Fuente.FuenteLetraNormal));
                            tdatossedes.AddCell(celdasede);

                            celdasede = new PdfPCell();
                            celdasede.Border = PdfPCell.NO_BORDER;
                            //celda.Leading = 10; 
                            celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                            celdasede.AddElement(fnChunk(horario, (int)Fuente.FuenteLetraNormal));
                            tdatossedes.AddCell(celdasede);

                        }

                        celdapdf = new PdfPCell(tdatossedes);
                        celdapdf.CellEvent = roundRectangleh;
                        celdapdf.Border = PdfPCell.NO_BORDER;
                        celdapdf.Padding = 8;

                        outertableh.AddCell(celdapdf);
                        Doc.Add(outertableh);

                        //Doc.Add(tdatossedes);

                        //inicio
                        Table tdatos12 = new Table(2);
                        int[] widths12 = new int[2];
                        widths12[0] = 2;
                        widths12[1] = 100;
                        tdatos12.SetWidths(widths12);

                        tdatos12.WidthPercentage = 100;
                        tdatos12.Border = 0;
                        tdatos12.BorderWidth = 0;
                        tdatos12.Padding = 2;
                        tdatos12.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos12.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Unidad de organización donde se presenta la documentación", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);

                        Doc.Add(tdatos12);

                        string unidad = "";

                        List<UndOrgRecepcionDocumentos> nuevo;
                        var variable = dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId).ToList();

                        if (variable.Count == 0)
                        {
                            unidad = "";
                        }
                        else
                        {
                            if (variable.Count == 1)
                            {
                                nuevo = variable[0].UndOrgRecepcionDocumentos;
                            }
                            else
                            {
                                if (variable.Count <= sededat)
                                {
                                    unidad = "";
                                }
                                else { nuevo = variable[sededat].UndOrgRecepcionDocumentos; }
                            }

                            int sededat3 = 0;
                            int sededat4 = 0;
                            List<int> oficinas = new List<int>();
                            List<long> idoficinas = new List<long>();
                            List<string> idsede = new List<string>();
                            MetaDato ofi = new MetaDato();
                            foreach (var item2 in variable)
                            {
                                var nuevo2 = variable[sededat3].UndOrgRecepcionDocumentos;
                                foreach (var item in nuevo2)
                                {
                                    try
                                    {
                                        oficinas.Add(Convert.ToInt16(item.SedeId));
                                        idoficinas.Add(item.UnidadOrganicaId);
                                        idsede.Add(item.UnidadOrganica.Nombre);
                                    }
                                    catch (Exception e)
                                    {
                                        var mensaje = "Error message: " + e.Message;

                                    }
                                }
                                sededat3 = sededat3++;
                            }

                            string nom = string.Empty;
                            int valor = 0;
                            int idvalor = 0;
                            string nomb = "";
                            foreach (var item in idoficinas.Distinct())
                            {
                                valor = 0;
                                string sedes = "";
                                foreach (var item2 in variable)
                                {
                                    try
                                    {

                                        int con = item2.UndOrgRecepcionDocumentos.Count();
                                        for (int i = 0; i < con; i++)
                                        {
                                            if (item == item2.UndOrgRecepcionDocumentos[i].UnidadOrganicaId)
                                            {

                                                sedes = sedes + ", " + item2.Sede.Nombre;
                                                valor = valor++;

                                                nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        var mensaje = "Error message: " + e.Message;

                                    }

                                }

                                int asd = sedes.Length;
                                nom = nomb + " : " + sedes.Substring(1, asd - 1);

                                if (unidad == "")
                                {
                                    unidad = nom;
                                }
                                else
                                {
                                    unidad = unidad + "\n" + nom;
                                }
                                //}
                                idvalor = valor++;
                                sededat4 = sededat4++;
                            }
                        }


                        PdfPTable tableunidad = new PdfPTable(1);
                        tableunidad.TotalWidth = 480f;
                        tableunidad.LockedWidth = true;
                        tableunidad.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                        PdfPCell cellunidad = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, unidad, f),
                        };

                        tableunidad.AddCell(cellunidad);
                        Doc.Add(tableunidad);

                        sededat = sededat++;

                        //inicio
                        Table tdatos13 = new Table(5);
                        int[] widths13 = new int[5];
                        widths13[0] = 2;
                        widths13[1] = 50;
                        widths13[2] = 5;
                        widths13[3] = 2;
                        widths13[4] = 50;
                        tdatos13.SetWidths(widths13);

                        tdatos13.WidthPercentage = 100;
                        tdatos13.Border = 0;
                        tdatos13.BorderWidth = 0;
                        tdatos13.Padding = 2;
                        tdatos13.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Unidad de organización responsable de aprobar la solicitud", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Consulta sobre el Servicio", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        Doc.Add(tdatos13);

                        PdfPTable table4 = new PdfPTable(2);
                        table4.TotalWidth = 480f;
                        table4.LockedWidth = true;
                        table4.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        float[] values4 = new float[2];
                        values4[0] = 105;
                        values4[1] = 100;
                        table4.SetWidths(values4);


                        if (proc.UndOrgResponsable != null)
                        {

                            string UndOrgResponsable;

                            UndOrgResponsable = proc.UndOrgResponsable.Nombre;

                            List<ProcedimientoUndOrgResponsable> ProcedimientoUndOrgResponsable = _ProcedimientoUndOrgResponsableService.GetAll(proc.ProcedimientoId);

                            if (ProcedimientoUndOrgResponsable.Count() != 0)
                            {
                                foreach (ProcedimientoUndOrgResponsable rec in ProcedimientoUndOrgResponsable)
                                {
                                    UndOrgResponsable = UndOrgResponsable + "\n" + _unidadOrganicaService.GetOne(rec.UndOrgResponsableId2).Nombre;
                                }

                            }


                            PdfPCell cell12 = new PdfPCell()
                            {
                                CellEvent = rr2,
                                Border = 5,
                                Padding = 8,
                                BorderWidth = 0,
                                HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                                Phrase = new Phrase(0, UndOrgResponsable, f),

                            };
                            table4.AddCell(cell12);
                        }
                        else
                        {

                            PdfPCell cell12 = new PdfPCell()
                            {
                                CellEvent = rr2,
                                Border = 5,
                                Padding = 8,
                                BorderWidth = 0,
                                HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                                Phrase = new Phrase(0, "", f),

                            };
                            table4.AddCell(cell12);
                        }
                        PdfPCell cell25 = new PdfPCell()
                        {
                            CellEvent = rr3,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, "Teléfono: " + proc.Telefono + "\n" + "Anexo: " + proc.Anexo + "\n" + "Correo: " + proc.Correo, f),
                        };
                        table4.AddCell(cell25);
                        Doc.Add(table4);


                        //inicio
                        Table tdatos16 = new Table(2);
                        int[] widths16 = new int[2];
                        widths16[0] = 2;
                        widths16[1] = 100;
                        tdatos16.SetWidths(widths16);

                        tdatos16.WidthPercentage = 100;
                        tdatos16.Border = 0;
                        tdatos16.BorderWidth = 0;
                        tdatos16.Padding = 2;
                        tdatos16.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos16.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Base legal", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);

                        Doc.Add(tdatos16);

                        Table tdatos4 = new Table(20);
                        int[] widths = new int[20];
                        widths[0] = 30;
                        widths[1] = 100;
                        widths[2] = 100;
                        widths[3] = 100;
                        widths[4] = 100;
                        widths[5] = 100;
                        widths[6] = 100;
                        widths[7] = 100;
                        widths[8] = 100;
                        widths[9] = 100;
                        widths[10] = 100;
                        widths[11] = 100;
                        widths[12] = 100;
                        widths[13] = 100;
                        widths[14] = 100;
                        widths[15] = 100;
                        widths[16] = 100;
                        widths[17] = 100;
                        widths[18] = 100;
                        widths[19] = 100;
                        tdatos4.SetWidths(widths);

                        tdatos4.WidthPercentage = 100;
                        tdatos4.Border = 0;
                        tdatos4.BorderWidth = 0;
                        tdatos4.Padding = 2;
                        tdatos4.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 4;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Artículo	", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 3;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Tipo", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 3;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Número", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Fecha Publicación", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        int sedebase = 0;
                        for (int iii = 0; iii < dataBaseLegal.Count(); iii++)
                        {
                            if (iii == 219)
                            {
                                var ver = 0;
                            }
                            if (dataBaseLegal[iii].BaseLegalId == proc.BaseLegalId)
                            {
                                var descripcionACR = "";
                                var nomsede = "";
                                var dessede = "";
                                var numsede = "";
                                var articulosede = "";
                                var fechasede = "";
                                var valornom = dataBaseLegal.Count();
                                var valornom2 = iii;

                                if (valornom != 0)
                                {
                                    if (ProcedimientoIds[0] == 0)
                                    {
                                        if (valornom != 1 && valornom2 != 1)
                                        {
                                            if (dataBaseLegal.Count <= sedebase)
                                            {
                                                nomsede = "";
                                                dessede = "";
                                                numsede = "";
                                                articulosede = "";
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                                dessede = dataBaseLegal[iii].Descripcion;
                                                numsede = dataBaseLegal[iii].Numero;
                                                articulosede = dataBaseLegal[iii].Articulo;
                                                if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                                {
                                                    fechasede = "";
                                                }
                                                else
                                                {
                                                    fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                                }
                                            }

                                        }
                                        else
                                        {
                                            nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                            dessede = dataBaseLegal[iii].Descripcion;
                                            numsede = dataBaseLegal[iii].Numero;
                                            articulosede = dataBaseLegal[iii].Articulo;
                                            if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                            {
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                            }

                                        }

                                    }
                                    else
                                    {

                                        if (dataBaseLegal[iii].EstadoACR == "2")
                                        {
                                            descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                        }
                                        else
                                        {
                                            nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                            dessede = dataBaseLegal[iii].Descripcion;
                                            numsede = dataBaseLegal[iii].Numero;
                                            articulosede = dataBaseLegal[iii].Articulo;
                                            if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                            {
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                            }
                                        }


                                    }
                                }

                                if (valornom != 0)
                                {
                                    if (dataBaseLegal[iii].EstadoACR == "2")
                                    {
                                        celda = new Cell();
                                        celda.Leading = 16;
                                        celda.Colspan = 20;
                                        celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                    }
                                    else
                                    {
                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 4;
                                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                        celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 8;
                                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                        celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 3;
                                        celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 3;
                                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                        celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 2;
                                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                        celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                    }


                                }
                                else
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 4;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 8;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 2;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }

                                sedebase = sedebase++;

                            }
                        }

                        Doc.Add(tdatos4);

                        //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                        //cb.Stroke();

                        //pagcabhoja = pagcabhoja + writer.PageNumber;

                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();

                        Doc.Close();
                        //contpag = contpag++; 
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();


                        var rutpag = @pathdocumentos + "Archivo" + ExpedienteId + "_S" + contpag + ".pdf";
                        PdfReader Rdpag = new PdfReader(rutpag);
                        var npag = Rdpag.NumberOfPages;

                        contpag = contpag++;
                        //Doc.NewPage();
                        pagcabhoja = pagcabhoja + npag;



                        //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                        //cb.Stroke();
                    }

                }
                //fin grupo
            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                throw;
            }


        }
        private void GenerarPresExcCompletoDiario(long ExpedienteId, List<long> ProcedimientoIds, PdfWriter writer)
        {

            try
            {
                pagcabhoja = pagcabhoja++;
                List<ItemIndice> lstIndice = new List<ItemIndice>();
                var expediente = _expedienteService.GetOne(ExpedienteId);
                var entidad = _entidadService.GetOne(expediente.EntidadId);


                var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3).OrderBy(x => x.RecNum);
                var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);


                int totalRows = 0;

                /*cUADRO DE LA CABECERA PRINCIPAL*/
                ExpedienteNorma en = new ExpedienteNorma()
                {
                    ExpedienteId = expediente.ExpedienteId
                };
                IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

                List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);

                //string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

                //Table tcab = new Table(1);
                //Cell celda;


                //cuadro total de la hoaj
                //RoundRectangle rr = new RoundRectangle();

                //PdfContentByte cb = writer.DirectContent;
                //deta grupo
                //generacion de los reportes formato tupa por procedimento
                List<Dato> categorias = _datoService.GetByTipo(TipoDato.CategoriaProcedimiento);
                if (1 == 1) dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.CategoriaProcedimientoId != null ? x.CategoriaProcedimientoId.Value : 0).ToList().OrderBy(x => x.Numero);
                //else dataProc = dataProc.OrderBy(x => x.TipoProcedimiento).ThenBy(x => x.UndOrgResponsable.Nombre).ToList().OrderBy(x => x.Numero);
                int sededat = 0;
                int contpag = 0;
                MemoryStream stream = new MemoryStream();
                foreach (Procedimiento proc in dataProc)
                {
                    proc.TablaAsme = proc.TablaAsme.OrderBy(x => x.TablaAsmeId).ToList();
                    //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                    //cb.Stroke();

                    string tipo = "E";

                    if (proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                    {
                        tipo = proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio ? "S" : "P";
                    }
                    else if (proc.TipoProcedimiento == TipoProcedimiento.Servicio)
                    {
                        tipo = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                    }


                    if (tipo == "S")
                    {

                        Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
                        PdfWriter writer2 = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_S" + contpag + ".pdf", FileMode.Create));
                        //PdfContentByte cb = writer.DirectContent;
                        //AdicionarCabecera(Doc, ExpedienteId);


                        //PdfContentByte cb = writer.DirectContent;


                        //Phrase obje = new Phrase(fnChunk("", (int)Fuente.FuenteCabFooter));
                        //HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                        //footer.Border = 0;
                        ////footer.BorderWidthTop = 1;
                        //footer.Alignment = Element.ALIGN_RIGHT;
                        //Doc.Footer = footer;


                        string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

                        Table tcab = new Table(1);
                        Cell celda;

                        tcab.WidthPercentage = 100;
                        tcab.Border = 0;
                        tcab.BorderWidth = 0;
                        tcab.Padding = 2;
                        tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;
                        tcab.DefaultVerticalAlignment = Element.ALIGN_MIDDLE;

                        //inicio
                        Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                        Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                        Phrase p1 = new Phrase(chkHeader);
                        HeaderFooter footer = new HeaderFooter(p1, false);
                        footer.Border = Rectangle.NO_BORDER;
                        footer.Alignment = Element.ALIGN_CENTER;
                        footer.BorderColor = new Color(242, 242, 242);
                        footer.BackgroundColor = new Color(242, 242, 242);
                        Doc.Header = footer;
                        //fin

                        //cuadro total de la hoaj
                        RoundRectangle rr = new RoundRectangle();


                        for (int i = 0; i < pagcabhoja; i++)
                        {
                            Doc.Open();
                        }
                        //celda = new Cell();
                        //celda.Border = 0;
                        //celda.Leading = 10;
                        //celda.BorderColor = new Color(242, 242, 242);
                        //celda.BackgroundColor = new Color(242, 242, 242);
                        //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
                        //tcab.AddCell(celda);
                        //Doc.Add(tcab);
                        ////Doc.Open();
                        PdfContentByte cb = writer2.DirectContent;
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();

                        Table tdatos41 = new Table(20);
                        int[] widths1 = new int[20];
                        widths1[0] = 30;
                        widths1[1] = 100;
                        widths1[2] = 100;
                        widths1[3] = 100;
                        widths1[4] = 100;
                        widths1[5] = 100;
                        widths1[6] = 100;
                        widths1[7] = 100;
                        widths1[8] = 100;
                        widths1[9] = 100;
                        widths1[10] = 100;
                        widths1[11] = 100;
                        widths1[12] = 100;
                        widths1[13] = 100;
                        widths1[14] = 100;
                        widths1[15] = 100;
                        widths1[16] = 100;
                        widths1[17] = 100;
                        widths1[18] = 100;
                        widths1[19] = 100;
                        tdatos41.SetWidths(widths1);

                        var cat = categorias.Single(x => x.MetaDatoId == proc.CategoriaProcedimientoId);

                        tdatos41.WidthPercentage = 100;
                        tdatos41.Border = 0;
                        tdatos41.BorderWidth = 0;
                        tdatos41.Padding = 2;
                        tdatos41.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Colspan = 8;
                        celda.Add(fnChunk("Denominación del Servicio", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 12;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("\"" + proc.Denominacion + "\"", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        if (proc.CodigoCorto != null)
                        {
                            celda.Add(fnChunk("Código: " + proc.CodigoCorto.ToUpper(), (int)Fuente.FuenteNegrita));
                        }
                        else
                        {
                            celda.Add(fnChunk("Código: ", (int)Fuente.FuenteNegrita));
                        }

                        tdatos41.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos41.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 19;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Descripción del Servicio", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 20;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos41.AddCell(celda);

                        var reno = "";
                        celda.BorderColor = Color.BLACK;
                        if (proc.Renovacio.ToString() == "Si")
                        {
                            var mes = "";
                            if (proc.Plazorenovacion.ToString() == "mes1") { mes = "1 mes"; }
                            else if (proc.Plazorenovacion.ToString() == "mes2") { mes = "2 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes3") { mes = "3 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes4") { mes = "4 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes5") { mes = "5 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes6") { mes = "6 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes7") { mes = "7 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes8") { mes = "8 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes9") { mes = "9 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes10") { mes = "10 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "mes11") { mes = "11 meses"; }
                            else if (proc.Plazorenovacion.ToString() == "anio1") { mes = "1 año"; }
                            else if (proc.Plazorenovacion.ToString() == "anio2") { mes = "2 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio3") { mes = "3 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio4") { mes = "4 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio5") { mes = "5 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio6") { mes = "6 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio7") { mes = "7 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio8") { mes = "8 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio9") { mes = "9 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio10") { mes = "10 años"; }
                            else if (proc.Plazorenovacion.ToString() == "anio20") { mes = "20 años"; }
                            else
                            {
                                mes = proc.Plazorenovacion.ToString();
                            }

                            reno = "\n Renovación : " + mes;

                        }

                        Doc.Add(tdatos41);

                        PdfPTable table = new PdfPTable(1);
                        table.TotalWidth = 480f;
                        table.LockedWidth = true;
                        table.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        string ARIALUNI_TFF = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "Arial.TTF");

                        BaseFont bf = BaseFont.CreateFont(ARIALUNI_TFF, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);

                        Font f = new Font(bf, 7, Font.NORMAL);
                        Font centrar = new Font(bf, 7, Font.BOLD);
                        Font fontsNegrita = FontFactory.GetFont("Arial", 7, Font.BOLD);

                        PdfPCell cell2 = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, proc.Objetivo + reno, f),
                        };

                        table.AddCell(cell2);
                        Doc.Add(table);


                        Table tdatos5 = new Table(2);
                        int[] widths5 = new int[2];
                        widths5[0] = 2;
                        widths5[1] = 100;
                        tdatos5.SetWidths(widths5);

                        tdatos5.WidthPercentage = 100;
                        tdatos5.Border = 0;
                        tdatos5.BorderWidth = 0;
                        tdatos5.Padding = 2;
                        tdatos5.DefaultHorizontalAlignment = Element.ALIGN_LEFT;


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Requisitos", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);
                        Doc.Add(tdatos5);
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();
                        //fin
                        string Generales = "";
                        int idGenerales = 1;
                        if (proc.sinnotas == 0)
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "1")
                                {
                                    if (Generales == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Generales = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                        }
                                        else
                                        {
                                            Generales = req.RecNum + ".- " + req.Nombre + "\n";
                                        }
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Generales = Generales + "\n  " + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = Generales + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }

                                    idGenerales = idGenerales++;

                                }
                            }
                        }
                        else
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3).OrderBy(x => x.RecNum))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "1")
                                {
                                    if (Generales == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Generales = "\n" + req.Titulo + "\n" + "        " + req.Nombre;
                                        }
                                        else
                                        {
                                            Generales = req.Nombre;
                                        }
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Generales = Generales + "\n  " + req.Titulo + "\n" + "        " + req.Nombre;
                                    }
                                    else
                                    {
                                        Generales = Generales + "\n" + "        " + req.Nombre + "\n";
                                    }

                                    idGenerales = idGenerales++;

                                }
                            }

                        }
                        string Nota = "";
                        int idnota = 1;
                        var idproce = proc.ProcedimientoId;

                        if (proc.sinnotas == 0)
                        {
                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "2")
                                {

                                    if (Nota == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Nota = "\n" + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                        }
                                        else
                                        {
                                            Nota = req.RecNum + ".- " + req.Nombre + "\n";
                                        }
                                        //Nota = req.RecNum + ".- " + req.Nombre;
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Nota = Nota + "\n  " + req.Titulo + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = Nota + "\n" + req.RecNum + ".- " + req.Nombre;
                                    }

                                    idnota = idnota++;
                                }
                            }
                        }
                        else
                        {

                            foreach (Requisito req in dataReq.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.Eliminado != 3))
                            {
                                string tiporeq = req.TipoRequisito == TipoRequisito.General ? "1" : "2";
                                if (tiporeq == "2")
                                {

                                    if (Nota == "")
                                    {
                                        if (req.EditableTitulo == 1)
                                        {
                                            Nota = "\n" + req.Titulo + "\n" + "        " + req.Nombre;
                                        }
                                        else
                                        {
                                            Nota = req.Nombre;
                                        }
                                        //Nota = req.RecNum + ".- " + req.Nombre;
                                    }
                                    else if (req.EditableTitulo == 1)
                                    {
                                        Nota = Nota + "\n  " + req.Titulo + "\n" + "        " + req.Nombre;
                                    }
                                    else
                                    {
                                        Nota = Nota + "\n" + "        " + req.Nombre + "\n";
                                    }

                                    idnota = idnota++;
                                }
                            }
                        }
                        string nombnotas = "\nNotas:\n";

                        if (proc.sinnotas == 0)
                        {
                            if (Nota == "")
                            {
                                nombnotas = "\n";
                            }
                        }
                        else { nombnotas = ""; }

                        PdfPTable tablegeneral = new PdfPTable(1);
                        tablegeneral.TotalWidth = 480f;
                        tablegeneral.LockedWidth = true;
                        tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        tablegeneral.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                        PdfPCell cellgeneral = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            //HorizontalAlignment=3,
                            VerticalAlignment = 3,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, Generales + nombnotas + Nota, f),
                        };


                        tablegeneral.AddCell(cellgeneral);
                        Doc.Add(tablegeneral);

                        //inicio
                        Table tdatos7 = new Table(2);
                        int[] widths7 = new int[2];
                        widths7[0] = 2;
                        widths7[1] = 100;
                        tdatos7.SetWidths(widths7);

                        tdatos7.WidthPercentage = 100;
                        tdatos7.Border = 0;
                        tdatos7.BorderWidth = 0;
                        tdatos7.Padding = 2;
                        tdatos7.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos7.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Formularios", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos7.AddCell(celda);

                        Doc.Add(tdatos7);
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();
                        string Formulario = "";
                        string FormularionNombre = "";
                        if (proc.Requisito != null || proc.Requisito.Count > 0)
                        {
                            foreach (Requisito r in proc.Requisito.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                            {

                                if (r.RequisitoFormulario != null || r.RequisitoFormulario.Count() > 0)
                                {
                                    foreach (RequisitoFormulario rf in r.RequisitoFormulario)
                                    {
                                        var rut = "\n";
                                        var urlrut = "\n";
                                        if (rf.Url != null)
                                        {
                                            urlrut = "\nUrl: " + rf.Url + "\n";
                                        }
                                        if (rf.ArchivoAdjuntoId != null)
                                        {
                                            long cod = rf.ArchivoAdjuntoId.Value;
                                            var archivo = _archivoAdjuntoService.GetOne(cod);
                                            rut = "\nUbicación: " + @pathLinkarchivos + archivo.Ruta + archivo.Extension;
                                            estadoformulario = rut;
                                            if (archivo.Extension == ".pdf")
                                            {
                                                FormularionNombre = "Formulario PDF: ";
                                            }
                                            else if (archivo.Extension == ".doc" || archivo.Extension == ".docx")
                                            {
                                                FormularionNombre = "Formulario Word: ";
                                            }
                                            else
                                            {
                                                FormularionNombre = "Formulario Excel: ";
                                            }

                                        };

                                        if (Formulario == "")
                                        {
                                            Formulario = FormularionNombre + rf.Nombre + rut + urlrut;
                                        }
                                        else
                                        {
                                            Formulario = Formulario + "\n" + FormularionNombre + rf.Nombre + rut + urlrut;
                                        }

                                    }
                                }
                            }
                        }

                        PdfPTable tableformulario = new PdfPTable(1);
                        tableformulario.TotalWidth = 480f;
                        tableformulario.LockedWidth = true;
                        tableformulario.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        PdfPCell cellformulario = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, Formulario, f),
                        };

                        tableformulario.AddCell(cellformulario);
                        Doc.Add(tableformulario);



                        //inicio
                        Table tdatos8 = new Table(2);
                        int[] widths8 = new int[2];
                        widths8[0] = 2;
                        widths8[1] = 100;
                        tdatos8.SetWidths(widths8);

                        tdatos8.WidthPercentage = 100;
                        tdatos8.Border = 0;
                        tdatos8.BorderWidth = 0;
                        tdatos8.Padding = 2;
                        tdatos8.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 8;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos8.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Canales de atención", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 8;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos8.AddCell(celda);

                        Doc.Add(tdatos8);


                        var oficina = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 1 && x.Checked == true).Count() > 0;
                        var virt = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 2 && x.Checked == true).Count() > 0;
                        var tel = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 3 && x.Checked == true).Count() > 0;

                        string canales = "";

                        if ((bool)oficina)
                        {

                            if (canales == "")
                            {
                                canales = "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención Presencial: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 1).Comentario ?? "" + "\n";
                            }

                        }
                        if ((bool)virt)
                        {

                            if (canales == "")
                            {
                                canales = "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención Virtual: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 2).Comentario ?? "" + "\n";
                            }

                        }
                        if ((bool)tel)
                        {

                            if (canales == "")
                            {
                                canales = "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                            }
                            else
                            {
                                canales = canales + "\n" + "Atención telefónica: " + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 3).Comentario ?? "" + "\n";
                            }

                        }

                        PdfPTable tablecanales = new PdfPTable(1);
                        tablecanales.TotalWidth = 480f;
                        tablecanales.LockedWidth = true;
                        tablecanales.HorizontalAlignment = Element.ALIGN_JUSTIFIED;

                        PdfPCell cellcanales = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, canales, f),
                        };

                        tablecanales.AddCell(cellcanales);
                        Doc.Add(tablecanales);


                        //inicio
                        Table tdatos9 = new Table(5);
                        int[] widths9 = new int[5];
                        widths9[0] = 2;
                        widths9[1] = 50;
                        widths9[2] = 5;
                        widths9[3] = 2;
                        widths9[4] = 50;
                        tdatos9.SetWidths(widths9);

                        tdatos9.WidthPercentage = 100;
                        tdatos9.Border = 0;
                        tdatos9.BorderWidth = 0;
                        tdatos9.Padding = 2;
                        tdatos9.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);



                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Pago por derecho de tramitación", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Modalidad de pago", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos9.AddCell(celda);

                        Doc.Add(tdatos9);

                        //Pago por derecho de Tramitación 

                        string tramite = "";
                        //string monto = "";
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();
                        for (int i = 0; i < proc.TablaAsme.Count(); i++)
                        {
                            if (proc.TablaAsme[i].EsGratuito == false)
                            {


                                if (proc.Expediente.TipoExpediente == TipoExpediente.CargaInicial)
                                {

                                    if (tramite == "")
                                    {

                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].CostoUnitario != 0)
                                        {
                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                            tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';
                                            //tramite = desp + " S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   
                                        }
                                        //tramite = proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;


                                    }
                                    else
                                    {
                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].CostoUnitario != 0)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;

                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';

                                            //tramite = tramite + "\n" + desp + "S/ " + string.Format("{0:0.0}", proc.TablaAsme[i].CostoUnitario) + "0";   

                                        }

                                        //tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + ": S/ " + proc.TablaAsme[i].CostoUnitario;
                                    }

                                }
                                else
                                {

                                    if (tramite == "")
                                    {
                                        string desp = "";


                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {

                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                        {

                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                            tramite = desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + '\n';

                                        }
                                        else
                                        {
                                            if (proc.Operacion == OperacionExpediente.Ninguna)
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }
                                            else
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }

                                        }




                                    }
                                    else
                                    {
                                        string desp = "";
                                        if (proc.TablaAsme[i].Descripcion != null)
                                        {
                                            desp = proc.TablaAsme[i].Descripcion;

                                        }

                                        if (proc.TablaAsme[i].DerechoTramitacion != 0)
                                        {
                                            decimal derechotram = Math.Truncate((proc.TablaAsme[i].DerechoTramitacion) * 10) / 10;

                                            tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram, Font.BOLD) + '\n';


                                        }
                                        else
                                        {
                                            if (proc.Operacion == OperacionExpediente.Ninguna)
                                            {

                                                decimal derechotram = Math.Truncate((proc.TablaAsme[i].CostoUnitario) * 10) / 10;
                                                tramite = tramite + "\n" + desp + '\n' + "Monto - S/ " + string.Format("{0:0.00}", derechotram) + "\n";
                                            }

                                        }
                                    }

                                }

                            }
                            else
                            {
                                List<TablaAsmeReproduccion> repro = _tablaAsmeReproduccionService.GetAll(proc.TablaAsme[i].TablaAsmeId);
                                if (tramite == "")
                                {

                                    if (proc.TablaAsme[i].Descripcion == null)
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = " ";
                                        }
                                        else
                                        {
                                            tramite = " Gratuito ";
                                        }

                                    }
                                    else
                                    {

                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = proc.TablaAsme[i].Descripcion + '\n';
                                        }
                                        else
                                        {
                                            tramite = proc.TablaAsme[i].Descripcion + '\n' + "Gratuito ";
                                        }

                                    }

                                    if (repro.Count > 0)
                                    {
                                        //tramite = "";
                                        //tramite = tramite + "\n\n Costo por Reproducción \n";

                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n";
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + "Costo por Reproducción \n";
                                        }

                                    }


                                    foreach (var rp in repro)
                                    {

                                        //if (proc.CodigoCorto == "PE123299E43")
                                        //{
                                        //    tramite = tramite + "\n";
                                        //}
                                        //else
                                        //{
                                        tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo + "\n";
                                        //}

                                    }
                                    tramite = tramite + "\n";
                                }
                                else
                                {
                                    if (proc.TablaAsme[i].Descripcion == null)
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            //tramite = tramite;
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n  Gratuito ";
                                        }

                                    }
                                    else
                                    {
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n';
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + proc.TablaAsme[i].Descripcion + '\n' + ":  Gratuito ";
                                        }

                                    }

                                    if (repro.Count > 0)
                                    {
                                        //tramite = "";
                                        //tramite = tramite + "\n\n Costo por Reproducción \n";
                                        if (proc.CodigoCorto == "PE123299E43" || proc.CodigoCorto == "PA128013BA" || proc.CodigoCorto == "PA19002B5F")
                                        {
                                            tramite = tramite + "\n";
                                        }
                                        else
                                        {
                                            tramite = tramite + "\n" + "Costo por Reproducción \n";
                                        }

                                    }

                                    foreach (var rp in repro)
                                    {
                                        //if (proc.CodigoCorto == "PE123299E43")
                                        //{
                                        //    tramite = tramite + "\n";
                                        //}
                                        //else
                                        //{
                                        tramite = tramite + "\n" + rp.Descripcion + '\n' + "Monto - S/ " + rp.Costo;
                                        //}


                                    }
                                    tramite = tramite + "\n";

                                }
                            }

                        }





                        string titulo1 = "Caja de la Entidad \n";
                        string cajaentidad = "";


                        var Efectivo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 6 && x.Checked == true).Count() > 0;
                        var Debito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 7 && x.Checked == true).Count() > 0;
                        var Credito = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 8 && x.Checked == true).Count() > 0;



                        if ((bool)Efectivo)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Efectivo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 6).Comentario ?? "" + '\n';
                            }

                        }


                        if ((bool)Debito)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Tarjeta de Débito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 7).Comentario ?? "" + '\n';
                            }
                        }



                        if ((bool)Credito)
                        {

                            if (cajaentidad == "")
                            {
                                cajaentidad = "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                cajaentidad = cajaentidad + "\n" + "Tarjeta de Crédito: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 8).Comentario ?? "" + '\n';
                            }

                        }

                        string titulo2 = "\nOtras opciones\n";
                        string otrasopciones = "";

                        var Agencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 9 && x.Checked == true).Count() > 0;
                        var Transferencia = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 10 && x.Checked == true).Count() > 0;
                        var Pagalo = proc.ProcedimientoDatoAdicional.Where(x => x.ProcedimientoId == proc.ProcedimientoId && x.MetaDatoId == 11 && x.Checked == true).Count() > 0;

                        if ((bool)Agencia)
                        {


                            if (otrasopciones == "")
                            {
                                otrasopciones = "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Agencia Bancaria: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 9).Comentario ?? "" + '\n';
                            }
                        }

                        if ((bool)Transferencia)
                        {
                            if (otrasopciones == "")
                            {
                                otrasopciones = "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Transferencia: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 10).Comentario ?? "" + '\n';
                            }
                        }
                        if ((bool)Pagalo)
                        {

                            if (otrasopciones == "")
                            {
                                otrasopciones = "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                            }
                            else
                            {
                                otrasopciones = otrasopciones + "\n" + "Pagalo: " + "\n" + proc.ProcedimientoDatoAdicional.First(x => x.MetaDatoId == 11).Comentario ?? "" + '\n';
                            }
                        }

                        RoundRectangle2 rr2 = new RoundRectangle2();
                        RoundRectangle3 rr3 = new RoundRectangle3();
                        PdfPTable table2 = new PdfPTable(2);
                        table2.TotalWidth = 480f;
                        table2.LockedWidth = true;
                        table2.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        float[] values = new float[2];
                        values[0] = 105;
                        values[1] = 100;
                        table2.SetWidths(values);


                        PdfPCell cell1 = new PdfPCell()
                        {
                            CellEvent = rr2,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, tramite, f),

                        };
                        table2.AddCell(cell1);


                        if (cajaentidad == "")
                        {
                            titulo1 = "";
                        }


                        if (otrasopciones == "")
                        {
                            titulo2 = "";
                        }

                        Phrase phrase = new Phrase();
                        phrase.Add(
                            new Chunk(titulo1, fontsNegrita)
                        );
                        phrase.Add(new Chunk(cajaentidad, f));
                        phrase.Add(new Chunk(titulo2, fontsNegrita));
                        phrase.Add(new Chunk(otrasopciones, f));

                        PdfPCell cell23 = new PdfPCell()
                        {
                            CellEvent = rr3,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = phrase,
                            //Phrase = new Phrase(0, tramite, f),  
                        };
                        table2.AddCell(cell23);
                        Doc.Add(table2);

                        //inicio
                        Table tdatos19 = new Table(2);
                        int[] widths19 = new int[2];
                        widths19[0] = 2;
                        widths19[1] = 100;
                        tdatos19.SetWidths(widths19);

                        tdatos19.WidthPercentage = 100;
                        tdatos19.Border = 0;
                        tdatos19.BorderWidth = 0;
                        tdatos19.Padding = 2;
                        tdatos19.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Plazo", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos19.AddCell(celda);

                        Doc.Add(tdatos19);

                        PdfPTable tableplazo = new PdfPTable(1);
                        tableplazo.TotalWidth = 480f;
                        tableplazo.LockedWidth = true;
                        tableplazo.HorizontalAlignment = Element.ALIGN_JUSTIFIED;


                        string plazos = "";
                        string tplazo = "";
                        List<PlazoAtencion> lstplazo = _plazoAtencionService.GetAll(proc.ProcedimientoId);

                        if (proc.TipoPlazo == TipoPlazo.calendarios || proc.TipoPlazo == TipoPlazo.habiles)
                        {
                            tplazo = " dias " + proc.TipoPlazo;
                        }
                        else
                        {
                            tplazo = " " + proc.TipoPlazo;
                        }
                        if (lstplazo.Count() != 0)
                        {
                            plazos = proc.PlazoAtencionDes + ": " + proc.PlazoAtencion + " " + tplazo + "\n";
                            foreach (var lstplazos in lstplazo)
                            {
                                if (lstplazos.TipoPlazo == TipoPlazo.calendarios || lstplazos.TipoPlazo == TipoPlazo.habiles)
                                {
                                    tplazo = " dias " + lstplazos.TipoPlazo;
                                }
                                else
                                {
                                    tplazo = " " + lstplazos.TipoPlazo;
                                }
                                plazos = plazos + "" + lstplazos.Descripcion + ": " + lstplazos.Plazo + tplazo + "\n";

                            }
                        }
                        else
                        {
                            plazos = proc.PlazoAtencion + tplazo;
                        }

                        PdfPCell cellplazo = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, plazos, f),
                        };

                        tableplazo.AddCell(cellplazo);
                        Doc.Add(tableplazo);




                        //inicio
                        Table tdatos11 = new Table(2);
                        int[] widths11 = new int[2];
                        widths11[0] = 2;
                        widths11[1] = 100;
                        tdatos11.SetWidths(widths11);

                        tdatos11.WidthPercentage = 100;
                        tdatos11.Border = 0;
                        tdatos11.BorderWidth = 0;
                        tdatos11.Padding = 2;
                        tdatos11.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos11.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Sedes y horarios de atención", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos11.AddCell(celda);

                        Doc.Add(tdatos11);



                        PdfPCell celdasede;
                        PdfPCell celdapdf;
                        IPdfPCellEvent roundRectangleh = new RoundedBorder85();
                        PdfPTable outertableh = new PdfPTable(1);

                        outertableh.WidthPercentage = 100;

                        PdfPTable tdatossedes = new PdfPTable(2);
                        int[] widthssedes = new int[2];
                        widthssedes[0] = 60;
                        widthssedes[1] = 100;
                        tdatossedes.SetWidths(widthssedes);

                        tdatossedes.WidthPercentage = 100;
                        //tdatossedes.Border = 0;
                        //tdatossedes.BorderWidth = 0;
                        //tdatossedes.Padding = 2;
                        tdatossedes.HorizontalAlignment = Element.ALIGN_LEFT;


                        //string sedehora = "";
                        foreach (var item in dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId))
                        {
                            var horario = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                           string.Format("Lunes a Viernes de {0} a {1}. ",
                                   item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                           : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                                   item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                   item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                   item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                   item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                   )
                                   : (item.Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                                (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                                   item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                                   : "") +
                                    (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                                   item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                                   item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                                   : "");


                            celdasede = new PdfPCell();
                            celdasede.Border = PdfPCell.NO_BORDER;
                            //celdasede.Leading = 10; 
                            celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                            celdasede.AddElement(fnChunk(item.Sede.Nombre, (int)Fuente.FuenteLetraNormal));
                            tdatossedes.AddCell(celdasede);

                            celdasede = new PdfPCell();
                            celdasede.Border = PdfPCell.NO_BORDER;
                            //celda.Leading = 10; 
                            celdasede.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                            celdasede.AddElement(fnChunk(horario, (int)Fuente.FuenteLetraNormal));
                            tdatossedes.AddCell(celdasede);

                        }

                        celdapdf = new PdfPCell(tdatossedes);
                        celdapdf.CellEvent = roundRectangleh;
                        celdapdf.Border = PdfPCell.NO_BORDER;
                        celdapdf.Padding = 8;

                        outertableh.AddCell(celdapdf);
                        Doc.Add(outertableh);

                        //Doc.Add(tdatossedes);




                        //inicio
                        Table tdatos12 = new Table(2);
                        int[] widths12 = new int[2];
                        widths12[0] = 2;
                        widths12[1] = 100;
                        tdatos12.SetWidths(widths12);

                        tdatos12.WidthPercentage = 100;
                        tdatos12.Border = 0;
                        tdatos12.BorderWidth = 0;
                        tdatos12.Padding = 2;
                        tdatos12.DefaultHorizontalAlignment = Element.ALIGN_LEFT;





                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos12.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Unidad de organización donde se presenta la documentación", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos12.AddCell(celda);

                        Doc.Add(tdatos12);

                        string unidad = "";

                        List<UndOrgRecepcionDocumentos> nuevo;
                        var variable = dataSede.Where(x => x.ProcedimientoId == proc.ProcedimientoId).ToList();

                        if (variable.Count == 0)
                        {
                            unidad = "";
                        }
                        else
                        {
                            if (variable.Count == 1)
                            {
                                nuevo = variable[0].UndOrgRecepcionDocumentos;
                            }
                            else
                            {
                                if (variable.Count <= sededat)
                                {
                                    unidad = "";
                                }
                                else { nuevo = variable[sededat].UndOrgRecepcionDocumentos; }
                            }

                            int sededat3 = 0;
                            int sededat4 = 0;
                            List<int> oficinas = new List<int>();
                            List<long> idoficinas = new List<long>();
                            List<string> idsede = new List<string>();
                            MetaDato ofi = new MetaDato();
                            foreach (var item2 in variable)
                            {
                                var nuevo2 = variable[sededat3].UndOrgRecepcionDocumentos;
                                foreach (var item in nuevo2)
                                {
                                    try
                                    {
                                        oficinas.Add(Convert.ToInt16(item.SedeId));
                                        idoficinas.Add(item.UnidadOrganicaId);
                                        idsede.Add(item.UnidadOrganica.Nombre);
                                    }
                                    catch (Exception e)
                                    {
                                        var mensaje = "Error message: " + e.Message;

                                    }



                                }

                                sededat3 = sededat3++;

                            }

                            string nom = string.Empty;
                            int valor = 0;
                            int idvalor = 0;
                            string nomb = "";
                            foreach (var item in idoficinas.Distinct())
                            {
                                valor = 0;
                                string sedes = "";
                                foreach (var item2 in variable)
                                {
                                    try
                                    {

                                        int con = item2.UndOrgRecepcionDocumentos.Count();
                                        for (int i = 0; i < con; i++)
                                        {
                                            if (item == item2.UndOrgRecepcionDocumentos[i].UnidadOrganicaId)
                                            {

                                                sedes = sedes + ", " + item2.Sede.Nombre;
                                                valor = valor++;

                                                nomb = item2.UndOrgRecepcionDocumentos[i].UnidadOrganica.Nombre.ToString();
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        var mensaje = "Error message: " + e.Message;

                                    }

                                }

                                int asd = sedes.Length;
                                nom = nomb + " : " + sedes.Substring(1, asd - 1);

                                if (unidad == "")
                                {
                                    unidad = nom;
                                }
                                else
                                {
                                    unidad = unidad + "\n" + nom;
                                }
                                //}
                                idvalor = valor++;
                                sededat4 = sededat4++;
                            }
                        }


                        PdfPTable tableunidad = new PdfPTable(1);
                        tableunidad.TotalWidth = 480f;
                        tableunidad.LockedWidth = true;
                        tableunidad.HorizontalAlignment = Element.ALIGN_JUSTIFIED_ALL;

                        PdfPCell cellunidad = new PdfPCell()
                        {
                            CellEvent = rr,
                            Padding = 8,
                            BorderWidth = 0,
                            Phrase = new Phrase(0, unidad, f),
                        };

                        tableunidad.AddCell(cellunidad);
                        Doc.Add(tableunidad);

                        sededat = sededat++;

                        //inicio
                        Table tdatos13 = new Table(5);
                        int[] widths13 = new int[5];
                        widths13[0] = 2;
                        widths13[1] = 50;
                        widths13[2] = 5;
                        widths13[3] = 2;
                        widths13[4] = 50;
                        tdatos13.SetWidths(widths13);

                        tdatos13.WidthPercentage = 100;
                        tdatos13.Border = 0;
                        tdatos13.BorderWidth = 0;
                        tdatos13.Padding = 2;
                        tdatos13.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Unidad de organización responsable de aprobar la solicitud", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos13.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Consulta sobre el Servicio", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 5;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos13.AddCell(celda);

                        Doc.Add(tdatos13);

                        PdfPTable table4 = new PdfPTable(2);
                        table4.TotalWidth = 480f;
                        table4.LockedWidth = true;
                        table4.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        float[] values4 = new float[2];
                        values4[0] = 105;
                        values4[1] = 100;
                        table4.SetWidths(values4);


                        if (proc.UndOrgResponsable != null)
                        {

                            string UndOrgResponsable;

                            UndOrgResponsable = proc.UndOrgResponsable.Nombre;

                            List<ProcedimientoUndOrgResponsable> ProcedimientoUndOrgResponsable = _ProcedimientoUndOrgResponsableService.GetAll(proc.ProcedimientoId);

                            if (ProcedimientoUndOrgResponsable.Count() != 0)
                            {
                                foreach (ProcedimientoUndOrgResponsable rec in ProcedimientoUndOrgResponsable)
                                {
                                    UndOrgResponsable = UndOrgResponsable + "\n" + _unidadOrganicaService.GetOne(rec.UndOrgResponsableId2).Nombre;
                                }

                            }


                            PdfPCell cell12 = new PdfPCell()
                            {
                                CellEvent = rr2,
                                Border = 5,
                                Padding = 8,
                                BorderWidth = 0,
                                HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                                Phrase = new Phrase(0, UndOrgResponsable, f),

                            };
                            table4.AddCell(cell12);
                        }
                        else
                        {

                            PdfPCell cell12 = new PdfPCell()
                            {
                                CellEvent = rr2,
                                Border = 5,
                                Padding = 8,
                                BorderWidth = 0,
                                HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                                Phrase = new Phrase(0, "", f),

                            };
                            table4.AddCell(cell12);
                        }
                        PdfPCell cell25 = new PdfPCell()
                        {
                            CellEvent = rr3,
                            Border = 5,
                            Padding = 8,
                            BorderWidth = 0,
                            HorizontalAlignment = Element.ALIGN_JUSTIFIED,
                            Phrase = new Phrase(0, "Teléfono: " + proc.Telefono + "\n" + "Anexo: " + proc.Anexo + "\n" + "Correo: " + proc.Correo, f),
                        };
                        table4.AddCell(cell25);
                        Doc.Add(table4);


                        //inicio
                        Table tdatos16 = new Table(2);
                        int[] widths16 = new int[2];
                        widths16[0] = 2;
                        widths16[1] = 100;
                        tdatos16.SetWidths(widths16);

                        tdatos16.WidthPercentage = 100;
                        tdatos16.Border = 0;
                        tdatos16.BorderWidth = 0;
                        tdatos16.Padding = 2;
                        tdatos16.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 20;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 2f;
                        celda.Leading = 10;
                        celda.BackgroundColor = new Color(242, 242, 242);
                        tdatos16.AddCell(celda);

                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = new Color(242, 242, 242);
                        celda.BackgroundColor = new Color(242, 242, 242);
                        celda.Add(fnChunk("Base legal", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);


                        celda = new Cell();
                        celda.Border = 0;
                        celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos16.AddCell(celda);

                        Doc.Add(tdatos16);

                        Table tdatos4 = new Table(20);
                        int[] widths = new int[20];
                        widths[0] = 30;
                        widths[1] = 100;
                        widths[2] = 100;
                        widths[3] = 100;
                        widths[4] = 100;
                        widths[5] = 100;
                        widths[6] = 100;
                        widths[7] = 100;
                        widths[8] = 100;
                        widths[9] = 100;
                        widths[10] = 100;
                        widths[11] = 100;
                        widths[12] = 100;
                        widths[13] = 100;
                        widths[14] = 100;
                        widths[15] = 100;
                        widths[16] = 100;
                        widths[17] = 100;
                        widths[18] = 100;
                        widths[19] = 100;
                        tdatos4.SetWidths(widths);

                        tdatos4.WidthPercentage = 100;
                        tdatos4.Border = 0;
                        tdatos4.BorderWidth = 0;
                        tdatos4.Padding = 2;
                        tdatos4.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 4;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Artículo	", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 3;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Tipo", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 3;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Número", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        celda = new Cell();
                        //celda.Border = 0;
                        //celda.BorderWidth = 0;
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                        celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                        celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                        celda.Add(fnChunk("Fecha Publicación", (int)Fuente.FuenteNegrita));
                        tdatos4.AddCell(celda);

                        int sedebase = 0;
                        for (int iii = 0; iii < dataBaseLegal.Count(); iii++)
                        {
                            if (iii == 219)
                            {
                                var ver = 0;
                            }
                            if (dataBaseLegal[iii].BaseLegalId == proc.BaseLegalId)
                            {
                                var descripcionACR = "";
                                var nomsede = "";
                                var dessede = "";
                                var numsede = "";
                                var articulosede = "";
                                var fechasede = "";
                                var valornom = dataBaseLegal.Count();
                                var valornom2 = iii;

                                if (valornom != 0)
                                {
                                    if (ProcedimientoIds[0] == 0)
                                    {
                                        if (valornom != 1 && valornom2 != 1)
                                        {
                                            if (dataBaseLegal.Count <= sedebase)
                                            {
                                                nomsede = "";
                                                dessede = "";
                                                numsede = "";
                                                articulosede = "";
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                                dessede = dataBaseLegal[iii].Descripcion;
                                                numsede = dataBaseLegal[iii].Numero;
                                                articulosede = dataBaseLegal[iii].Articulo;
                                                if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                                {
                                                    fechasede = "";
                                                }
                                                else
                                                {
                                                    fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                                }
                                            }

                                        }
                                        else
                                        {
                                            nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                            dessede = dataBaseLegal[iii].Descripcion;
                                            numsede = dataBaseLegal[iii].Numero;
                                            articulosede = dataBaseLegal[iii].Articulo;
                                            if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                            {
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                            }

                                        }

                                    }
                                    else
                                    {

                                        if (dataBaseLegal[iii].EstadoACR == "2")
                                        {
                                            descripcionACR = dataBaseLegal[iii].DescripcionACR;

                                        }
                                        else
                                        {
                                            nomsede = dataBaseLegal[iii].TipoNorma.Nombre;
                                            dessede = dataBaseLegal[iii].Descripcion;
                                            numsede = dataBaseLegal[iii].Numero;
                                            articulosede = dataBaseLegal[iii].Articulo;
                                            if (dataBaseLegal[iii].FechaPublicacion.ToString() == "")
                                            {
                                                fechasede = "";
                                            }
                                            else
                                            {
                                                fechasede = dataBaseLegal[iii].FechaPublicacion.ToString().Substring(0, 10);
                                            }
                                        }


                                    }
                                }

                                if (valornom != 0)
                                {
                                    if (dataBaseLegal[iii].EstadoACR == "2")
                                    {
                                        celda = new Cell();
                                        celda.Leading = 16;
                                        celda.Colspan = 20;
                                        celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                    }
                                    else
                                    {
                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 4;
                                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                        celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 8;
                                        celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                        celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 3;
                                        celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 3;
                                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                        celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 2;
                                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                        celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                        tdatos4.AddCell(celda);

                                    }


                                }
                                else
                                {
                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 4;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(articulosede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 8;
                                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                    celda.Add(fnChunk(dessede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.Add(fnChunk(nomsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 3;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(numsede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                    celda = new Cell();
                                    celda.Leading = 10;
                                    celda.Colspan = 2;
                                    celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                    celda.Add(fnChunk(fechasede, (int)Fuente.FuenteLetraNormal));
                                    tdatos4.AddCell(celda);

                                }

                                sedebase = sedebase++;

                            }
                        }

                        Doc.Add(tdatos4);

                        //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                        //cb.Stroke();

                        //pagcabhoja = pagcabhoja + writer.PageNumber;

                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();

                        Doc.Close();
                        //contpag = contpag++; 
                        cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                        cb.Stroke();


                        var rutpag = @pathdocumentos + "Archivo" + ExpedienteId + "_S" + contpag + ".pdf";
                        PdfReader Rdpag = new PdfReader(rutpag);
                        var npag = Rdpag.NumberOfPages;

                        contpag = contpag++;
                        //Doc.NewPage();
                        pagcabhoja = pagcabhoja + npag;



                        //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                        //cb.Stroke();
                    }

                }
                //fin grupo
            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                throw;
            }


        }


        private void TituloForm(Document Doc, long ExpedienteId, List<long> ProcedimientoIds, string titulonom)
        {

            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);


            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = titulonom;


            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;


            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);


            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 40;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            Doc.Add(tdatos);


        }

        private void TituloFormCompleto(long ExpedienteId, List<long> ProcedimientoIds, string titulonom)
        {


            Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
            PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_tituloform.pdf", FileMode.Create));
            //PdfContentByte cb = writer.DirectContent;
            //AdicionarCabecera(Doc, ExpedienteId);
            Doc.Open();



            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);


            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = titulonom;


            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            //Table tfooter = new Table(1);
            Table tlineablanco = new Table(1);
            Cell celda;


            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);


            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 40;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            Doc.Add(tdatos);

            Doc.Close();


        }
        private void GenerarForm(Document Doc, long ExpedienteId, long id, List<long> ProcedimientoIds, int tipo)
        {


            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

            if (ProcedimientoIds[0] == 0)
            {

                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }
            List<string> Lista = new List<string>();
            string inicio = @pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf";
            string indice = @pathdocumentos + "Archivo" + ExpedienteId + "_indice.pdf";
            string tituloProce = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloProce.pdf";
            string titulopresexc = @pathdocumentos + "Archivo" + ExpedienteId + "_titulopresexc.pdf";
            string tituloform = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloform.pdf";
            string Final = @pathdocumentos + "Archivo" + ExpedienteId + "_Final.pdf";

            string tituloSede = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloSede.pdf";
            string Sedes = @pathdocumentos + "Archivo" + ExpedienteId + "_Sedes.pdf";


            Lista.Add(inicio);
            Lista.Add(indice);
            Lista.Add(tituloProce);
            int CONTEO = 0;

            foreach (Procedimiento proc in dataProc)
            {
                string tipoadmin = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                if (tipoadmin == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)
                {
                    string PAEXC = @pathdocumentos + "Archivo" + ExpedienteId + "_P" + CONTEO + ".pdf";
                    Lista.Add(PAEXC);

                    CONTEO = CONTEO++;
                }
            }


            Lista.Add(titulopresexc);
            CONTEO = 0;
            foreach (Procedimiento proc in dataProc)
            {
                string tipoproce = "E";

                if (proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                {
                    tipoproce = proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio ? "S" : "P";
                }
                else if (proc.TipoProcedimiento == TipoProcedimiento.Servicio)
                {
                    tipoproce = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                }

                if (tipoproce == "S")
                {
                    string PAEXC = @pathdocumentos + "Archivo" + ExpedienteId + "_S" + CONTEO + ".pdf";
                    Lista.Add(PAEXC);

                    CONTEO = CONTEO++;
                }
            }
            Lista.Add(tituloform);
            string nombrearchivo = "";

            string nombrearchivorepetido = "";


            List<RequisitoFormulario> lstrequisito = _AuditoriaService.GetAllListaReq(ExpedienteId);

            foreach (RequisitoFormulario pr in lstrequisito)
            {
                long cod = pr.ArchivoAdjuntoId.Value;
                var archivo = _archivoAdjuntoService.GetOne(cod);
                if (pr.Nombre != nombrearchivo)
                {
                    var rut = @path + archivo.Ruta + archivo.Extension;
                    nombrearchivo = pr.Nombre;
                    if (archivo.Extension == ".pdf")
                    {
                        if (nombrearchivo != nombrearchivorepetido)
                        {
                            Lista.Add(rut);
                            nombrearchivorepetido = nombrearchivo;
                        }

                    }
                }
            }


            Lista.Add(tituloSede);
            Lista.Add(Sedes);
            string sFileJoin = "";
            if (tipo == 1)
            {
                sFileJoin = @pathdocumentos + "TUPA" + ExpedienteId + "_" + ProcedimientoIds[0] + ".pdf";
            }
            else
            {
                sFileJoin = @pathdocumentos + "Archivo" + ExpedienteId + "_EXPORTAR.pdf";
            }


            // ‘ Nombre del documento resultante 

            FileStream fs = new FileStream(sFileJoin, FileMode.Create, FileAccess.Write, FileShare.None);

            PdfCopy copy = new PdfCopy(Doc, fs);

            Doc.Open();

            PdfReader Rd;

            int n; // ‘Número de páginas de cada pdf

            foreach (var file in Lista)
            {



                try
                {
                    Rd = new PdfReader(file);

                    n = Rd.NumberOfPages;

                    int page = 0;

                    while (page < n)
                    {
                        page += 1;

                        copy.AddPage(copy.GetImportedPage(Rd, page));
                    }

                    copy.FreeReader(Rd);

                    Rd.Close();
                }
                catch (Exception e)
                {
                    var mensaje = "Error message: " + e.Message;

                }



            }
        }
        private void GenerarFormDiario(Document Doc, long ExpedienteId, long id, List<long> ProcedimientoIds, int tipo)
        {


            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);

            if (ProcedimientoIds[0] == 0)
            {

                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }
            List<string> Lista = new List<string>();
            string inicio = @pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf";
            //string indice = @pathdocumentos + "Archivo" + ExpedienteId + "_indice.pdf";
            string tituloProce = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloProce.pdf";
            string titulopresexc = @pathdocumentos + "Archivo" + ExpedienteId + "_titulopresexc.pdf";
            string tituloform = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloform.pdf";
            string Final = @pathdocumentos + "Archivo" + ExpedienteId + "_Final.pdf";

            string tituloSede = @pathdocumentos + "Archivo" + ExpedienteId + "_tituloSede.pdf";
            string Sedes = @pathdocumentos + "Archivo" + ExpedienteId + "_Sedes.pdf";


            Lista.Add(inicio);
            //Lista.Add(indice);
            Lista.Add(tituloProce);
            int CONTEO = 0;

            foreach (Procedimiento proc in dataProc)
            {
                string tipoadmin = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                if (tipoadmin == "P" && proc.TipoProcedimiento != TipoProcedimiento.EstandarServicio)
                {
                    string PAEXC = @pathdocumentos + "Archivo" + ExpedienteId + "_P" + CONTEO + ".pdf";
                    Lista.Add(PAEXC);

                    CONTEO = CONTEO++;
                }
            }


            Lista.Add(titulopresexc);
            CONTEO = 0;
            foreach (Procedimiento proc in dataProc)
            {
                string tipoproce = "E";

                if (proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                {
                    tipoproce = proc.TipoProcedimiento == TipoProcedimiento.EstandarServicio ? "S" : "P";
                }
                else if (proc.TipoProcedimiento == TipoProcedimiento.Servicio)
                {
                    tipoproce = proc.TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                }

                if (tipoproce == "S")
                {
                    string PAEXC = @pathdocumentos + "Archivo" + ExpedienteId + "_S" + CONTEO + ".pdf";
                    Lista.Add(PAEXC);

                    CONTEO = CONTEO++;
                }
            }
            Lista.Add(tituloform);
            string nombrearchivo = "";

            string nombrearchivorepetido = "";


            List<RequisitoFormulario> lstrequisito = _AuditoriaService.GetAllListaReq(ExpedienteId);

            foreach (RequisitoFormulario pr in lstrequisito)
            {
                long cod = pr.ArchivoAdjuntoId.Value;
                var archivo = _archivoAdjuntoService.GetOne(cod);
                if (pr.Nombre != nombrearchivo)
                {
                    var rut = @path + archivo.Ruta + archivo.Extension;
                    nombrearchivo = pr.Nombre;
                    if (archivo.Extension == ".pdf")
                    {
                        if (nombrearchivo != nombrearchivorepetido)
                        {
                            Lista.Add(rut);
                            nombrearchivorepetido = nombrearchivo;
                        }

                    }
                }
            }


            Lista.Add(tituloSede);
            Lista.Add(Sedes);
            string sFileJoin = "";
            if (tipo == 1)
            {
                sFileJoin = @pathdocumentos + "TUPA" + ExpedienteId + "_" + ProcedimientoIds[0] + ".pdf";
            }
            else
            {
                sFileJoin = @pathdocumentos + "Archivo" + ExpedienteId + "_EXPORTAR.pdf";
            }


            // ‘ Nombre del documento resultante 

            FileStream fs = new FileStream(sFileJoin, FileMode.Create, FileAccess.Write, FileShare.None);

            PdfCopy copy = new PdfCopy(Doc, fs);

            Doc.Open();

            PdfReader Rd;

            int n; // ‘Número de páginas de cada pdf

            foreach (var file in Lista)
            {



                try
                {
                    Rd = new PdfReader(file);

                    n = Rd.NumberOfPages;

                    int page = 0;

                    while (page < n)
                    {
                        page += 1;

                        copy.AddPage(copy.GetImportedPage(Rd, page));
                    }

                    copy.FreeReader(Rd);

                    Rd.Close();
                }
                catch (Exception e)
                {
                    var mensaje = "Error message: " + e.Message;

                }



            }
        }
        private void UnirForm(Document Doc, long ExpedienteId, long id, List<long> ProcedimientoIds, int tipo)
        {


            List<string> Lista = new List<string>();
            string inicio = @pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf";
            string Final = @pathdocumentos + "Archivo" + ExpedienteId + "_Final.pdf";
            Lista.Add(inicio);

            string nombrearchivo = "";

            string nombrearchivorepetido = "";


            // List<RequisitoFormulario> lstrequisito = _AuditoriaService.GetAllListaReq(ExpedienteId);
            List<RequisitoFormulario> lstrequisito2 = _AuditoriaService.GetAllListaReqID(ProcedimientoIds[0]);

            foreach (RequisitoFormulario pr in lstrequisito2)
            {
                long cod = pr.ArchivoAdjuntoId.Value;
                var archivo = _archivoAdjuntoService.GetOne(cod);
                if (pr.Nombre != nombrearchivo)
                {
                    var rut = @path + archivo.Ruta + archivo.Extension;
                    nombrearchivo = pr.Nombre;
                    if (archivo.Extension == ".pdf")
                    {
                        if (nombrearchivo != nombrearchivorepetido)
                        {
                            Lista.Add(rut);
                            nombrearchivorepetido = nombrearchivo;
                        }

                    }
                }
            }

            Lista.Add(Final);
            string sFileJoin = "";
            if (tipo == 1)
            {
                sFileJoin = @pathdocumentos + "TUPA" + ExpedienteId + "_" + ProcedimientoIds[0] + ".pdf";
            }
            else
            {
                sFileJoin = @pathdocumentos + "Archivo" + ExpedienteId + "_EXPORTAR.pdf";
            }

            FileStream fs = new FileStream(sFileJoin, FileMode.Create, FileAccess.Write, FileShare.None);

            PdfCopy copy = new PdfCopy(Doc, fs);

            Doc.Open();

            PdfReader Rd;

            int n; // ‘Número de páginas de cada pdf

            foreach (var file in Lista)
            {


                try
                {
                    Rd = new PdfReader(file);

                    n = Rd.NumberOfPages;

                    int page = 0;

                    while (page < n)
                    {
                        page += 1;

                        copy.AddPage(copy.GetImportedPage(Rd, page));
                    }

                    copy.FreeReader(Rd);

                    Rd.Close();
                }
                catch (Exception e)
                {
                    var mensaje = "Error message: " + e.Message;

                }


            }

        }
        private void TituloSedes(Document Doc, long ExpedienteId, List<long> ProcedimientoIds, string nomtitulo)
        {

            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);


            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = nomtitulo;


            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            Table tlineablanco = new Table(1);
            Cell celda;



            Doc.Open();

            //inicio
            //string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            //Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
            //Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
            //Phrase p1 = new Phrase(chkHeader);
            //HeaderFooter footer2 = new HeaderFooter(p1, false);
            //footer2.Border = Rectangle.NO_BORDER;
            //footer2.Alignment = Element.ALIGN_CENTER;
            //footer2.BorderColor = new Color(242, 242, 242);
            //footer2.BackgroundColor = new Color(242, 242, 242);
            //Doc.Header = footer2;
            //fin

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);


            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 40;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);

            Doc.Add(tdatos);


        }

        private void TituloSedesCompleto(long ExpedienteId, List<long> ProcedimientoIds, string nomtitulo)
        {

            Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
            PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_tituloSede.pdf", FileMode.Create));
            //PdfContentByte cb = writer.DirectContent;
            //AdicionarCabecera(Doc, ExpedienteId);
            Doc.Open();


            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);


            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            string cadena2 = nomtitulo;


            Table tcab = new Table(1);
            Table tdatos = new Table(1);
            Table tintermedio = new Table(4);
            Table tcuerpo = new Table(4);
            Table tlineablanco = new Table(1);
            Cell celda;



            Doc.Open();

            //inicio
            //string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            //Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
            //Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
            //Phrase p1 = new Phrase(chkHeader);
            //HeaderFooter footer2 = new HeaderFooter(p1, false);
            //footer2.Border = Rectangle.NO_BORDER;
            //footer2.Alignment = Element.ALIGN_CENTER;
            //footer2.BorderColor = new Color(242, 242, 242);
            //footer2.BackgroundColor = new Color(242, 242, 242);
            //Doc.Header = footer2;
            //fin

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            //Linea en Blanco
            tlineablanco.WidthPercentage = 100;
            tlineablanco.Border = 0;
            tlineablanco.BorderWidth = 0;
            tlineablanco.Padding = 0;
            tlineablanco.Spacing = 0;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);


            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 80;
            celda.Add(fnChunk(cadena2, (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 40;
            celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
            tlineablanco.AddCell(celda);
            Doc.Add(tlineablanco);
            Doc.Add(tdatos);

            Doc.Close();


        }
        private void GenerarSedes(Document Doc, long ExpedienteId, List<long> ProcedimientoIds)
        {


            List<ItemIndice> lstIndice = new List<ItemIndice>();
            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);


            if (ProcedimientoIds[0] == 0)
            {
                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);


            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            //string cadena2 = "SECCIÓN N° 4: SEDES DE ATENCIÓN";


            Table tcab = new Table(1);
            Table tdatos = new Table(3);
            Table tlineablanco = new Table(1);
            Cell celda;

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.Padding = 4;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 10;
            celda.Colspan = 3;
            celda.Add(fnChunk("", (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("SEDES", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("DIRECCIÓN", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("HORARIO DE ATENCIÓN", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);
            var nombresede = "";



            foreach (var item in dataSede.OrderBy(x => x.SedeId).Where(x => x.Procedimiento.Estado != 3))
            {

                var canti = dataSede.OrderBy(x => x.SedeId).Where(x => x.Procedimiento.ExpedienteId == expediente.ExpedienteId);
                var hora = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                    string.Format("Lunes a Viernes de {0} a {1}. ",
                            item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                            item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                    : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                            item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                            item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                            item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                            item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                            )
                            : (item.Sede.TipoTurno == "C" ? 
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        :string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                            item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                            item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                            : "") +
                (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                            item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                            item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                            : "");

                if (item.Sede.Nombre != nombresede)
                {

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(item.Sede.Nombre ?? "", (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(item.Sede.Distrito.Ruta + " - " + item.Sede.Direccion ?? "", (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(hora, (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);
                    nombresede = item.Sede.Nombre;
                }

            }

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 30;
            celda.Colspan = 3;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk("", (int)Fuente.FuenteLetraNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 20;
            celda.Colspan = 3;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            //celda.Add(fnChunk("Para mayor información puede consultar nuestra página web  (https://www.google.com.pe/)", (int)Fuente.FuenteNormal));
            celda.Add(fnChunk("", (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            Doc.Add(tdatos);


        }

        private void GenerarSedesCompleto(long ExpedienteId, List<long> ProcedimientoIds)
        {

            pagcabhoja = pagcabhoja + pagcabCompleto + 2;
            Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
            PdfWriter writer3 = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Sedes.pdf", FileMode.Create));
            //AdicionarCabecera(Doc, ExpedienteId);


            //PdfContentByte cb = writer.DirectContent;
            Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
            HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
            footer.Border = 0;
            //footer.BorderWidthTop = 1;
            footer.Alignment = Element.ALIGN_RIGHT;
            Doc.Footer = footer;



            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            for (int i = 0; i < pagcabhoja; i++)
            {
                Doc.Open();
            }
            //inicio
            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

            //string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
            Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
            Phrase p1 = new Phrase(chkHeader);
            HeaderFooter footer2 = new HeaderFooter(p1, false);
            footer2.Border = Rectangle.NO_BORDER;
            footer2.Alignment = Element.ALIGN_CENTER;
            footer2.BorderColor = new Color(242, 242, 242);
            footer2.BackgroundColor = new Color(242, 242, 242);
            Doc.Header = footer2;
            //fin

            //Doc.Open();
            PdfContentByte cb = writer3.DirectContent;
            // los costados, ancho, alto, curva
            cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
            cb.Stroke();

            List<ItemIndice> lstIndice = new List<ItemIndice>();
            //var expediente = _expedienteService.GetOne(ExpedienteId);
            //var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);


            if (ProcedimientoIds[0] == 0)
            {
                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);




            //string cadena2 = "SECCIÓN N° 4: SEDES DE ATENCIÓN";


            Table tcab = new Table(1);
            Table tdatos = new Table(3);
            Table tlineablanco = new Table(1);
            Cell celda;

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.Padding = 4;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            tcab.WidthPercentage = 100;
            tcab.Border = 0;
            tcab.BorderWidth = 0;
            tcab.Padding = 2;
            tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;
            //celda = new Cell();
            //celda.Border = 0;
            //celda.Leading = 10;
            //celda.BorderColor = new Color(242, 242, 242);
            //celda.BackgroundColor = new Color(242, 242, 242);
            //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
            //tcab.AddCell(celda);
            //Doc.Add(tcab);
            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 10;
            celda.Colspan = 3;
            celda.Add(fnChunk("", (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("SEDES", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("DIRECCIÓN", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("HORARIO DE ATENCIÓN", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);
            var nombresede = "";


            cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
            cb.Stroke();
            foreach (var item in dataSede.OrderBy(x => x.SedeId).Where(x => x.Procedimiento.Estado != 3))
            {

                var canti = dataSede.OrderBy(x => x.SedeId).Where(x => x.Procedimiento.ExpedienteId == expediente.ExpedienteId);
                var hora = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                    string.Format("Lunes a Viernes de {0} a {1}. ",
                            item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                            item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                    : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                            item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                            item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                            item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                            item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                            )
                            : (item.Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                            item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                            item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                            : "") +
                (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                            item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                            item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                            : "");

                if (item.Sede.Nombre != nombresede)
                {

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(item.Sede.Nombre ?? "", (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(item.Sede.Distrito.Ruta + " - " + item.Sede.Direccion ?? "", (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(hora, (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);
                    nombresede = item.Sede.Nombre;
                }

            }

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 30;
            celda.Colspan = 3;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk("", (int)Fuente.FuenteLetraNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 20;
            celda.Colspan = 3;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            //celda.Add(fnChunk("Para mayor información puede consultar nuestra página web  (https://www.google.com.pe/)", (int)Fuente.FuenteNormal));
            celda.Add(fnChunk("", (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            Doc.Add(tdatos);
            cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
            cb.Stroke();
            Doc.Close();
            cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
            cb.Stroke();

        }
        private void GenerarSedesCompletoDiario(long ExpedienteId, List<long> ProcedimientoIds)
        {

            pagcabhoja = pagcabhoja + pagcabCompleto + 2;
            Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
            PdfWriter writer3 = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Sedes.pdf", FileMode.Create));
            //AdicionarCabecera(Doc, ExpedienteId);


            ////PdfContentByte cb = writer.DirectContent;
            //Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
            //HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
            //footer.Border = 0;
            ////footer.BorderWidthTop = 1;
            //footer.Alignment = Element.ALIGN_RIGHT;
            //Doc.Footer = footer;



            var expediente = _expedienteService.GetOne(ExpedienteId);
            var entidad = _entidadService.GetOne(expediente.EntidadId);

            for (int i = 0; i < pagcabhoja; i++)
            {
                Doc.Open();
            }
            ////inicio
            //string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

            ////string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
            //Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
            //Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
            //Phrase p1 = new Phrase(chkHeader);
            //HeaderFooter footer2 = new HeaderFooter(p1, false);
            //footer2.Border = Rectangle.NO_BORDER;
            //footer2.Alignment = Element.ALIGN_CENTER;
            //footer2.BorderColor = new Color(242, 242, 242);
            //footer2.BackgroundColor = new Color(242, 242, 242);
            //Doc.Header = footer2;
            ////fin
            ///

            string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";

            Table tcab1 = new Table(1);

            tcab1.WidthPercentage = 100;
            tcab1.Border = 0;
            tcab1.BorderWidth = 0;
            tcab1.Padding = 2;
            tcab1.DefaultHorizontalAlignment = Element.ALIGN_CENTER;
            tcab1.DefaultVerticalAlignment = Element.ALIGN_MIDDLE;

            //inicio
            Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
            Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
            Phrase p1 = new Phrase(chkHeader);
            HeaderFooter footer = new HeaderFooter(p1, false);
            footer.Border = Rectangle.NO_BORDER;
            footer.Alignment = Element.ALIGN_CENTER;
            footer.BorderColor = new Color(242, 242, 242);
            footer.BackgroundColor = new Color(242, 242, 242);
            Doc.Header = footer;
            //fin


            //Doc.Open();
            PdfContentByte cb = writer3.DirectContent;
            // los costados, ancho, alto, curva
            cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
            cb.Stroke();

            List<ItemIndice> lstIndice = new List<ItemIndice>();
            //var expediente = _expedienteService.GetOne(ExpedienteId);
            //var entidad = _entidadService.GetOne(expediente.EntidadId);

            var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
            var dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId) && x.Eliminado != 3);
            var dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId).Where(x => ProcedimientoIds.Contains(x.ProcedimientoId));
            var dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
            var dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);


            if (ProcedimientoIds[0] == 0)
            {
                dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                dataReq = _requisitoService.GetByExpediente(ExpedienteId).Where(x => x.Eliminado != 3);
                dataAsme = _tablaAsmeService.GetByExpediente(ExpedienteId);
                dataSede = _procedimientoService.GetSedesByExpediente(ExpedienteId);
                dataBaseLegal = _baseLegalService.GetByExpediente(dataProc.Select(x => x.BaseLegalId.Value).ToList());
                dataSedesAtencion = _sedeService.GetAll(expediente.EntidadId);
            }

            int totalRows = 0;

            /*cUADRO DE LA CABECERA PRINCIPAL*/
            ExpedienteNorma en = new ExpedienteNorma()
            {
                ExpedienteId = expediente.ExpedienteId
            };
            IEnumerable<ExpedienteNorma> lstExp = _expedienteNormaService.GetAllLikePagin(en, 1, 100, ref totalRows).OrderBy(x => x.Fecha).OrderBy(x => x.ENUM_TIPO_NORMA_APROBACION);

            List<Enumerado> lstEnum = _enumeradoService.GetByTipo(TipoEnumerado.ENUM_TIPO_NORMA_APROBACION);




            //string cadena2 = "SECCIÓN N° 4: SEDES DE ATENCIÓN";


            Table tcab = new Table(1);
            Table tdatos = new Table(3);
            Table tlineablanco = new Table(1);
            Cell celda;

            //celda = new Cell();
            //celda.Border = 0;
            //celda.Leading = 10;
            //celda.BorderColor = new Color(242, 242, 242);
            //celda.BackgroundColor = new Color(242, 242, 242);
            //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
            //tcab.AddCell(celda);
            //Doc.Add(tcab1);

            tdatos.WidthPercentage = 100;
            tdatos.Border = 0;
            tdatos.BorderWidth = 0;
            tdatos.Padding = 0;
            tdatos.Spacing = 0;
            tdatos.Padding = 4;
            tdatos.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 10;
            celda.Colspan = 3;
            celda.Add(fnChunk("", (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("SEDES", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("DIRECCIÓN", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Leading = 10;
            celda.Add(fnChunk("HORARIO DE ATENCIÓN", (int)Fuente.FuenteNegrita));
            tdatos.AddCell(celda);
            var nombresede = "";


            cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
            cb.Stroke();
            foreach (var item in dataSede.OrderBy(x => x.SedeId).Where(x => x.Procedimiento.Estado != 3))
            {

                var canti = dataSede.OrderBy(x => x.SedeId).Where(x => x.Procedimiento.ExpedienteId == expediente.ExpedienteId);
                var hora = (item.Sede.EsLunesViernes ? (item.Sede.TipoTurno == "C" ?
                    string.Format("Lunes a Viernes de {0} a {1}. ",
                            item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                            item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                    : string.Format("Lunes a Viernes de {0} a {1} y de {2} a {3}. ",
                            item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                            item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                            item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                            item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                            )
                            : (item.Sede.TipoTurno == "C" ?
                        string.Format("{0} {1} {2} {3} {4} de {5} a {6}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.CorridoHorIni == null ? "-" : item.Sede.CorridoHorIni.Value.ToString("HH:mm"),
                                item.Sede.CorridoHorFin == null ? "-" : item.Sede.CorridoHorFin.Value.ToString("HH:mm"))
                        : string.Format("{0} {1} {2} {3} {4} de {5} a {6} y de {7} a {8}. ", item.Sede.EsLunes == true ? "Lunes, " : "",
                                item.Sede.EsMartes == true ? "Martes, " : "", item.Sede.EsMiercoles == true ? "Miercoles, " : "",
                                item.Sede.EsJueves == true ? "Jueves, " : "", item.Sede.EsViernes == true ? "Viernes" : "",
                                item.Sede.Turno1HorIni == null ? "-" : item.Sede.Turno1HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno1HorFin == null ? "-" : item.Sede.Turno1HorFin.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorIni == null ? "-" : item.Sede.Turno2HorIni.Value.ToString("HH:mm"),
                                item.Sede.Turno2HorFin == null ? "-" : item.Sede.Turno2HorFin.Value.ToString("HH:mm"))
                                )) +
                (item.Sede.EsSabado ? string.Format("Sábados de {0} a {1}. ",
                            item.Sede.SabadoHorIni == null ? "-" : item.Sede.SabadoHorIni.Value.ToString("HH:mm"),
                            item.Sede.SabadoHorFin == null ? "-" : item.Sede.SabadoHorFin.Value.ToString("HH:mm"))
                            : "") +
                (item.Sede.EsDomingo ? string.Format("Domingos de {0} a {1}. ",
                            item.Sede.DomingoHorIni == null ? "-" : item.Sede.DomingoHorIni.Value.ToString("HH:mm"),
                            item.Sede.DomingoHorFin == null ? "-" : item.Sede.DomingoHorFin.Value.ToString("HH:mm"))
                            : "");

                if (item.Sede.Nombre != nombresede)
                {

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(item.Sede.Nombre ?? "", (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(item.Sede.Distrito.Ruta + " - " + item.Sede.Direccion ?? "", (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.HorizontalAlignment = Element.ALIGN_LEFT;
                    celda.VerticalAlignment = Element.ALIGN_MIDDLE;
                    celda.VerticalAlignment = PdfPCell.ALIGN_MIDDLE;
                    celda.VerticalAlignment = Rectangle.ALIGN_MIDDLE;
                    celda.Add(fnChunk(hora, (int)Fuente.FuenteLetraNormal));
                    tdatos.AddCell(celda);
                    nombresede = item.Sede.Nombre;
                }

            }

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 30;
            celda.Colspan = 3;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            celda.Add(fnChunk("", (int)Fuente.FuenteLetraNormal));
            tdatos.AddCell(celda);

            celda = new Cell();
            celda.Border = 0;
            celda.BorderWidth = 0;
            celda.Leading = 20;
            celda.Colspan = 3;
            celda.HorizontalAlignment = Element.ALIGN_LEFT;
            //celda.Add(fnChunk("Para mayor información puede consultar nuestra página web  (https://www.google.com.pe/)", (int)Fuente.FuenteNormal));
            celda.Add(fnChunk("", (int)Fuente.FuenteNormal));
            tdatos.AddCell(celda);

            Doc.Add(tdatos);
            cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
            cb.Stroke();
            Doc.Close();
            cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
            cb.Stroke();

        }


        //public static void UsandoSautin()
        //{
        //    string pathPDF = @"D:\AlgunaRuta\Expediente_926.pdf";
        //    string pathDoc1 = @"D:\AlgunaRuta\archivo-spire.docx";
        //    string pathDoc2 = @"D:\AlgunaRuta\archivo-sautin.docx";

        //    SautinSoft.PdfFocus oPdfFocus = new SautinSoft.PdfFocus(); 

        //    //cargamos el pdf
        //    oPdfFocus.OpenPdf(pathPDF);
        //    oPdfFocus.Serial = "bla bla bla";

        //    //si se tiene mas de 1 pagina
        //    if (oPdfFocus.PageCount > 0)
        //    {
        //        //asignamos el tipo de documento al que convertiremos
        //        oPdfFocus.WordOptions.Format = SautinSoft.PdfFocus.CWordOptions.eWordDocument.Docx;

        //        //guardamos el dox
        //        int resultado = oPdfFocus.ToWord(pathDoc2);

        //        if (resultado == 0)
        //        {
        //            //abrimos el documento
        //            System.Diagnostics.Process.Start(pathDoc2);
        //        }
        //    }
        //}
        //public static void UsandoSpirePdf()
        //{
        //    string pathPDF = @"D:\AlgunaRuta\Expediente_926.pdf";
        //    string pathDoc1 = @"D:\AlgunaRuta\archivo-spire.docx";
        //    string pathDoc2 = @"D:\AlgunaRuta\";


        //    Spire.Pdf.PdfDocument pdf = new Spire.Pdf.PdfDocument();
        //    //cargamos el pdf
        //    pdf.LoadFromFile(pathPDF);

        //    //guardamos el docx
        //    pdf.SaveToFile(pathDoc1, FileFormat.DOCX);

        //    //abrimos el archivo
        //    System.Diagnostics.Process.Start(pathDoc1);

        //}
        public ActionResult ReporteTupa(long ExpedienteId, List<long> ProcedimientoIds, int orden)
        {
            try
            {

                //string pathPDF = @"D:\ExpedienteSutentidades\Expediente_1301.pdf";
                //string pathDoc2 = @"D:\ExpedienteSutentidades\Expediente_1301.doc";

                //var app = new Microsoft.Office.Interop.Word.Application();
                //var doc = app.Documents.Open(pathPDF);
                //doc.SaveAs2(Path.ChangeExtension(pathDoc2, ".doc"), Microsoft.Office.Interop.Word.WdSaveFormat.wdFormatDocument97);

                //UsandoSpirePdf();
                //load PDF with an instance of Document
                //SautinSoft.PdfFocus f = new SautinSoft.PdfFocus();
                //f.OpenPdf(pathPDF);
                //if (f.PageCount > 0)
                //    f.ToWord(pathDoc2);
                // TODO: Obtenga su AppSID y AppKey en https://dashboard.groupdocs.cloud (se requiere registro gratuito). 

                //Warning[] warn = null;
                //string[] streamids = null;
                string mime = string.Empty, encoding = string.Empty, extension = string.Empty;
                //byte[] byteViewer;
                //ReportViewer viewer;
                //PdfReader pdfReader;

                List<ItemIndice> lstIndice = new List<ItemIndice>();
                var expediente = _expedienteService.GetOne(ExpedienteId);
                var entidad = _entidadService.GetOne(expediente.EntidadId);
                var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);

                //if (ProcedimientoId == 0)
                if (ProcedimientoIds[0] == 0)
                {
                    dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                }
                /*else
                {
                    dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
                }*/

                Document Doc = new Document(PageSize.A4, 60, 43, 58, 43);

                PdfWriter writer = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf", FileMode.Create));
                //Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                //HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                //footer.Border = 0;
                ////footer.BorderWidthTop = 1;
                //footer.Alignment = Element.ALIGN_RIGHT;
                //Doc.Footer = footer;

                //inicio
                string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
                //Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                //Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                //Phrase p1 = new Phrase(chkHeader);
                //HeaderFooter footer2 = new HeaderFooter(p1, false);
                //footer2.Border = Rectangle.NO_BORDER;
                //footer2.Alignment = Element.ALIGN_CENTER;
                //footer2.BorderColor = new Color(242, 242, 242);
                //footer2.BackgroundColor = new Color(242, 242, 242);
                //Doc.Header = footer2;
                //fin
                //AdicionarCabecera(Doc, ExpedienteId);


                //ocultar informacion cuando es individual
                //if (ProcedimientoId == 0)
                if (ProcedimientoIds[0] == 0)
                {
                    GenerarCaratula(Doc, ExpedienteId, ProcedimientoIds);

                    Doc.Close();

                    //GenerarIndice(Doc, ExpedienteId, ProcedimientoId); 
                    GenerarIndiceConteo(ExpedienteId, ProcedimientoIds);

                    //GenerarIndiceCompleto( ExpedienteId, ProcedimientoId);

                    //TituloProceAdm(Doc, ExpedienteId, ProcedimientoId);

                    TituloProceAdmCompleto(ExpedienteId, ProcedimientoIds);

                }
                else
                {
                    Doc.Open();
                }

                var pageBorderRect = new Rectangle(Doc.PageSize);
                pageBorderRect.Left += Doc.LeftMargin;
                pageBorderRect.Right -= Doc.RightMargin;
                pageBorderRect.Top -= Doc.TopMargin;
                pageBorderRect.Bottom += Doc.BottomMargin;

                //PdfContentByte cb = writer.DirectContent;
                //// los costados, ancho, alto, curva
                //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                //cb.Stroke();

                //if (ProcedimientoId != 0)
                if (ProcedimientoIds[0] != 0)
                {
                    foreach (Procedimiento proc2 in dataProc)
                    {
                        List<long> procedimientoidproc = new List<long>();
                        procedimientoidproc.Add(proc2.ProcedimientoId);
                        if (proc2.TipoProcedimiento == TipoProcedimiento.Servicio || proc2.TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                        {
                            GenerarPresExc(Doc, ExpedienteId, procedimientoidproc, writer);
                            if (estadoformulario != "")
                            {
                                TituloForm(Doc, ExpedienteId, procedimientoidproc, "FORMULARIOS");
                                Doc.NewPage();
                            }
                            IndiceConteo(ExpedienteId, ProcedimientoIds, "S");
                            //Doc.Close();
                        }
                        else
                        {
                            GenerarProceAdm(Doc, ExpedienteId, procedimientoidproc, writer);
                            if (estadoformulario != "")
                            {
                                TituloForm(Doc, ExpedienteId, procedimientoidproc, "FORMULARIOS");
                                Doc.NewPage();
                            }
                            IndiceConteo(ExpedienteId, procedimientoidproc, "P");
                            //Doc.Close();
                        }
                    }
                    Doc.Close();
                }
                else
                {
                    GenerarProceAdmCompleto(ExpedienteId, ProcedimientoIds, writer);
                    //Doc.NewPage();  

                    //TituloPresExc(Doc, ExpedienteId, ProcedimientoId);
                    TituloPresExcCompleto(ExpedienteId, ProcedimientoIds);
                    //Doc.NewPage();

                    //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                    //cb.Stroke();

                    //GenerarPresExc(Doc, ExpedienteId, ProcedimientoId, writer);
                    GenerarPresExcCompleto(ExpedienteId, ProcedimientoIds, writer);

                    //TituloForm(Doc, ExpedienteId, ProcedimientoId, "SECCIÓN N° 3: FORMULARIOS");
                    TituloFormCompleto(ExpedienteId, ProcedimientoIds, "SECCIÓN N° 3: FORMULARIOS");
                    //Doc.NewPage();

                    //Doc.Close();
                }

                //if (ProcedimientoId != 0)
                if (ProcedimientoIds[0] != 0)
                {
                    Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                    HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                    Document Doc3 = new Document(PageSize.A4, 60, 43, 58, 43);
                    PdfWriter.GetInstance(Doc3, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Final.pdf", FileMode.Create));
                    //AdicionarCabecera(Doc3, ExpedienteId);
                    for (int i = 1; i < pagcab; i++)
                    {
                        Doc3.Open();
                    }


                    //footer.Border = 0;
                    //footer.BorderWidthTop = 1;
                    footer.Alignment = Element.ALIGN_RIGHT;
                    Doc.Footer = footer;
                    ////footer.Border = 0;
                    ////footer.BorderWidthTop = 1;
                    ////footer.Alignment = Element.ALIGN_CENTER;
                    ////Doc3.Footer = footer;
                    //inicio 
                    //footer2.Border = Rectangle.NO_BORDER;
                    //footer2.Alignment = Element.ALIGN_CENTER;
                    //footer2.BorderColor = new Color(242, 242, 242);
                    //footer2.BackgroundColor = new Color(242, 242, 242);
                    //Doc3.Header = footer2;
                    //fin

                    //if (ProcedimientoId != 0)
                    if (ProcedimientoIds[0] != 0)
                    {
                        TituloSedes(Doc3, ExpedienteId, ProcedimientoIds, "SEDES DE ATENCIÓN");
                    }
                    else
                    {
                        TituloSedes(Doc3, ExpedienteId, ProcedimientoIds, "SECCIÓN N° 4: SEDES DE ATENCIÓN");
                    }
                    Doc3.NewPage();

                    //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                    //cb.Stroke();

                    GenerarSedes(Doc3, ExpedienteId, ProcedimientoIds);
                    Doc3.NewPage();
                    Doc3.Close();

                }
                else
                {

                    TituloSedesCompleto(ExpedienteId, ProcedimientoIds, "SECCIÓN N° 4: SEDES DE ATENCIÓN");

                    //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                    //cb.Stroke();

                    GenerarSedesCompleto(ExpedienteId, ProcedimientoIds);

                }
                //Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                Document Doc2 = new Document(PageSize.A4, 60, 43, 58, 43);
                //HeaderFooter footer3 = new HeaderFooter(obje, new Phrase(""));
                //footer3.Border = 0;
                //footer3.BorderWidthTop = 1;
                //footer3.Alignment = Element.ALIGN_CENTER;
                //Doc2.Footer = footer3;
                //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                //cb.Stroke();

                //if (ProcedimientoId == 0)
                if (ProcedimientoIds[0] == 0)
                {
                    GenerarIndiceCompleto(ExpedienteId, ProcedimientoIds);
                }

                //if (ProcedimientoId != 0)
                if (ProcedimientoIds[0] != 0)
                {
                    UnirForm(Doc2, ExpedienteId, expediente.EntidadId, ProcedimientoIds, 0);
                    Doc2.Close();
                }
                else
                {
                    GenerarForm(Doc2, ExpedienteId, expediente.EntidadId, ProcedimientoIds, 0);
                    Doc2.Close();
                }
                Doc.Close();

                string Nombre = "Expediente_" + ExpedienteId + ".pdf";
                string Ruta = @pathdocumentos + "Archivo" + ExpedienteId + "_EXPORTAR.pdf";
                //Response.ClearContent();
                //Response.ClearHeaders();
                //Response.ContentType = "application/ms-word";
                //Response.AddHeader("Content-Disposition", "attachment;filename=" + Nombre + "");
                //Response.WriteFile(Ruta);
                //Response.Flush();
                //Response.Close();

                return Json(new { valid = true, nombre = Nombre, ruta = Ruta }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                //Document Doc = new Document(PageSize.A4,43,43,43,43);
                //Doc.Close();
                //_log.Error(ex);
                //throw ex;
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                //Response.StatusCode = (int)HttpStatusCode.BadRequest;
                ModelState.AddModelError("", mensaje);
                return PartialView("_Error");
                //return ex.ToString();
            }
        }
        public ActionResult ReporteTupaOriginal(long ExpedienteId, int orden, List<long> ProcedimientoIds)
        {
            try
            {
                //Warning[] warn = null;
                //string[] streamids = null;
                string mime = string.Empty, encoding = string.Empty, extension = string.Empty;
                //byte[] byteViewer;
                //ReportViewer viewer;
                //PdfReader pdfReader;

                List<ItemIndice> lstIndice = new List<ItemIndice>();
                var expediente = _expedienteService.GetOne(ExpedienteId);
                var entidad = _entidadService.GetOne(expediente.EntidadId);


                var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);

                if (ProcedimientoIds[0] == 0)
                {

                    dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);

                }
                else
                {
                    dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);

                }


                //foreach (Procedimiento proc2 in dataProc)
                //{
                //    if (proc2.UndOrgResponsable == null)
                //    {
                //        String Nombrea = "No se asigno Unidad Organica Responsable";
                //        Response.Flush();
                //        Response.Close(); 
                //        return ;
                //    }
                //    if (proc2.TipoProcedimiento != TipoProcedimiento.Servicio) { 
                //    if (proc2.UndOrgReconsideracion == null)
                //    {
                //            String Nombrea = "No se asigno Unidad Organica Reconsideracion";
                //            Response.Flush();
                //        Response.Close(); 
                //            return;
                //    }
                //    }

                //}


                Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);

                PdfWriter writer = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf", FileMode.Create));
                Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                footer.Border = 0;
                //footer.BorderWidthTop = 1;
                footer.Alignment = Element.ALIGN_RIGHT;
                Doc.Footer = footer;

                //AdicionarCabecera(Doc, ExpedienteId);
                //inicio
                string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
                Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                Phrase p1 = new Phrase(chkHeader);
                HeaderFooter footer2 = new HeaderFooter(p1, false);
                footer2.Border = Rectangle.NO_BORDER;
                footer2.Alignment = Element.ALIGN_CENTER;
                footer2.BorderColor = new Color(242, 242, 242);
                footer2.BackgroundColor = new Color(242, 242, 242);
                Doc.Header = footer2;
                //fin

                Table tcab = new Table(1);
                Cell celda;

                tcab.WidthPercentage = 100;
                tcab.Border = 0;
                tcab.BorderWidth = 0;
                tcab.Padding = 2;
                tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

                //ocultar informacion cuando es individual
                if (ProcedimientoIds[0] == 0)
                {

                    GenerarCaratula(Doc, ExpedienteId, ProcedimientoIds);
                    Doc.NewPage();

                    GenerarIndice(Doc, ExpedienteId, ProcedimientoIds);
                    Doc.NewPage();
                    TituloProceAdm(Doc, ExpedienteId, ProcedimientoIds);
                    Doc.NewPage();
                }
                else
                {

                    Doc.Open();

                }
                //celda = new Cell();
                //celda.Border = 0;
                //celda.Leading = 10;
                //celda.BorderColor = new Color(242, 242, 242);
                //celda.BackgroundColor = new Color(242, 242, 242);
                //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
                //tcab.AddCell(celda);
                //Doc.Add(tcab);

                var pageBorderRect = new Rectangle(Doc.PageSize);

                pageBorderRect.Left += Doc.LeftMargin;
                pageBorderRect.Right -= Doc.RightMargin;
                pageBorderRect.Top -= Doc.TopMargin;
                pageBorderRect.Bottom += Doc.BottomMargin;



                PdfContentByte cb = writer.DirectContent;
                // los costados, ancho, alto, curva
                cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                cb.Stroke();

                if (ProcedimientoIds[0] != 0)
                {
                    foreach (Procedimiento proc2 in dataProc)
                    {
                        List<long> procedimientoidproc = new List<long>();
                        procedimientoidproc.Add(proc2.ProcedimientoId);
                        if (proc2.TipoProcedimiento == TipoProcedimiento.Servicio || proc2.TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                        {
                            GenerarPresExc(Doc, ExpedienteId, procedimientoidproc, writer);
                            if (estadoformulario != "")
                            {
                                TituloForm(Doc, ExpedienteId, procedimientoidproc, "FORMULARIOS");
                                Doc.NewPage();
                            }
                            IndiceConteo(ExpedienteId, procedimientoidproc, "S");
                            //Doc.Close();
                        }
                        else
                        {

                            GenerarProceAdm(Doc, ExpedienteId, procedimientoidproc, writer);
                            if (estadoformulario != "")
                            {
                                TituloForm(Doc, ExpedienteId, procedimientoidproc, "FORMULARIOS");
                                Doc.NewPage();
                            }
                            IndiceConteo(ExpedienteId, procedimientoidproc, "P");
                            //Doc.Close();
                        }

                    }
                    Doc.Close();


                }
                else
                {

                    GenerarProceAdm(Doc, ExpedienteId, ProcedimientoIds, writer);
                    //Doc.NewPage();  


                    TituloPresExc(Doc, ExpedienteId, ProcedimientoIds);
                    Doc.NewPage();


                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    GenerarPresExc(Doc, ExpedienteId, ProcedimientoIds, writer);


                    TituloForm(Doc, ExpedienteId, ProcedimientoIds, "SECCIÓN N° 3: FORMULARIOS");
                    Doc.NewPage();

                    Doc.Close();
                }



                Document Doc3 = new Document(PageSize.A4, 60, 43, 58, 43);
                PdfWriter.GetInstance(Doc3, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Final.pdf", FileMode.Create));
                //AdicionarCabecera(Doc3, ExpedienteId);
                for (int i = 1; i < pagcab; i++)
                {
                    Doc3.Open();
                }

                footer.Border = 0;
                footer.BorderWidthTop = 1;
                footer.Alignment = Element.ALIGN_CENTER;
                Doc3.Footer = footer;
                //inicio 
                //footer2.Border = Rectangle.NO_BORDER;
                //footer2.Alignment = Element.ALIGN_CENTER;
                //footer2.BorderColor = new Color(242, 242, 242);
                //footer2.BackgroundColor = new Color(242, 242, 242);
                //Doc3.Header = footer2;
                //fin
                if (ProcedimientoIds[0] != 0)
                {
                    TituloSedes(Doc3, ExpedienteId, ProcedimientoIds, "SEDES DE ATENCIÓN");
                }
                else
                {
                    TituloSedes(Doc3, ExpedienteId, ProcedimientoIds, "SECCIÓN N° 4: SEDES DE ATENCIÓN");
                }
                Doc3.NewPage();

                cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                cb.Stroke();

                GenerarSedes(Doc3, ExpedienteId, ProcedimientoIds);
                Doc3.NewPage();
                Doc3.Close();


                Document Doc2 = new Document(PageSize.A4, 60, 43, 58, 43);
                HeaderFooter footer3 = new HeaderFooter(obje, new Phrase(""));
                footer3.Border = 0;
                footer3.BorderWidthTop = 1;
                footer3.Alignment = Element.ALIGN_CENTER;
                Doc2.Footer = footer3;


                cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                cb.Stroke();

                if (estadoformulario != "")
                {
                    UnirForm(Doc2, ExpedienteId, expediente.EntidadId, ProcedimientoIds, 0);
                    Doc2.Close();
                }
                else
                {


                    GenerarForm(Doc2, ExpedienteId, expediente.EntidadId, ProcedimientoIds, 0);
                    Doc2.Close();
                }
                Doc.Close();


                string Nombre = "Expediente_" + ExpedienteId + ".pdf";

                string Ruta = @pathdocumentos + "Archivo" + ExpedienteId + "_EXPORTAR.pdf";
                //Response.ClearContent();
                //Response.ClearHeaders();
                //Response.ContentType = "application/ms-word";
                //Response.AddHeader("Content-Disposition", "attachment;filename=" + Nombre + "");
                //Response.WriteFile(Ruta);
                //Response.Flush();
                //Response.Close();

                return Json(new { valid = true, nombre = Nombre, ruta = Ruta }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                //Document Doc = new Document(PageSize.A4,25.25.15.15);
                //Doc.Close();
                //_log.Error(ex);
                //throw ex;
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                //Response.StatusCode = (int)HttpStatusCode.BadRequest;
                ModelState.AddModelError("", mensaje);
                return PartialView("_Error");
                //return ex.ToString();
            }
        }

        public ActionResult ReporteTupaElDiarioPeruano(long ExpedienteId, int orden, List<long> ProcedimientoIds)
        {
            try
            {


                //Warning[] warn = null;
                //string[] streamids = null;
                string mime = string.Empty, encoding = string.Empty, extension = string.Empty;
                //byte[] byteViewer;
                //ReportViewer viewer;
                //PdfReader pdfReader;

                List<ItemIndice> lstIndice = new List<ItemIndice>();
                var expediente = _expedienteService.GetOne(ExpedienteId);
                var entidad = _entidadService.GetOne(expediente.EntidadId);
                var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);

                if (ProcedimientoIds[0] == 0)
                {
                    dataProc = _procedimientoService.GetByExpediente(ExpedienteId).Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null).ToList().OrderBy(x => x.Numero);
                }
                else
                {
                    dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => ProcedimientoIds.Contains(x.ProcedimientoId)).OrderBy(x => x.Numero);
                }

                Document Doc = new Document(PageSize.A4, 60, 43, 58, 43);

                PdfWriter writer = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf", FileMode.Create));


                //inicio
                string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
                Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                Phrase p1 = new Phrase(chkHeader);
                HeaderFooter footer2 = new HeaderFooter(p1, false);
                footer2.Border = Rectangle.NO_BORDER;
                footer2.Alignment = Element.ALIGN_CENTER;
                footer2.BorderColor = new Color(242, 242, 242);
                footer2.BackgroundColor = new Color(242, 242, 242);
                Doc.Header = footer2;
                //fin
                //AdicionarCabecera(Doc, ExpedienteId);
                TituloProceAdmCompleto(ExpedienteId, ProcedimientoIds);


                var pageBorderRect = new Rectangle(Doc.PageSize);

                pageBorderRect.Left += Doc.LeftMargin;
                pageBorderRect.Right -= Doc.RightMargin;
                pageBorderRect.Top -= Doc.TopMargin;
                pageBorderRect.Bottom += Doc.BottomMargin;


                GenerarCaratula(Doc, ExpedienteId, ProcedimientoIds);

                Doc.Close();

                GenerarProceAdmCompletoDiario(ExpedienteId, ProcedimientoIds, writer);
                //Doc.NewPage();  


                //TituloPresExc(Doc, ExpedienteId, ProcedimientoId);
                TituloPresExcCompleto(ExpedienteId, ProcedimientoIds);
                //Doc.NewPage();


                //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                //cb.Stroke();

                //GenerarPresExc(Doc, ExpedienteId, ProcedimientoId, writer);
                GenerarPresExcCompletoDiario(ExpedienteId, ProcedimientoIds, writer);


                //TituloForm(Doc, ExpedienteId, ProcedimientoId, "SECCIÓN N° 3: FORMULARIOS");
                TituloFormCompleto(ExpedienteId, ProcedimientoIds, "SECCIÓN N° 3: FORMULARIOS");
                //Doc.NewPage();




                TituloSedesCompleto(ExpedienteId, ProcedimientoIds, "SECCIÓN N° 4: SEDES DE ATENCIÓN");


                GenerarSedesCompletoDiario(ExpedienteId, ProcedimientoIds);


                Document Doc2 = new Document(PageSize.A4, 60, 43, 58, 43);

                GenerarFormDiario(Doc2, ExpedienteId, expediente.EntidadId, ProcedimientoIds, 0);
                Doc2.Close();

                string Nombre = "Expediente_" + ExpedienteId + ".pdf";

                string Ruta = @pathdocumentos + "Archivo" + ExpedienteId + "_EXPORTAR.pdf";


                return Json(new { valid = true, nombre = Nombre, ruta = Ruta }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                ModelState.AddModelError("", mensaje);
                return PartialView("_Error");
            }
        }
        public ActionResult InformeTupa(long InformeId)
        {
            try
            {
                //Warning[] warn = null;
                //string[] streamids = null;
                string mime = string.Empty, encoding = string.Empty, extension = string.Empty;
                //byte[] byteViewer;
                //ReportViewer viewer;
                //PdfReader pdfReader;

                List<ItemIndice> lstIndice = new List<ItemIndice>();
                var expediente = _expedienteService.GetOne(InformeId);
                var entidad = _entidadService.GetOne(expediente.EntidadId);

                Informe objinforme = new Informe();
                objinforme = _InformeService.GetOne(InformeId);

                Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);

                PdfWriter writer = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + expediente.ExpedienteId + ".pdf", FileMode.Create));
                //AdicionarCabecera(Doc, expediente.ExpedienteId);
                //Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                //HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                //footer.Border = 0;
                ////footer.BorderWidthTop = 1;
                //footer.Alignment = Element.ALIGN_RIGHT;
                //Doc.Footer = footer;


                //inicio
                //string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
                //Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                //Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                //Phrase p1 = new Phrase(chkHeader);
                //HeaderFooter footer2 = new HeaderFooter(p1, false);
                //footer2.Border = Rectangle.NO_BORDER;
                //footer2.Alignment = Element.ALIGN_CENTER;
                //footer2.BorderColor = new Color(242, 242, 242);
                //footer2.BackgroundColor = new Color(242, 242, 242);
                //Doc.Header = footer2;
                //fin

                Doc.Open();

                //string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
                string cadena2 = "FORMATO - INFORME SGP-SUT";
                string cadena3 = "INFORMACIÓN GENERAL";
                string cadena4 = "ANTECEDENTES";
                string cadena5 = "SUSTENTO LEGAL";
                string cadena6 = "EVALUACIÓN TECNICA";
                string cadena7 = "CONCLUSIONES";
                string cadena8 = "RECOMENDACIONES";
                string cadena9 = "FIRMA DIGITAL";

                Table tcab = new Table(1);
                Table tdatos = new Table(2);
                Table titulo = new Table(1);
                Table titulo2 = new Table(1);
                Table titulo3 = new Table(1);
                Table titulo4 = new Table(1);
                Table titulo5 = new Table(1);
                Table titulo6 = new Table(1);
                Table titulo7 = new Table(1);
                Table titulo8 = new Table(1);
                //Table titulo9 = new Table(1);
                Table subtitulo = new Table(1);
                Table titulodetalle = new Table(2);
                Table tintermedio = new Table(4);
                Table tcuerpo = new Table(4);
                //Table tfooter = new Table(1);
                Table tlineablanco = new Table(1);
                Cell celda;

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 20;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);
                //Datos

                titulo.WidthPercentage = 100;
                titulo.Border = 0;
                titulo.BorderWidth = 0;
                titulo.Padding = 0;
                titulo.Spacing = 0;
                titulo.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(cadena2, (int)Fuente.FuenteSubTituloNormal));
                titulo.AddCell(celda);
                Doc.Add(titulo);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);

                //Datos

                titulo2.WidthPercentage = 100;
                titulo2.Border = 0;
                titulo2.BorderWidth = 0;
                titulo2.Padding = 0;
                titulo2.Spacing = 0;
                titulo2.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(cadena3, (int)Fuente.FuenteSubTituloNormal));
                titulo2.AddCell(celda);
                Doc.Add(titulo2);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 0;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);





                //Datos 1

                tdatos.WidthPercentage = 100;
                tdatos.Border = 0;
                tdatos.BorderWidth = 0;
                tdatos.Padding = 0;
                tdatos.Spacing = 0;
                tdatos.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 0;
                celda.Colspan = 2;
                celda.Add(fnChunk("Secretaria de Gestión Pública - Subsecretaria de Simplificación y Análisis Regulatorio", (int)Fuente.FuenteSubTituloNormal));
                tdatos.AddCell(celda);
                Doc.Add(tdatos);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 0;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);



                //Datos

                titulo3.WidthPercentage = 100;
                titulo3.Border = 0;
                titulo3.BorderWidth = 0;
                titulo3.Padding = 0;
                titulo3.Spacing = 0;
                titulo3.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(cadena4, (int)Fuente.FuenteSubTituloNormal));
                titulo3.AddCell(celda);
                Doc.Add(titulo3);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);

                //Datos

                titulo4.WidthPercentage = 100;
                titulo4.Border = 0;
                titulo4.BorderWidth = 0;
                titulo4.Padding = 0;
                titulo4.Spacing = 0;
                titulo4.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(cadena5, (int)Fuente.FuenteSubTituloNormal));
                titulo4.AddCell(celda);
                Doc.Add(titulo4);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);

                //Datos

                titulo5.WidthPercentage = 100;
                titulo5.Border = 0;
                titulo5.BorderWidth = 0;
                titulo5.Padding = 0;
                titulo5.Spacing = 0;
                titulo5.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(cadena6, (int)Fuente.FuenteSubTituloNormal));
                titulo5.AddCell(celda);
                Doc.Add(titulo5);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);


                //Datos

                titulo6.WidthPercentage = 100;
                titulo6.Border = 0;
                titulo6.BorderWidth = 0;
                titulo6.Padding = 0;
                titulo6.Spacing = 0;
                titulo6.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(cadena7, (int)Fuente.FuenteSubTituloNormal));
                titulo6.AddCell(celda);
                Doc.Add(titulo6);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);

                //Datos

                titulo7.WidthPercentage = 100;
                titulo7.Border = 0;
                titulo7.BorderWidth = 0;
                titulo7.Padding = 0;
                titulo7.Spacing = 0;
                titulo7.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(cadena8, (int)Fuente.FuenteSubTituloNormal));
                titulo7.AddCell(celda);
                Doc.Add(titulo7);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);

                //Datos

                titulo8.WidthPercentage = 100;
                titulo8.Border = 0;
                titulo8.BorderWidth = 0;
                titulo8.Padding = 0;
                titulo8.Spacing = 0;
                titulo8.DefaultHorizontalAlignment = Element.ALIGN_LEFT;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(cadena9, (int)Fuente.FuenteSubTituloNormal));
                titulo8.AddCell(celda);
                Doc.Add(titulo8);

                //Linea en Blanco
                tlineablanco.WidthPercentage = 100;
                tlineablanco.Border = 0;
                tlineablanco.BorderWidth = 0;
                tlineablanco.Padding = 0;
                tlineablanco.Spacing = 0;

                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                tlineablanco.AddCell(celda);
                Doc.Add(tlineablanco);

                //*---------***


                var pageBorderRect = new Rectangle(Doc.PageSize);

                pageBorderRect.Left += Doc.LeftMargin;
                pageBorderRect.Right -= Doc.RightMargin;
                pageBorderRect.Top -= Doc.TopMargin;
                pageBorderRect.Bottom += Doc.BottomMargin;



                //PdfContentByte cb = writer.DirectContent;
                //// los costados, ancho, alto, curva
                //cb.RoundRectangle(50f, 40f, 495f, 752f, 3f);
                //cb.Stroke();

                Doc.Close();


                string Nombre = "Informe_SGP_" + InformeId + ".pdf";

                string Ruta = @pathdocumentos + "Archivo" + expediente.EntidadId + ".pdf";
                //Response.ClearContent();
                //Response.ClearHeaders();
                //Response.ContentType = "application/ms-word";
                //Response.AddHeader("Content-Disposition", "attachment;filename=" + Nombre + "");
                //Response.WriteFile(Ruta);
                //Response.Flush();
                //Response.Close();

                return Json(new { valid = true, nombre = Nombre, ruta = Ruta }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                //Document Doc = new Document(PageSize.A4,43,43,43,43);
                //Doc.Close();
                //_log.Error(ex);
                //throw ex;
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                //Response.StatusCode = (int)HttpStatusCode.BadRequest;
                ModelState.AddModelError("", mensaje);
                return PartialView("_Error");
                //return ex.ToString();
            }
        }

        public ActionResult Generartupaindividual(long ExpedienteId)
        {
            try
            {
                //Warning[] warn = null;
                //string[] streamids = null;
                string mime = string.Empty, encoding = string.Empty, extension = string.Empty;
                //byte[] byteViewer;
                //ReportViewer viewer;
                //PdfReader pdfReader;

                List<ItemIndice> lstIndice = new List<ItemIndice>();
                var expediente = _expedienteService.GetOne(ExpedienteId);
                var entidad = _entidadService.GetOne(expediente.EntidadId);

                @pathdocumentos = pathdocumentosCiudadano;
                var dataexpediente = _procedimientoService.GetByExpediente(ExpedienteId).ToList().OrderBy(x => x.Numero);


                foreach (Procedimiento proindivitual in dataexpediente)
                {

                    var dataProc = _procedimientoService.GetByExpediente(ExpedienteId).ToList().Where(x => x.ProcedimientoId == proindivitual.ProcedimientoId).OrderBy(x => x.Numero);

                    List<long> ProcedimientoIds = new List<long>();
                    ProcedimientoIds[0] = Convert.ToInt32(proindivitual.ProcedimientoId);


                    Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);

                    PdfWriter writer = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Inicio.pdf", FileMode.Create));
                    Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                    HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                    footer.Border = 0;
                    //footer.BorderWidthTop = 1;
                    footer.Alignment = Element.ALIGN_RIGHT;
                    Doc.Footer = footer;
                    //AdicionarCabecera(Doc, ExpedienteId);

                    //inicio
                    string cadena1 = "Texto Único de Procedimientos Administrativos - " + "\"" + entidad.Nombre.ToString() + "\"";
                    Font fontHeaderFooter = FontFactory.GetFont("Arial", 8f, Font.BOLD);
                    Chunk chkHeader = new Chunk(cadena1, fontHeaderFooter);
                    Phrase p1 = new Phrase(chkHeader);
                    HeaderFooter footer2 = new HeaderFooter(p1, false);
                    footer2.Border = Rectangle.NO_BORDER;
                    footer2.Alignment = Element.ALIGN_CENTER;
                    footer2.BorderColor = new Color(242, 242, 242);
                    footer2.BackgroundColor = new Color(242, 242, 242);
                    Doc.Header = footer2;
                    //fin

                    //ocultar informacion cuando es individual 
                    Doc.Open();

                    Table tcab = new Table(1);
                    Cell celda;

                    tcab.WidthPercentage = 100;
                    tcab.Border = 0;
                    tcab.BorderWidth = 0;
                    tcab.Padding = 2;
                    tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

                    //celda = new Cell();
                    //celda.Border = 0;
                    //celda.Leading = 10;
                    //celda.BorderColor = new Color(242, 242, 242);
                    //celda.BackgroundColor = new Color(242, 242, 242);
                    //celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
                    //tcab.AddCell(celda);
                    //Doc.Add(tcab);

                    var pageBorderRect = new Rectangle(Doc.PageSize);

                    pageBorderRect.Left += Doc.LeftMargin;
                    pageBorderRect.Right -= Doc.RightMargin;
                    pageBorderRect.Top -= Doc.TopMargin;
                    pageBorderRect.Bottom += Doc.BottomMargin;



                    PdfContentByte cb = writer.DirectContent;
                    // los costados, ancho, alto, curva
                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();


                    GenerarProceAdm(Doc, ExpedienteId, ProcedimientoIds, writer);
                    //Doc.NewPage();  


                    TituloPresExc(Doc, ExpedienteId, ProcedimientoIds);
                    Doc.NewPage();


                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    GenerarPresExc(Doc, ExpedienteId, ProcedimientoIds, writer);


                    TituloForm(Doc, ExpedienteId, ProcedimientoIds, "SECCIÓN N° 3: FORMULARIOS");
                    Doc.NewPage();

                    Doc.Close();


                    Document Doc3 = new Document(PageSize.A4, 60, 43, 58, 43);
                    PdfWriter.GetInstance(Doc3, new FileStream(@pathdocumentos + "Archivo" + ExpedienteId + "_Final.pdf", FileMode.Create));
                    //AdicionarCabecera(Doc3, ExpedienteId);
                    for (int i = 1; i < pagcab; i++)
                    {
                        Doc3.Open();
                    }

                    footer.Border = 0;
                    footer.BorderWidthTop = 1;
                    footer.Alignment = Element.ALIGN_CENTER;
                    Doc3.Footer = footer;
                    //inicio 
                    //footer2.Border = Rectangle.NO_BORDER;
                    //footer2.Alignment = Element.ALIGN_CENTER;
                    //footer2.BorderColor = new Color(242, 242, 242);
                    //footer2.BackgroundColor = new Color(242, 242, 242);
                    //Doc3.Header = footer2;
                    //fin

                    TituloSedes(Doc3, ExpedienteId, ProcedimientoIds, "SECCIÓN N° 4: SEDES DE ATENCIÓN");
                    Doc3.NewPage();

                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    GenerarSedes(Doc3, ExpedienteId, ProcedimientoIds);
                    Doc3.NewPage();
                    Doc3.Close();


                    Document Doc2 = new Document(PageSize.A4, 60, 43, 58, 43);
                    HeaderFooter footer3 = new HeaderFooter(obje, new Phrase(""));
                    footer3.Border = 0;
                    footer3.BorderWidthTop = 1;
                    footer3.Alignment = Element.ALIGN_CENTER;
                    Doc2.Footer = footer3;


                    cb.RoundRectangle(55f, 49f, 500f, 727f, 3f);
                    cb.Stroke();

                    if (estadoformulario != "")
                    {
                        GenerarForm(Doc2, ExpedienteId, expediente.EntidadId, ProcedimientoIds, 1);
                        Doc2.Close();
                    }
                    else
                    {

                        UnirForm(Doc2, ExpedienteId, expediente.EntidadId, ProcedimientoIds, 1);
                        Doc2.Close();

                    }
                    Doc.Close();
                }

                Expediente obexp = _expedienteService.GetOne(ExpedienteId);
                obexp.GenerarPDF = 1;
                _expedienteService.Save(obexp);



                return Json(new { valid = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                Response.StatusCode = (int)System.Net.HttpStatusCode.BadRequest;
                ModelState.AddModelError("", mensaje);
                return PartialView("_Error");
            }
        }



        #region "Creando formatos"

        private Chunk fnChunk(String strVariable, int intFuente)
        {
            Chunk vChunk;
            Font fFuente;

            switch (intFuente)
            {
                case (int)Fuente.TituloNormal:
                    fFuente = fontsTituloNormal;
                    break;
                case (int)Fuente.TituloNegrita:
                    fFuente = fontsTituloNegrita;
                    break;
                case (int)Fuente.FuenteNormal:
                    fFuente = fontsNormal;
                    break;
                case (int)Fuente.FuenteNormalUnderline:
                    fFuente = fontsNormalUnderline;
                    break;
                case (int)Fuente.FuenteNegrita:
                    fFuente = fontsNegrita;
                    break;
                case (int)Fuente.FuenteUnderline:
                    fFuente = fontsUnderline;
                    break;
                case (int)Fuente.FuenteCabFooter:
                    fFuente = fontsCabFooter;
                    break;
                case (int)Fuente.FuenteDetalle:
                    fFuente = fontsDetalle;
                    break;
                case (int)Fuente.FuenteSubTituloNormal:
                    fFuente = fontsSubTituloNormal;
                    break;
                case (int)Fuente.FuenteLetraNormal:
                    fFuente = fontsLetraNormal;
                    break;
                case (int)Fuente.FuentesubLetraNormal:
                    fFuente = fontssubLetraNormal;
                    break;
                default:
                    fFuente = fontsNormal;
                    break;


            }
            HyphenationAuto auto = new HyphenationAuto("es", "PE", 2, 2);

            vChunk = new Chunk(strVariable, fFuente);
            vChunk.SetHyphenation(auto);

            return vChunk;
        }

        enum Fuente
        {
            TituloNormal = 1,
            TituloNegrita = 2,
            FuenteNormal = 3,
            FuenteNegrita = 4,
            FuenteUnderline = 5,
            FuenteCabFooter = 6,
            FuenteDetalle = 7,
            FuenteNormalUnderline = 8,
            FuenteSubTituloNormal = 9,
            FuenteLetraNormal = 10,
            FuentesubLetraNormal = 11
        }
        #endregion
        public void SetSubDataSourceRptFormatoTupaCaratula(object sender, SubreportProcessingEventArgs e)
        {
            if (e.ReportPath == "rptFormatoTupaCaratula_Norma") e.DataSources.Add(sub_rds6);


        }
        public void SetSubDataSourceRptFormatoTupa(object sender, SubreportProcessingEventArgs e)
        {
            if (e.ReportPath == "rptFormatoTupa_Requisito") e.DataSources.Add(sub_rds1);
            if (e.ReportPath == "rptFormatoTupa_DerTramitacion") e.DataSources.Add(sub_rds2);
            if (e.ReportPath == "rptFormatoTupa_Sede") e.DataSources.Add(sub_rds3);
            if (e.ReportPath == "rptFormatoTupa_BaseLegal") e.DataSources.Add(sub_rds4);
            if (e.ReportPath == "rptFormatoTupa_ReqFormulario") e.DataSources.Add(sub_rds5);
            if (e.ReportPath == "rptFormatoTupa_SedeUndOrg") e.DataSources.Add(sub_rds3);


        }
        public ActionResult FSLT(long tipo, List<long> ids)
        {


            try
            {
                //Warning[] warn = null;
                //string[] streamids = null;
                string mime = string.Empty, encoding = string.Empty, extension = string.Empty;
                //byte[] byteViewer;
                //ReportViewer viewer;
                //PdfReader pdfReader;


                var fecha = DateTime.Now.ToString("dd/MM/yyyy").Substring(0, 10).Replace("/", "");
                var hora = DateTime.Now.ToShortTimeString().ToString().Replace(":", "");

                Document Doc = new Document(PageSize.A4, 60, 43, 58, 52);
                //System.IO.Directory.CreateDirectory(Server.MapPath("..\\Documentos\\" + "TODOS")); 

                PdfWriter writer = PdfWriter.GetInstance(Doc, new FileStream(@pathdocumentos + "Archivo" + ids[0] + fecha + "_Inicio.pdf", FileMode.Create));
                Phrase obje = new Phrase(fnChunk("pág. ", (int)Fuente.FuenteCabFooter));
                HeaderFooter footer = new HeaderFooter(obje, new Phrase(""));
                footer.Border = 0;
                //footer.BorderWidthTop = 1;
                footer.Alignment = Element.ALIGN_RIGHT;
                Doc.Footer = footer;

                var procedimiento = _procedimientoService.GetOne(ids[0]);
                //AdicionarCabecera(Doc, procedimiento.ExpedienteId);
                foreach (long id in ids)
                {
                    GenerarProceFSLT(Doc, tipo, id, writer);
                }
                Doc.Close();


                string Nombre = "Expediente_" + ids[0] + fecha + ".pdf";

                string Ruta = @pathdocumentos + "Archivo" + ids[0] + fecha + "_Inicio.pdf";
                //Response.ClearContent();
                //Response.ClearHeaders();
                //Response.ContentType = "application/pdf";
                //Response.AddHeader("Content-Disposition", "attachment;filename=" + Nombre + "");
                //Response.WriteFile(Ruta);
                //Response.Flush();
                //Response.Close();

                return Json(new { valid = true, nombre = Nombre, ruta = Ruta }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                //_log.Error(ex);
                //throw ex;
                //return ex.ToString();
                _log.Error(ex);
                //Response.StatusCode = (int)HttpStatusCode.BadRequest;
                ModelState.AddModelError("", mensaje);
                return PartialView("_Error");
            }
        }

        public void descargarArchivos(String Nombre, String Ruta)
        {


            try
            {
                Response.ClearContent();
                Response.ClearHeaders();
                Response.ContentType = "application/pdf";
                Response.AddHeader("Content-Disposition", "attachment;filename=" + Nombre + "");
                Response.WriteFile(Ruta);
                Response.Flush();
                Response.Close();

            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                throw ex;
                //return ex.ToString(); 
            }
        }

        private void GenerarProceFSLT(Document Doc, long tipo, long id, PdfWriter writer)
        {



            List<Procedimiento> dataProc = new List<Procedimiento>();
            List<Entities.TablaAsme> dataAsme = new List<Entities.TablaAsme>();

            List<BaseLegalNorma> dataBaseLegal = new List<BaseLegalNorma>();

            List<Requisito> dataReq = new List<Requisito>();


            List<ExpedienteNorma> dataexnorma = new List<ExpedienteNorma>();


            Expediente dataExpediente;

            if (tipo == (Int32)Reporte.Expediente)
            {

                dataProc = _procedimientoService.GetByExpediente(id)
                            .Where(x => x.Operacion != OperacionExpediente.Eliminacion && x.CodigoCorto != null)
                          .OrderBy(x => (short)x.Numero)
                          //.ThenBy(x => x.UndOrgResponsable.Nombre)
                          .ToList();

                foreach (Procedimiento p in dataProc)
                {
                    dataAsme.AddRange(p.TablaAsme == null ? new List<TablaAsme>() : p.TablaAsme);

                    var bl = _baseLegalService.GetDetails(p.BaseLegalId ?? 0);
                    dataBaseLegal.AddRange(bl == null ? new List<BaseLegalNorma>() : bl);
                }

                dataReq = _requisitoService.GetByExpediente(id).Where(x => x.Eliminado != 3).OrderBy(x => x.RecNum).ToList();

                dataExpediente = _expedienteService.GetOne(id);

                dataexnorma = _expedienteNormaService.GetByExpedientenorma(id);

            }
            else
            {
                Procedimiento pro = _procedimientoService.GetOne(id);
                dataProc.Add(pro);
                dataAsme.AddRange(dataProc.FirstOrDefault().TablaAsme == null ? new List<TablaAsme>() : dataProc.FirstOrDefault().TablaAsme);

                var bl = _baseLegalService.GetDetails(dataProc.FirstOrDefault().BaseLegalId ?? 0);
                dataBaseLegal.AddRange(bl == null ? new List<BaseLegalNorma>() : bl);

                dataReq = _requisitoService.GetByProcedimiento(id).Where(x => x.Eliminado != 3).OrderBy(x => x.RecNum).ToList();

                dataexnorma = _expedienteNormaService.GetByExpedientenorma(id);

                dataExpediente = _expedienteService.GetOne(pro.ExpedienteId);
            }


            List<ItemIndice> lstIndice = new List<ItemIndice>();

            //Cabecera
            Doc.Open();
            for (int i = 0; i < dataProc.Count(); i++)
            {


                //int totalRows = 0;

                string cadena1 = "FORMATO DE SUSTENTACIÓN LEGAL Y TÉCNICA DE PROCEDIMIENTO ADMINISTRATIVO Y SERVICIOS PRESTADOS EN EXCLUSIVIDAD CONTENIDOS EN EL TUPA DE LA ENTIDAD";

                Table tcab = new Table(1);

                Cell celda;
                //Doc.Open();
                Table tdatos4 = new Table(20);
                int[] widths1 = new int[20];
                widths1[0] = 13;
                widths1[1] = 100;
                widths1[2] = 100;
                widths1[3] = 100;
                widths1[4] = 100;
                widths1[5] = 100;
                widths1[6] = 100;
                widths1[7] = 100;
                widths1[8] = 100;
                widths1[9] = 100;
                widths1[10] = 100;
                widths1[11] = 100;
                widths1[12] = 100;
                widths1[13] = 100;
                widths1[14] = 100;
                widths1[15] = 100;
                widths1[16] = 100;
                widths1[17] = 100;
                widths1[18] = 100;
                widths1[19] = 13;
                tdatos4.SetWidths(widths1);


                tdatos4.WidthPercentage = 100;
                tdatos4.Border = 0;
                tdatos4.BorderWidth = 0;
                tdatos4.Padding = 1;
                tdatos4.DefaultHorizontalAlignment = Element.ALIGN_LEFT;




                tcab.WidthPercentage = 100;
                tcab.Border = 0;
                tcab.BorderWidth = 0;
                tcab.Padding = 2;
                tcab.DefaultHorizontalAlignment = Element.ALIGN_CENTER;

                celda = new Cell();
                celda.Border = 0;
                celda.Leading = 10;
                celda.BorderColor = new Color(242, 242, 242);
                celda.BackgroundColor = new Color(242, 242, 242);
                celda.Add(fnChunk(cadena1, (int)Fuente.FuenteNegrita));
                tcab.AddCell(celda);
                Doc.Add(tcab);



                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 10;
                celda.Colspan = 20;
                celda.Add(fnChunk("A. INFORMACIÓN BÁSICA", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);


                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                celda.BorderWidthTop = 0.5f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 1f;
                celda.Leading = 0.1f;
                celda.Colspan = 20;
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.BorderColor = Color.BLACK;
                string Nombre = "";
                if (dataProc[i].TipoProcedimiento == TipoProcedimiento.Procedimiento)
                {
                    Nombre = "Procedimiento administrativo";
                }
                else if (dataProc[i].TipoProcedimiento == TipoProcedimiento.Servicio || dataProc[i].TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                {
                    Nombre = "Servicio prestado en exclusividad";
                }
                else if (dataProc[i].TipoProcedimiento == TipoProcedimiento.Estandar)
                {
                    Nombre = "Procedimiento administrativo";
                }

                celda.Add(fnChunk(" 1. Tipo : " + Nombre, (int)Fuente.FuenteLetraNormal));
                tdatos4.AddCell(celda);


                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f; 
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk(" 2. Denominación : " + dataProc[i].Denominacion, (int)Fuente.FuenteLetraNormal));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.BorderColor = Color.BLACK;

                var prestaciontotal = 0;

                for (int p = 0; p < dataAsme.Count(); p++)
                {
                    if (dataAsme[p].ProcedimientoId == dataProc[i].ProcedimientoId)
                    {
                        prestaciontotal = prestaciontotal + dataAsme[p].Prestaciones;
                    }

                }
                celda.Add(fnChunk(" 3. Número de veces que es demandado a la entidad : " + prestaciontotal, (int)Fuente.FuenteLetraNormal));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.BorderColor = Color.BLACK;



                string clacificacion = "";
                if (dataProc[i].TipoProcedimiento != TipoProcedimiento.Servicio)
                {



                    if (dataProc[i].Calificacion == CalificacionProcedimiento.SilencioPositivo)
                    {
                        clacificacion = "Silencio Positivo";
                    }
                    else if (dataProc[i].Calificacion == CalificacionProcedimiento.SilencioNegativo)
                    {
                        clacificacion = "Silencio Negativo";
                    }
                    else if (dataProc[i].Calificacion == CalificacionProcedimiento.Automatica)
                    {
                        clacificacion = "Automatica";
                    }
                    else
                    {
                        clacificacion = "Ninguno";
                    }
                }
                else { clacificacion = "Ninguno"; }

                string plazos = "";
                string tplazo = "";
                List<PlazoAtencion> lstplazo = _plazoAtencionService.GetAll(dataProc[i].ProcedimientoId);


                if (dataProc[i].TipoPlazo == TipoPlazo.calendarios || dataProc[i].TipoPlazo == TipoPlazo.habiles)
                {
                    tplazo = " dias " + dataProc[i].TipoPlazo;
                }
                else
                {
                    tplazo = " " + dataProc[i].TipoPlazo;
                }

                if (lstplazo.Count() != 0)
                {
                    plazos = dataProc[i].PlazoAtencionDes + ": " + dataProc[i].PlazoAtencion + " " + tplazo;
                    foreach (var lstplazos in lstplazo)
                    {
                        if (lstplazos.TipoPlazo == TipoPlazo.calendarios || lstplazos.TipoPlazo == TipoPlazo.habiles)
                        {
                            tplazo = " dias " + lstplazos.TipoPlazo;
                        }
                        else
                        {
                            tplazo = " " + lstplazos.TipoPlazo;
                        }
                        plazos = plazos + ", " + lstplazos.Descripcion + ": " + lstplazos.Plazo + tplazo;

                    }
                }
                else
                {
                    plazos = dataProc[i].PlazoAtencion + tplazo;
                }

                if (dataProc[i].TipoProcedimiento == TipoProcedimiento.Servicio || dataProc[i].TipoProcedimiento == TipoProcedimiento.EstandarServicio)
                {
                    if (dataProc[i].PlazoAtencion != 0)
                    {
                        celda.Add(fnChunk(" Plazo : " + plazos, (int)Fuente.FuenteLetraNormal));
                    }
                }
                else
                {
                    if (dataProc[i].PlazoAtencion != 0)
                    {
                        celda.Add(fnChunk(" 4. Calificación : " + clacificacion + "\n Plazo : " + plazos, (int)Fuente.FuenteLetraNormal));
                    }
                    else
                    {
                        celda.Add(fnChunk(" 4. Calificación : " + clacificacion, (int)Fuente.FuenteLetraNormal));

                    }

                }

                tdatos4.AddCell(celda);




                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);


                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                celda.BorderWidthBottom = 0.5f;
                //celda.Leading = 1;
                celda.Colspan = 20;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos4.AddCell(celda);
                Doc.Add(tdatos4);







                Table tdatos5 = new Table(20);
                int[] widths2 = new int[20];
                widths2[0] = 13;
                widths2[1] = 100;
                widths2[2] = 100;
                widths2[3] = 100;
                widths2[4] = 100;
                widths2[5] = 100;
                widths2[6] = 100;
                widths2[7] = 100;
                widths2[8] = 100;
                widths2[9] = 100;
                widths2[10] = 100;
                widths2[11] = 100;
                widths2[12] = 100;
                widths2[13] = 100;
                widths2[14] = 100;
                widths2[15] = 100;
                widths2[16] = 100;
                widths2[17] = 100;
                widths2[18] = 100;
                widths2[19] = 13;
                tdatos5.SetWidths(widths2);


                tdatos5.WidthPercentage = 100;
                tdatos5.Border = 0;
                tdatos5.BorderWidth = 0;
                tdatos5.Padding = 1;
                tdatos5.DefaultHorizontalAlignment = Element.ALIGN_LEFT;





                /*Divición**/
                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 16;
                celda.Colspan = 20;
                celda.Add(fnChunk("B. SUSTENTO LEGAL", (int)Fuente.FuenteNegrita));
                tdatos5.AddCell(celda);


                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                celda.BorderWidthTop = 0.5f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 1f;
                celda.Leading = 0.1f;
                celda.Colspan = 20;
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk(" 1. Fundamento legal: \n ", (int)Fuente.FuenteLetraNormal));
                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f; 
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos5.AddCell(celda);


                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk("ID", (int)Fuente.FuenteNegrita));
                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 3;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk("Tipo Norma", (int)Fuente.FuenteNegrita));
                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 7;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk("Descripción", (int)Fuente.FuenteNegrita));
                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 3;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk("Artículo", (int)Fuente.FuenteNegrita));
                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 2;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk("Número", (int)Fuente.FuenteNegrita));
                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 2;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk("Fecha Publicación", (int)Fuente.FuenteNegrita));
                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                tdatos5.AddCell(celda);

                //celda = new Cell();
                //celda.Leading = 10;
                //celda.Colspan = 4;
                //celda.BorderColor = Color.BLACK;
                //celda.Add(fnChunk("Descripción", (int)Fuente.FuenteNegrita));
                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                //tdatos5.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos5.AddCell(celda);



                var cont = 1;
                for (int ii = 0; ii < dataBaseLegal.Count(); ii++)
                {


                    if (dataBaseLegal[ii].BaseLegalId == dataProc[i].BaseLegalId)
                    {

                        celda = new Cell();
                        celda.BorderWidthLeft = 0.5f;
                        //celda.BorderWidthTop = 1f;
                        celda.BorderWidthRight = 0.5f;
                        //celda.BorderWidthBottom = 0.5f; 
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);


                        celda = new Cell();
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.BorderColor = Color.BLACK;
                        celda.Add(fnChunk(Convert.ToString(cont), (int)Fuente.FuenteLetraNormal));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos5.AddCell(celda);


                        if (dataBaseLegal[ii].EstadoACR == "2")
                        {
                            celda = new Cell();
                            celda.Leading = 10;
                            celda.Colspan = 17;
                            celda.BorderColor = Color.BLACK;
                            celda.Add(fnChunk(dataBaseLegal[ii].DescripcionACR, (int)Fuente.FuenteLetraNormal));
                            tdatos5.AddCell(celda);
                        }
                        else
                        {

                            celda = new Cell();
                            celda.Leading = 10;
                            celda.Colspan = 3;
                            celda.BorderColor = Color.BLACK;
                            celda.Add(fnChunk(dataBaseLegal[ii].TipoNorma.Nombre, (int)Fuente.FuenteLetraNormal));
                            tdatos5.AddCell(celda);

                            celda = new Cell();
                            celda.Leading = 10;
                            celda.Colspan = 7;
                            celda.BorderColor = Color.BLACK;
                            celda.Add(fnChunk(dataBaseLegal[ii].Descripcion, (int)Fuente.FuenteLetraNormal));
                            tdatos5.AddCell(celda);

                            celda = new Cell();
                            celda.Leading = 10;
                            celda.Colspan = 3;
                            celda.BorderColor = Color.BLACK;
                            celda.Add(fnChunk(dataBaseLegal[ii].Articulo, (int)Fuente.FuenteLetraNormal));
                            tdatos5.AddCell(celda);

                            celda = new Cell();
                            celda.Leading = 10;
                            celda.Colspan = 2;
                            celda.BorderColor = Color.BLACK;
                            celda.Add(fnChunk(dataBaseLegal[ii].Numero, (int)Fuente.FuenteLetraNormal));
                            tdatos5.AddCell(celda);

                            celda = new Cell();
                            celda.Leading = 10;
                            celda.Colspan = 2;
                            celda.BorderColor = Color.BLACK;
                            if (dataBaseLegal[ii].FechaPublicacion.ToString() == "")
                            {
                                celda.Add(fnChunk("", (int)Fuente.FuenteLetraNormal));
                            }
                            else
                            {
                                celda.Add(fnChunk(dataBaseLegal[ii].FechaPublicacion.Value.ToShortDateString(), (int)Fuente.FuenteLetraNormal));
                            }


                            celda.HorizontalAlignment = Element.ALIGN_CENTER;
                            tdatos5.AddCell(celda);

                            //celda = new Cell();
                            //celda.Leading = 10;
                            //celda.Colspan = 2;
                            //celda.BorderColor = Color.BLACK;
                            //celda.Add(fnChunk(dataBaseLegal[ii].Numero, (int)Fuente.FuenteLetraNormal));
                            //tdatos5.AddCell(celda);

                            //celda = new Cell();
                            //celda.Leading = 10;
                            //celda.Colspan = 4;
                            //celda.BorderColor = Color.BLACK;
                            //celda.Add(fnChunk(dataBaseLegal[ii].Descripcion, (int)Fuente.FuenteLetraNormal));
                            //tdatos5.AddCell(celda);

                        }


                        celda = new Cell();
                        celda.BorderWidthLeft = 0.5f;
                        //celda.BorderWidthTop = 1f;
                        celda.BorderWidthRight = 0.5f;
                        //celda.BorderWidthBottom = 0.5f;
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);

                        cont = cont++;
                    }
                }



                //celda = new Cell();
                //celda.BorderWidthLeft = 0.5f;
                ////celda.BorderWidthTop = 1f;
                //celda.BorderWidthRight = 0.5f;
                ////celda.BorderWidthBottom = 0.5f; 
                //celda.Leading = 10;
                //celda.Colspan = 1;
                //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                //tdatos5.AddCell(celda);


                //celda = new Cell();
                //celda.Leading = 10;
                //celda.Colspan = 18;
                //celda.BorderColor = Color.BLACK;
                //celda.Add(fnChunk(" 2. Norma que ratifica la tasa (solo en el caso de municipalidades distritales) \n", (int)Fuente.FuenteLetraNormal));
                //tdatos5.AddCell(celda);


                //celda = new Cell();
                //celda.BorderWidthLeft = 0.5f;
                ////celda.BorderWidthTop = 1f;
                //celda.BorderWidthRight = 0.5f;
                ////celda.BorderWidthBottom = 0.5f;
                //celda.Leading = 10;
                //celda.Colspan = 1;
                //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                //tdatos5.AddCell(celda);



                //celda = new Cell();
                //celda.BorderWidthLeft = 0.5f;
                ////celda.BorderWidthTop = 1f;
                //celda.BorderWidthRight = 0.5f;
                ////celda.BorderWidthBottom = 0.5f; 
                //celda.Leading = 10;
                //celda.Colspan = 1;
                //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                //tdatos5.AddCell(celda);

                //celda = new Cell();
                //celda.Leading = 10;
                //celda.Colspan = 5;
                //celda.BorderColor = Color.BLACK;
                //celda.Add(fnChunk("Tipo Norma", (int)Fuente.FuenteNegrita));
                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                //tdatos5.AddCell(celda);

                //celda = new Cell();
                //celda.Leading = 10;
                //celda.Colspan = 5;
                //celda.BorderColor = Color.BLACK;
                //celda.Add(fnChunk("Tipo Norma Aprobación", (int)Fuente.FuenteNegrita));
                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                //tdatos5.AddCell(celda);

                //celda = new Cell();
                //celda.Leading = 10;
                //celda.Colspan = 5;
                //celda.BorderColor = Color.BLACK;
                //celda.Add(fnChunk("Descripción", (int)Fuente.FuenteNegrita));
                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                //tdatos5.AddCell(celda);

                //celda = new Cell();
                //celda.Leading = 10;
                //celda.Colspan = 3;
                //celda.BorderColor = Color.BLACK;
                //celda.Add(fnChunk("Fecha", (int)Fuente.FuenteNegrita));
                //celda.HorizontalAlignment = Element.ALIGN_CENTER;
                //tdatos5.AddCell(celda);

                //celda = new Cell();
                //celda.BorderWidthLeft = 0.5f;
                ////celda.BorderWidthTop = 1f;
                //celda.BorderWidthRight = 0.5f;
                ////celda.BorderWidthBottom = 0.5f;
                //celda.Leading = 10;
                //celda.Colspan = 1;
                //celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                //tdatos5.AddCell(celda);




                //for (int iii = 0; iii < dataexnorma.Count(); iii++)
                //{

                //    if (dataexnorma[iii].ENUM_TIPO_NORMA_APROBACION == 3 || dataexnorma[iii].ENUM_TIPO_NORMA_APROBACION == 4)
                //    {



                //        celda = new Cell();
                //        celda.BorderWidthLeft = 0.5f;
                //        //celda.BorderWidthTop = 1f;
                //        celda.BorderWidthRight = 0.5f;
                //        //celda.BorderWidthBottom = 0.5f; 
                //        celda.Leading = 10;
                //        celda.Colspan = 1;
                //        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                //        tdatos5.AddCell(celda);


                //        celda = new Cell();
                //        celda.Leading = 10;
                //        celda.Colspan = 5;
                //        celda.BorderColor = Color.BLACK;
                //        celda.Add(fnChunk(dataexnorma[iii].TipoNorma.Nombre, (int)Fuente.FuenteLetraNormal));
                //        tdatos5.AddCell(celda);

                //        celda = new Cell();
                //        celda.Leading = 10;
                //        celda.Colspan = 5;
                //        celda.BorderColor = Color.BLACK;
                //        var normaaprobacion = "";
                //        if (dataexnorma[iii].ENUM_TIPO_NORMA_APROBACION == 1)
                //        {
                //            normaaprobacion = "Aprueba";
                //        }
                //        else if (dataexnorma[iii].ENUM_TIPO_NORMA_APROBACION == 2)
                //        {
                //            normaaprobacion = "Modifica";
                //        }
                //        else if (dataexnorma[iii].ENUM_TIPO_NORMA_APROBACION == 3)
                //        {
                //            normaaprobacion = "Ratifica Aprobacion";
                //        }
                //        else if (dataexnorma[iii].ENUM_TIPO_NORMA_APROBACION == 4)
                //        {
                //            normaaprobacion = "Ratifica Modificacion";
                //        }
                //        celda.Add(fnChunk(normaaprobacion, (int)Fuente.FuenteLetraNormal));
                //        tdatos5.AddCell(celda);

                //        celda = new Cell();
                //        celda.Leading = 10;
                //        celda.Colspan = 5;
                //        celda.BorderColor = Color.BLACK;
                //        celda.Add(fnChunk(dataexnorma[iii].Descripcion, (int)Fuente.FuenteLetraNormal));
                //        tdatos5.AddCell(celda);

                //        celda = new Cell();
                //        celda.Leading = 10;
                //        celda.Colspan = 3;
                //        celda.BorderColor = Color.BLACK;
                //        if (dataexnorma[iii].Fecha.ToString() == "")
                //        {
                //            celda.Add(fnChunk("", (int)Fuente.FuenteLetraNormal));
                //        }
                //        else
                //        {
                //            celda.Add(fnChunk(Convert.ToString(dataexnorma[iii].Fecha.ToString().Substring(0, 10)), (int)Fuente.FuenteLetraNormal));
                //        } 


                //        tdatos5.AddCell(celda);

                //        celda = new Cell();
                //        celda.BorderWidthLeft = 0.5f;
                //        //celda.BorderWidthTop = 1f;
                //        celda.BorderWidthRight = 0.5f;
                //        //celda.BorderWidthBottom = 0.5f; 
                //        celda.Leading = 10;
                //        celda.Colspan = 1;
                //        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                //        tdatos5.AddCell(celda);

                //    }

                //}



                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f; 
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos5.AddCell(celda);



                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk(" 2. Enumeración de requisitos como se señala en el TUPA y fundamento legal específico de cada requisito (Ley decreto ordenanza u otro de acuerdo con la LPAG) \n", (int)Fuente.FuenteLetraNormal));
                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                tdatos5.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f; 
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos5.AddCell(celda);

                for (int Y = 0; Y < dataReq.Count(); Y++)
                {

                    if (dataReq[Y].ProcedimientoId == dataProc[i].ProcedimientoId && dataReq[Y].TipoRequisito == TipoRequisito.General)
                    {
                        celda = new Cell();
                        celda.BorderWidthLeft = 0.5f;
                        //celda.BorderWidthTop = 1f;
                        celda.BorderWidthRight = 0.5f;
                        //celda.BorderWidthBottom = 0.5f; 
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.Leading = 16;
                        celda.Colspan = 18;
                        celda.BorderColor = Color.BLACK;
                        celda.Add(fnChunk(dataReq[Y].Nombre ?? "", (int)Fuente.FuenteLetraNormal));
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 0.5f;
                        //celda.BorderWidthTop = 1f;
                        celda.BorderWidthRight = 0.5f;
                        //celda.BorderWidthBottom = 0.5f; 
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);


                        celda = new Cell();
                        celda.BorderWidthLeft = 0.5f;
                        //celda.BorderWidthTop = 1f;
                        celda.BorderWidthRight = 0.5f;
                        //celda.BorderWidthBottom = 0.5f; 
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);


                        celda = new Cell();
                        celda.Leading = 10;
                        celda.Colspan = 3;
                        celda.BorderColor = Color.BLACK;
                        celda.Add(fnChunk("Artículo", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.Leading = 10;
                        celda.Colspan = 8;
                        celda.BorderColor = Color.BLACK;
                        celda.Add(fnChunk("Denominación", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.Leading = 10;
                        celda.Colspan = 3;
                        celda.BorderColor = Color.BLACK;
                        celda.Add(fnChunk("Tipo de Norma", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.BorderColor = Color.BLACK;
                        celda.Add(fnChunk("Número", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.Leading = 10;
                        celda.Colspan = 2;
                        celda.BorderColor = Color.BLACK;
                        celda.Add(fnChunk("Fecha de Publicación", (int)Fuente.FuenteNegrita));
                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                        tdatos5.AddCell(celda);

                        celda = new Cell();
                        celda.BorderWidthLeft = 0.5f;
                        //celda.BorderWidthTop = 1f;
                        celda.BorderWidthRight = 0.5f;
                        //celda.BorderWidthBottom = 0.5f; 
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos5.AddCell(celda);




                        var SustentoTecnico = "";
                        var bl = _baseLegalService.GetDetails(dataReq[Y].BaseLegalId ?? 0);

                        if (bl.Count > 0)
                        {
                            foreach (BaseLegalNorma b in bl)
                            {
                                if (SustentoTecnico != dataReq[Y].SustentoTecnico)
                                {
                                    celda = new Cell();
                                    celda.BorderWidthLeft = 0.5f;
                                    //celda.BorderWidthTop = 1f;
                                    celda.BorderWidthRight = 0.5f;
                                    //celda.BorderWidthBottom = 0.5f; 
                                    celda.Leading = 10;
                                    celda.Colspan = 1;
                                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                    tdatos5.AddCell(celda);



                                    if (b.EstadoACR == "2")
                                    {

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 18;
                                        celda.BorderColor = Color.BLACK;
                                        celda.Add(fnChunk(b.DescripcionACR, (int)Fuente.FuenteLetraNormal));
                                        tdatos5.AddCell(celda);

                                    }
                                    else
                                    {
                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 3;
                                        celda.BorderColor = Color.BLACK;
                                        celda.Add(fnChunk(b.Articulo, (int)Fuente.FuenteLetraNormal));
                                        tdatos5.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 8;
                                        celda.BorderColor = Color.BLACK;
                                        celda.Add(fnChunk(b.Descripcion, (int)Fuente.FuenteLetraNormal));
                                        tdatos5.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 3;
                                        celda.BorderColor = Color.BLACK;
                                        celda.Add(fnChunk(b.TipoNorma.Nombre, (int)Fuente.FuenteLetraNormal));
                                        tdatos5.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 2;
                                        celda.BorderColor = Color.BLACK;
                                        celda.Add(fnChunk(b.Numero, (int)Fuente.FuenteLetraNormal));
                                        celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                        tdatos5.AddCell(celda);

                                        celda = new Cell();
                                        celda.Leading = 10;
                                        celda.Colspan = 2;
                                        celda.BorderColor = Color.BLACK;
                                        if (b.FechaPublicacion.ToString() == "")
                                        {
                                            celda.Add(fnChunk("", (int)Fuente.FuenteLetraNormal));
                                        }
                                        else
                                        {
                                            celda.Add(fnChunk(b.FechaPublicacion.ToString().Substring(0, 10), (int)Fuente.FuenteLetraNormal));
                                        }


                                        tdatos5.AddCell(celda);
                                    }



                                    celda = new Cell();
                                    celda.BorderWidthLeft = 0.5f;
                                    //celda.BorderWidthTop = 1f;
                                    celda.BorderWidthRight = 0.5f;
                                    //celda.BorderWidthBottom = 0.5f; 
                                    celda.Leading = 10;
                                    celda.Colspan = 1;
                                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                    tdatos5.AddCell(celda);

                                }
                            }

                        }


                    }
                }

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                celda.BorderWidthBottom = 0.5f;
                //celda.Leading = 1;
                celda.Colspan = 20;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos5.AddCell(celda);

                Doc.Add(tdatos5);




                Table tdatos6 = new Table(20);
                int[] widths3 = new int[20];
                widths3[0] = 13;
                widths3[1] = 100;
                widths3[2] = 100;
                widths3[3] = 100;
                widths3[4] = 100;
                widths3[5] = 100;
                widths3[6] = 100;
                widths3[7] = 100;
                widths3[8] = 100;
                widths3[9] = 100;
                widths3[10] = 100;
                widths3[11] = 100;
                widths3[12] = 100;
                widths3[13] = 100;
                widths3[14] = 100;
                widths3[15] = 100;
                widths3[16] = 100;
                widths3[17] = 100;
                widths3[18] = 100;
                widths3[19] = 13;
                tdatos6.SetWidths(widths2);


                tdatos6.WidthPercentage = 100;
                tdatos6.Border = 0;
                tdatos6.BorderWidth = 0;
                tdatos6.Padding = 1;
                tdatos6.DefaultHorizontalAlignment = Element.ALIGN_LEFT;


                //    /*Divición**/
                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 10;
                celda.Colspan = 20;
                celda.Add(fnChunk("C. SUSTENTO DE SILENCIO ADMINISTRATIVO (Completar solo en caso de procedimiento administrativo de evaluación previa con silencio negativo.)", (int)Fuente.FuenteNegrita));
                tdatos6.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                celda.BorderWidthTop = 0.5f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 1f;
                celda.Leading = 0.1f;
                celda.Colspan = 20;
                tdatos6.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos6.AddCell(celda);
                string negativo = "               ";
                if (dataProc[i].Calificacion == CalificacionProcedimiento.SilencioNegativo)
                {
                    negativo = "1. Sustento de la aplicación del Silencio Administrativo Negativo conforme a lo dispuesto en el numeral 38.1 del artículo 38° del Texto Único. Ordenado de la Ley N° 27444 aprobado por Decreto Supremo N° 004 - 2019 - JUS. \n";
                }

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk(negativo, (int)Fuente.FuenteLetraNormal));
                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                tdatos6.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos6.AddCell(celda);



                if (dataProc[i].Calificacion == CalificacionProcedimiento.SilencioPositivo)
                {
                    if (dataProc[i].PlazoAtencion > 30)
                    {
                        celda = new Cell();
                        celda.BorderWidthLeft = 0.5f;
                        //celda.BorderWidthTop = 1f;
                        celda.BorderWidthRight = 0.5f;
                        //celda.BorderWidthBottom = 0.5f; 
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos6.AddCell(celda);

                        celda = new Cell();
                        celda.Leading = 10;
                        celda.Colspan = 18;
                        celda.BorderColor = Color.BLACK;

                        //celda.Add(fnChunk(" 1.1 Silencio Administrativo Positivo \n Sustento de Calificación: " + dataProc[i].SustTecCalificacion, (int)Fuente.FuenteLetraNormal));
                        celda.Add(fnChunk(" 1.1 Silencio Administrativo Positivo \n Sustento de Calificación: " + dataProc[i].SustentoPlazo, (int)Fuente.FuenteLetraNormal));
                        tdatos6.AddCell(celda);


                        celda = new Cell();
                        celda.BorderWidthLeft = 0.5f;
                        //celda.BorderWidthTop = 1f;
                        celda.BorderWidthRight = 0.5f;
                        //celda.BorderWidthBottom = 0.5f; 
                        celda.Leading = 10;
                        celda.Colspan = 1;
                        celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                        tdatos6.AddCell(celda);
                    }
                }
                else if (dataProc[i].Calificacion == CalificacionProcedimiento.SilencioNegativo)
                {

                    celda = new Cell();
                    celda.BorderWidthLeft = 0.5f;
                    //celda.BorderWidthTop = 1f;
                    celda.BorderWidthRight = 0.5f;
                    //celda.BorderWidthBottom = 0.5f; 
                    celda.Leading = 10;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos6.AddCell(celda);

                    celda = new Cell();
                    celda.Leading = 10;
                    celda.Colspan = 18;
                    celda.BorderColor = Color.BLACK;
                    celda.Add(fnChunk(" 1.1 Silencio Administrativo Negativo.- \n " + dataProc[i].SustTecCalificacion, (int)Fuente.FuenteLetraNormal));
                    celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                    tdatos6.AddCell(celda);

                    celda = new Cell();
                    celda.BorderWidthLeft = 0.5f;
                    //celda.BorderWidthTop = 1f;
                    celda.BorderWidthRight = 0.5f;
                    //celda.BorderWidthBottom = 0.5f; 
                    celda.Leading = 10;
                    celda.Colspan = 1;
                    celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                    tdatos6.AddCell(celda);

                }

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                celda.BorderWidthBottom = 0.5f;
                //celda.Leading = 1;
                celda.Colspan = 20;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos6.AddCell(celda);

                Doc.Add(tdatos6);





                Table tdatos7 = new Table(20);
                int[] widths4 = new int[20];
                widths4[0] = 13;
                widths4[1] = 100;
                widths4[2] = 100;
                widths4[3] = 100;
                widths4[4] = 100;
                widths4[5] = 100;
                widths4[6] = 100;
                widths4[7] = 100;
                widths4[8] = 100;
                widths4[9] = 100;
                widths4[10] = 100;
                widths4[11] = 100;
                widths4[12] = 100;
                widths4[13] = 100;
                widths4[14] = 100;
                widths4[15] = 100;
                widths4[16] = 100;
                widths4[17] = 100;
                widths4[18] = 100;
                widths4[19] = 13;
                tdatos7.SetWidths(widths4);


                tdatos7.WidthPercentage = 100;
                tdatos7.Border = 0;
                tdatos7.BorderWidth = 0;
                tdatos7.Padding = 1;
                tdatos7.DefaultHorizontalAlignment = Element.ALIGN_LEFT;



                /*Divición**/
                celda = new Cell();
                celda.Border = 0;
                celda.BorderWidth = 0;
                celda.Leading = 10;
                celda.Colspan = 20;
                celda.Add(fnChunk("D. COSTO DEL PROCEDIMIENTO ADMINISTRATIVO O SERVICIO PRESTADO EN EXCLUSIVIDAD", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);


                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                celda.BorderWidthTop = 0.5f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 1f;
                celda.Leading = 0.1f;
                celda.Colspan = 20;
                tdatos7.AddCell(celda);


                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);

                celda = new Cell();
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.BorderColor = Color.BLACK;
                celda.Add(fnChunk(" 1. Pautas Metodológicas a seguir para la determinación del costo del procedimiento Administrativo: \n Se seguirán los procedimientos establecidos en el Decreto Supremo N° 064-2010-PCM - Decreto Supremo que aprueba la metodología de determinación de costos de los procedimientos administrativos y servicios prestados en exclusividad comprendidos en los Textos Únicos de Procedimientos Administrativos de las Entidades Públicas, en cumplimiento del numeral 44.6 del artículo 44 de la Ley N° 27444, Ley del Procedimiento Administrativo General. \n 2. Declaración de la Entidad: Se declara haber seguido los pasos establecidos en el Decreto Supremo N° 064-2010-PCM \n ", (int)Fuente.FuenteLetraNormal));
                celda.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                tdatos7.AddCell(celda);


                //Doc.NewPage();


                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);



                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);

                celda = new Cell();
                celda.Border = 0;
                celda.Leading = 10;
                celda.Colspan = 18;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f;
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);


                foreach (Procedimiento p in dataExpediente.Procedimiento)
                {

                    if (p.TablaAsme != null)
                    {
                        foreach (TablaAsme t in p.TablaAsme)
                        {

                            if (t.ProcedimientoId == dataProc[i].ProcedimientoId)
                            {

                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 14;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" Modalidad : " + t.Descripcion, (int)Fuente.FuenteLetraNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk("Referencia  ", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.HorizontalAlignment = Element.ALIGN_CENTER;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk("Monto - S/ ", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);








                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" 3.1 Personal Directo ", (int)Fuente.FuenteLetraNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(string.Format("{0:0.00}", t.Personal), (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);









                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" 3.2 Material Fungible", (int)Fuente.FuenteLetraNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(string.Format("{0:0.00}", t.MaterialFungible), (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);












                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" 3.3 Servicio directo identificable", (int)Fuente.FuenteLetraNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(string.Format("{0:0.00}", t.ServicioIdentificable), (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);









                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" 3.4 Material no fungible", (int)Fuente.FuenteLetraNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(string.Format("{0:0.00}", t.MaterialNoFungible), (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);










                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" 3.5 Servicio de terceros", (int)Fuente.FuenteLetraNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(string.Format("{0:0.00}", t.ServicioTerceros), (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);











                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);



                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" 3.6 Depreciación de activos y amortización de intangibles", (int)Fuente.FuenteLetraNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(string.Format("{0:0.00}", t.Depreciacion), (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);








                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);



                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" 3.7 Costos fijos", (int)Fuente.FuenteLetraNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(string.Format("{0:0.00}", t.Fijos), (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);










                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);



                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);
                                /*costo*/
                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                celda.Add(fnChunk(" COSTO TOTAL ", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(string.Format("{0:0.00}", t.CostoUnitario), (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk("  ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);










                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk(" ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);
                                /*costo*/
                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                celda.Add(fnChunk(" Derecho de Tramitación TUPA  ", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                //celda.Border = 0;
                                //celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 7;
                                celda.BorderColor = Color.BLACK;
                                decimal derechotram = Math.Truncate((t.DerechoTramitacion) * 10) / 10;
                                if (t.EsGratuito == true)
                                {
                                    celda.Add(fnChunk("Gratuito", (int)Fuente.FuenteLetraNormal));
                                }
                                else
                                {
                                    celda.Add(fnChunk(string.Format("{0:0.00}", derechotram), (int)Fuente.FuenteLetraNormal));
                                }


                                //celda.Add(fnChunk(string.Format("{0:0.0}", t.DerechoTramitacion) + "0", (int)Fuente.FuenteLetraNormal));
                                celda.HorizontalAlignment = Element.ALIGN_RIGHT;
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 2;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk("  ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);



                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                                celda = new Cell();
                                celda.Border = 0;
                                celda.BorderWidth = 0;
                                celda.Leading = 10;
                                celda.Colspan = 18;
                                celda.BorderColor = Color.BLACK;
                                celda.Add(fnChunk("  ", (int)Fuente.FuenteNormal));
                                tdatos7.AddCell(celda);

                                celda = new Cell();
                                celda.BorderWidthLeft = 0.5f;
                                //celda.BorderWidthTop = 1f;
                                celda.BorderWidthRight = 0.5f;
                                //celda.BorderWidthBottom = 0.5f; 
                                celda.Leading = 10;
                                celda.Colspan = 1;
                                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                                tdatos7.AddCell(celda);


                            }
                        }
                    }
                }


                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f; 
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);


                celda = new Cell();
                //celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                //celda.BorderWidthRight = 0.5f;
                celda.BorderWidthBottom = 0.5f;
                //celda.Leading = 1;
                celda.Colspan = 18;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);

                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                //celda.BorderWidthBottom = 0.5f; 
                celda.Leading = 10;
                celda.Colspan = 1;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);





                celda = new Cell();
                celda.BorderWidthLeft = 0.5f;
                //celda.BorderWidthTop = 1f;
                celda.BorderWidthRight = 0.5f;
                celda.BorderWidthBottom = 0.5f;
                //celda.Leading = 1;
                celda.Colspan = 20;
                celda.Add(fnChunk("", (int)Fuente.FuenteNegrita));
                tdatos7.AddCell(celda);

                Doc.Add(tdatos7);
                Doc.NewPage();
            }

        }

        class RoundedBorder85 : IPdfPCellEvent
        {
            public void CellLayout(PdfPCell cell, Rectangle rect, PdfContentByte[] canvas)
            {
                PdfContentByte cb = canvas[PdfPTable.LINECANVAS];
                cb.RoundRectangle(
                  55f,
                  49f,
                  500f,
                  727f,
                  3f // change to adjust how "round" corner is displayed

                //55f,
                //49f,
                //500f,
                //733f,
                //3f // change to adjust how "round" corner is displayed
                );
                cb.SetLineWidth(0f);
                cb.SetCMYKColorStrokeF(0f, 0f, 0f, 1f);
                cb.Stroke();
            }
        }



        public class RoundRectangle : IPdfPCellEvent
        {
            public void CellLayout(
              PdfPCell cell, Rectangle rect, PdfContentByte[] canvas
            )
            {
                PdfContentByte cb = canvas[PdfPTable.LINECANVAS];
                cb.RoundRectangle(
                  60,
                  rect.Bottom,
                  490,
                  rect.Height,
                  5 // change to adjust how "round" corner is displayed
                );
                cb.SetLineWidth(0f);
                cb.SetCMYKColorStrokeF(0f, 0f, 0f, 1f);
                cb.Stroke();
            }
        }
        public class RoundRectangle2 : IPdfPCellEvent
        {
            public void CellLayout(
              PdfPCell cell, Rectangle rect, PdfContentByte[] canvas
            )
            {
                PdfContentByte cb = canvas[PdfPTable.LINECANVAS];
                cb.RoundRectangle(
                  60,
                  rect.Bottom,
                  236,
                  rect.Height,
                  5 // change to adjust how "round" corner is displayed
                );
                cb.SetLineWidth(0f);
                cb.SetCMYKColorStrokeF(0f, 0f, 0f, 1f);
                cb.Stroke();
            }
        }
        public class RoundRectangle3 : IPdfPCellEvent
        {
            public void CellLayout(
              PdfPCell cell, Rectangle rect, PdfContentByte[] canvas
            )
            {
                PdfContentByte cb = canvas[PdfPTable.LINECANVAS];
                cb.RoundRectangle(
                  310,
                  rect.Bottom,
                  229,
                  rect.Height,
                  5 // change to adjust how "round" corner is displayed
                );
                cb.SetLineWidth(0f);
                cb.SetCMYKColorStrokeF(0f, 0f, 0f, 1f);
                cb.Stroke();
            }
        }
        public class RoundRectangle4 : IPdfPCellEvent
        {
            public void CellLayout(
              PdfPCell cell, Rectangle rect, PdfContentByte[] canvas
            )
            {
                PdfContentByte cb = canvas[PdfPTable.LINECANVAS];
                cb.RoundRectangle(
                  60,
                  rect.Bottom,
                  76,
                  rect.Height,
                  5 // change to adjust how "round" corner is displayed
                );
                cb.SetLineWidth(0f);
                cb.SetCMYKColorStrokeF(0f, 0f, 0f, 1f);
                cb.Stroke();
            }
        }
        public class RoundRectangle5 : IPdfPCellEvent
        {
            public void CellLayout(
              PdfPCell cell, Rectangle rect, PdfContentByte[] canvas
            )
            {
                PdfContentByte cb = canvas[PdfPTable.LINECANVAS];
                cb.RoundRectangle(
                  153,
                  rect.Bottom,
                  395,
                  rect.Height,
                  5 // change to adjust how "round" corner is displayed
                );
                cb.SetLineWidth(0f);
                cb.SetCMYKColorStrokeF(0f, 0f, 0f, 1f);
                cb.Stroke();
            }
        }
        public ActionResult FSLT2(long tipo, long id)
        {
            try
            {
                var dsProc = new DataSet1.ProcedimientoDataTable();
                var dsDerTra = new DataSet1.TablaAsmeDataTable();
                var dsBaseLegal = new DataSet1.BaseLegalNormaDataTable();
                var dsCostos = new DataSet1.DataCostosDataTable();

                var dsReq = new DataSet1.RequisitoDataTable();

                List<Procedimiento> dataProc = new List<Procedimiento>();
                List<Entities.TablaAsme> dataAsme = new List<Entities.TablaAsme>();

                List<BaseLegalNorma> dataBaseLegal = new List<BaseLegalNorma>();

                List<Requisito> dataReq = new List<Requisito>();

                Expediente dataExpediente;

                if (tipo == (Int32)Reporte.Expediente)
                {
                    dataProc = _procedimientoService.GetByExpediente(id)
                                .OrderBy(x => (short)x.TipoProcedimiento)
                                .ThenBy(x => x.UndOrgResponsable.Nombre)
                                .ToList();

                    foreach (Procedimiento p in dataProc)
                    {
                        dataAsme.AddRange(p.TablaAsme == null ? new List<TablaAsme>() : p.TablaAsme);

                        var bl = _baseLegalService.GetDetails(p.BaseLegalId ?? 0);
                        dataBaseLegal.AddRange(bl == null ? new List<BaseLegalNorma>() : bl);
                    }

                    dataReq = _requisitoService.GetByExpediente(id);

                    dataExpediente = _expedienteService.GetOne(id);

                }
                else
                {
                    Procedimiento pro = _procedimientoService.GetOne(id);
                    dataProc.Add(pro);
                    dataAsme.AddRange(dataProc.FirstOrDefault().TablaAsme == null ? new List<TablaAsme>() : dataProc.FirstOrDefault().TablaAsme);

                    var bl = _baseLegalService.GetDetails(dataProc.FirstOrDefault().BaseLegalId ?? 0);
                    dataBaseLegal.AddRange(bl == null ? new List<BaseLegalNorma>() : bl);

                    dataReq = _requisitoService.GetByProcedimiento(id);

                    dataExpediente = _expedienteService.GetOne(pro.ExpedienteId);
                }




                DataRow dr;
                for (int i = 0; i < dataProc.Count(); i++)
                {
                    dr = dsProc.NewRow();
                    dr["ProcedimientoId"] = dataProc[i].ProcedimientoId;
                    dr["Codigo"] = dataProc[i].Codigo;
                    dr["Denominacion"] = dataProc[i].Denominacion;
                    dr["Descripcion"] = dataProc[i].Objetivo ?? "";
                    dr["Calificacion"] = (short)dataProc[i].Calificacion;
                    dr["PzoAtencion"] = dataProc[i].PlazoAtencion;
                    if (dataProc[i].UndOrgResponsable != null)
                    {

                        dr["UnidadOrganicaInicio"] = dataProc[i].UndOrgResponsable.Nombre;
                        dr["UndOrgReconsideracion"] = dataProc[i].UndOrgReconsideracion == null ? "" : dataProc[i].UndOrgReconsideracion.Nombre;
                        dr["UndOrgApelacion"] = dataProc[i].UndOrgApelacion == null ? "" : dataProc[i].UndOrgApelacion.Nombre;
                    }
                    else
                    {
                        dr["UnidadOrganicaInicio"] = "";
                        dr["UndOrgReconsideracion"] = "";
                        dr["UndOrgApelacion"] = "";
                    }
                    dr["PzoReconPresent"] = dataProc[i].PzoReconPresent;
                    dr["PzoReconResol"] = dataProc[i].PzoReconResol;
                    dr["PzoApelPresent"] = dataProc[i].PzoApelPresent;
                    dr["PzoApelResol"] = dataProc[i].PzoApelResol;


                    dr["EsGratuito"] = dataProc[i].EsGratuito;
                    dr["BaseLegalId"] = dataProc[i].BaseLegalId;
                    dr["TipoProc"] = dataProc[i].TipoProcedimiento == TipoProcedimiento.Servicio ? "S" : "P";
                    dr["CargoResponsable"] = dataProc[i].CargoResponsable ?? "";
                    dr["CargoReconsideracion"] = dataProc[i].CargoReconsideracion ?? "";
                    dr["CargoApelacion"] = dataProc[i].CargoApelacion ?? "";
                    dr["SustTecCalificacion"] = dataProc[i].SustTecCalificacion ?? "";

                    dsProc.Rows.Add(dr);
                }


                for (int i = 0; i < dataAsme.Count(); i++)
                {
                    dr = dsDerTra.NewRow();
                    dr["TablaAsmeId"] = dataAsme[i].TablaAsmeId;
                    dr["ProcedimientoId"] = dataAsme[i].ProcedimientoId;
                    dr["Costo"] = dataAsme[i].CostoUnitario;
                    dr["Descripcion"] = dataAsme[i].Descripcion;
                    dr["Prestaciones"] = dataAsme[i].Prestaciones;

                    dsDerTra.Rows.Add(dr);
                }
                sub_rds2 = new ReportDataSource("dsDerTra", dsDerTra.Rows);

                for (int i = 0; i < dataBaseLegal.Count(); i++)
                {
                    dr = dsBaseLegal.NewRow();
                    dr["BaseLegalId"] = dataBaseLegal[i].BaseLegalId;
                    dr["TipoNorma"] = dataBaseLegal[i].TipoNorma.Nombre;
                    dr["Norma"] = dataBaseLegal[i].Descripcion;
                    dr["Articulo"] = dataBaseLegal[i].Articulo;
                    dr["FechaPublicacion"] = dataBaseLegal[i].FechaPublicacion.Value.ToShortDateString();
                    dr["Numero"] = dataBaseLegal[i].Numero;
                    dr["Descripcion"] = dataBaseLegal[i].Descripcion;

                    dsBaseLegal.Rows.Add(dr);
                }
                sub_rds4 = new ReportDataSource("dsBaseLegal", dsBaseLegal.Rows);


                for (int i = 0; i < dataReq.Count(); i++)
                {
                    dr = dsReq.NewRow();

                    var bl = _baseLegalService.GetDetails(dataReq[i].BaseLegalId ?? 0);

                    if (bl.Count > 0)
                    {

                        foreach (BaseLegalNorma b in bl)
                        {

                            dr["RequisitoId"] = dataReq[i].RequisitoId;
                            dr["ProcedimientoId"] = dataReq[i].ProcedimientoId;
                            dr["Nombre"] = dataReq[i].Nombre ?? "";
                            dr["Descripcion"] = dataReq[i].Descripcion ?? "";
                            dr["TipoRequisito"] = (Int32)dataReq[i].TipoRequisito;

                            dr["SustentoLegal"] = b.Descripcion + ", " + b.TipoNorma.Nombre + ", " + b.Articulo + ", " + b.FechaPublicacion.ToString().Substring(0, 10);

                            dr["SustentoTecnico"] = dataReq[i].SustentoTecnico;
                            dsReq.Rows.Add(dr);
                            dr = dsReq.NewRow();
                        }
                    }
                    else
                    {
                        dr["RequisitoId"] = dataReq[i].RequisitoId;
                        dr["ProcedimientoId"] = dataReq[i].ProcedimientoId;
                        dr["Nombre"] = dataReq[i].Nombre ?? "";
                        dr["Descripcion"] = dataReq[i].Descripcion ?? "";
                        dr["TipoRequisito"] = (Int32)dataReq[i].TipoRequisito;
                        dr["SustentoLegal"] = "";
                        dr["SustentoTecnico"] = dataReq[i].SustentoTecnico;
                        dsReq.Rows.Add(dr);
                    }



                }
                sub_rds1 = new ReportDataSource("dsReq", dsReq.Rows);


                foreach (Procedimiento p in dataExpediente.Procedimiento)
                {

                    if (p.TablaAsme != null)
                    {
                        foreach (TablaAsme t in p.TablaAsme)
                        {
                            dr = dsCostos.NewRow();
                            dr["PersonalDirecto"] = string.Format("{0:0.0}", t.Personal);
                            dr["MaterialFungible"] = string.Format("{0:0.0}", t.MaterialFungible);
                            dr["ServDirectosIdentificables"] = string.Format("{0:0.0}", t.ServicioIdentificable);
                            dr["MaterialNoFungible"] = string.Format("{0:0.0}", t.MaterialNoFungible);
                            dr["ServiciosTerceros"] = string.Format("{0:0.0}", t.ServicioTerceros);
                            dr["DepreciacionActivosAmortizacion"] = string.Format("{0:0.0}", t.Depreciacion);
                            dr["CostosFijos"] = string.Format("{0:0.0}", t.Fijos);
                            dr["CostoTotal"] = string.Format("{0:0.0}", t.Personal + t.MaterialFungible + t.ServicioIdentificable
                                + t.MaterialNoFungible + t.ServicioTerceros + t.Depreciacion
                                + t.CostoUnitario);

                            dr["DerechoTramitacion"] = string.Format("{0:0.0}", t.DerechoTramitacion);

                            dr["Gratuito"] = t.EsGratuito;
                            dr["ProcedimientoId"] = p.ProcedimientoId;
                            dr["Descripcion"] = t.Descripcion;

                            dsCostos.Rows.Add(dr);
                        }
                    }
                }
                sub_rds3 = new ReportDataSource("dsCostos", dsCostos.Rows);


                Warning[] warn = null;
                string[] streamids = null;
                string mime = string.Empty, encoding = string.Empty, extension = string.Empty;
                byte[] byteViewer;
                ReportViewer viewer = new ReportViewer();
                viewer.ProcessingMode = ProcessingMode.Local;
                viewer.LocalReport.ReportPath = Server.MapPath("/Reportes/FSLT/rptFSLT.rdlc");


                //viewer.LocalReport.SetParameters(this.Parametros);
                viewer.LocalReport.SubreportProcessing += SetSubDataSourceRptFSLT;
                viewer.LocalReport.DataSources.Add(new ReportDataSource("dsProc", dsProc.Rows));

                byteViewer = viewer.LocalReport.Render("pdf", null, out mime, out encoding, out extension, out streamids, out warn);
                var stream = new MemoryStream(byteViewer);
                //return File(stream, mime, string.Format("{0}.{1}", "FSLT", extension));

                //MemoryStream stm = new MemoryStream(Merge(lstIndice));
                return new FileStreamResult(stream, "application/pdf");

            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                throw ex;
            }
        }
        public void SetSubDataSourceRptFSLT(object sender, SubreportProcessingEventArgs e)
        {
            if (e.ReportPath == "rptTipoAtencion") e.DataSources.Add(sub_rds2);
            if (e.ReportPath == "rptBaseLegal") e.DataSources.Add(sub_rds4);
            if (e.ReportPath == "rptRequisitos") e.DataSources.Add(sub_rds1);
            if (e.ReportPath == "rptCostos") e.DataSources.Add(sub_rds3);
        }
        //private byte[] Merge(List<ItemIndice> lstIndice)
        //{
        //    // Crea el PDF de salida
        //    MemoryStream stmFile = new MemoryStream();
        //    try
        //    {
        //        Document objDocument = null;
        //        PdfWriter objWriter = null;
        //        var arrStrFilesSource = lstIndice;
        //        // Recorre los archivos
        //        for (int intIndexFile = 0; intIndexFile < arrStrFilesSource.Count(); intIndexFile++)
        //        {
        //            PdfReader objReader = new PdfReader(arrStrFilesSource[intIndexFile].Byte);
        //            int intNumberOfPages = objReader.NumberOfPages;

        //            // La primera vez, inicializa el documento y el escritor
        //            if (intIndexFile == 0)
        //            { // Asigna el documento y el generador
        //                objDocument = new Document(objReader.GetPageSizeWithRotation(1));
        //                objWriter = PdfWriter.GetInstance(objDocument, stmFile);
        //                // Abre el documento
        //                objDocument.Open();
        //            }
        //            // Añade las páginas
        //            for (int intPage = 0; intPage < intNumberOfPages; intPage++)
        //            {
        //                int intRotation = objReader.GetPageRotation(intPage + 1);
        //                PdfImportedPage objPage = objWriter.GetImportedPage(objReader, intPage + 1);

        //                // Asigna el tamaño de la página
        //                objDocument.SetPageSize(objReader.GetPageSizeWithRotation(intPage + 1));
        //                // Crea una nueva página
        //                objDocument.NewPage();
        //                // Añade la página leída
        //                if (intRotation == 90 || intRotation == 270)
        //                    objWriter.DirectContent.AddTemplate(objPage, 0, -1f, 1f, 0, 0,
        //                                                        objReader.GetPageSizeWithRotation(intPage + 1).Height);
        //                else
        //                    objWriter.DirectContent.AddTemplate(objPage, 1f, 0, 0, 1f, 0, 0);
        //            }
        //        }
        //        // Cierra el documento
        //        if (objDocument != null) objDocument.Close();
        //        // Cierra el stream del archivo
        //        //stmFile.Close();
        //    }
        //    catch (Exception ex)
        //    {
        //        var mensaje = "Error message: " + ex.Message;
        //        //System.Diagnostics.Debug.WriteLine(objException.Message);
        //        throw ex;
        //    }
        //    return stmFile.ToArray();
        //}

        public void RptObservaciones(long ExpedienteId, long entidadid)
        {
            try
            {

                tipo[0] = "";
                tipo[1] = "Personal";
                tipo[2] = "Material Fungible";
                tipo[3] = "Servicio Directo";
                tipo[4] = "Material No Fungible";
                tipo[5] = "Servicio de Terceros";
                tipo[6] = "Depreciacion y Amortizacion";
                tipo[7] = "Costos Fijos";

                Workbook book = new Workbook();
                book.ExcelWorkbook.ActiveSheetIndex = 9;
                book.Properties.Created = DateTime.Now;

                DefinirEstilosObs(book);
                GenerarMaestrosObs(book, ExpedienteId, entidadid);

                string file = string.Format("Observacion{0}.xls", "Información");

                Response.Clear();
                Response.ContentType = "application/vnd.ms-excel";
                Response.AddHeader("Content-Disposition", string.Format("attachment; filename={0}", file));
                book.Save(Response.OutputStream);
                Response.End();
            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                throw ex;
            }
        }

        public void DefinirEstilosObs(Workbook book)
        {
            WorksheetStyle style = book.Styles.Add("String");
            style.Font.FontName = "Calibri";
            style.Font.Size = 10;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");
            style.Alignment.Vertical = StyleVerticalAlignment.Center;

            // Create the Default Style to use for everyone
            style = book.Styles.Add("Default");
            style.Interior.Color = "White";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Left;

            style = book.Styles.Add("DosDecimal");
            style.Font.FontName = "Calibri";
            style.Font.Size = 10;
            style.NumberFormat = "#,##0.00";
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");
            style.Alignment.Vertical = StyleVerticalAlignment.Center;

            style = book.Styles.Add("Titulo");
            style.Font.FontName = "Calibri";
            style.Font.Size = 14;
            style.Font.Color = "Black";
            style.Font.Bold = true;
            style.Alignment.WrapText = true;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Left;
            style.Alignment.Vertical = StyleVerticalAlignment.Justify;

            style = book.Styles.Add("UnDecimal");
            style.Font.FontName = "Calibri";
            style.Font.Size = 10;
            style.NumberFormat = "#,##0.0";
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");
            style.Alignment.Vertical = StyleVerticalAlignment.Center;

            style = book.Styles.Add("Rotulo");
            style.Font.FontName = "Calibri";
            style.Font.Size = 10;
            style.Font.Color = "Black";
            style.Font.Bold = true;
            style.Alignment.WrapText = true;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Titulo_Maestros");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Font.Color = "Black";
            style.Font.Bold = true;
            style.Interior.Color = "#F4B084";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.WrapText = true;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Default_Font8_Borde");
            style.Font.Size = 8;
            style.Interior.Color = "White";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Left;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Default_Font10_Borde");
            style.Font.Size = 10;
            style.Interior.Color = "White";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Right;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.NumberFormat = "#,##0.00";
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Cabecera_Amarillo");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Interior.Color = "Yellow";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Cabecera_Verde");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Interior.Color = "#00FF00";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Cabecera_Celeste");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Interior.Color = "#8EA9DB";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Cabecera_Plomo");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Interior.Color = "#D9D9D9";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Default_Font10_Borde_Porcentaje");
            style.Font.Size = 10;
            style.Interior.Color = "White";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Right;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.NumberFormat = "#,##0.00%";
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");
        }
        public void GenerarMaestrosObs(Workbook book, long ExpedienteId, long entidadid)
        {
            try
            {
                Worksheet shMaestros = book.Worksheets.Add("Hoja_Observaciones");
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 160 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 70 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 25 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 25 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });

                cuadro.Add("Maestros", new Dictionary<string, CuadroCalculo>());


                Expediente EXP = _expedienteService.GetOne(ExpedienteId);

                Entidad ENT = _entidadService.GetOne(entidadid);


                //---------------------------------

                WorksheetRow rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("REPORTE DE OBSERVACIONES", "Titulo") { MergeAcross = 1 });
                rowMaestros.Cells.Add();
                rowMaestros.Cells.Add();
                rowMaestros.Cells.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Fecha de descarga: ", "Titulo") { MergeAcross = 1 });
                rowMaestros.Cells.Add(new WorksheetCell(DateTime.Now.ToString()) { MergeAcross = 2 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Entidad:", "Titulo") { MergeAcross = 1 });
                rowMaestros.Cells.Add(new WorksheetCell(EXP.Entidad.Nombre) { MergeAcross = 2 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("N° de Expediente:", "Titulo") { MergeAcross = 1 });
                rowMaestros.Cells.Add(new WorksheetCell(EXP.Codigo) { MergeAcross = 2 });
                rowMaestros = shMaestros.Table.Rows.Add();
                //rowMaestros.Cells.Add(new WorksheetCell("Fecha de devolución del expediente:", "Titulo") { MergeAcross = 1 });
                //rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Entidad evaluadora:", "Titulo") { MergeAcross = 1 });
                rowMaestros.Cells.Add(new WorksheetCell(ENT.Nombre) { MergeAcross = 2 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                /*******************/////





                cuadro.Add("Resumen", new Dictionary<string, CuadroCalculo>());

                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 400 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 400 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 96 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 85 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 96 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 92 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 117 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 91 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 94 });

                WorksheetRow row = shMaestros.Table.Rows.Add();
                row.AutoFitHeight = true;
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("I. SECCIÓN: NORMAS QUE APRUEBA EL TUPA", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("SECCION", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 2, MergeAcross = 5 });



                var listaNORMA = _AuditoriaService.listaObs_NORMA(ExpedienteId, entidadid);


                for (int i = 0; i < listaNORMA.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell("NORMA QUE APRUEBA EL TUPA", "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaNORMA[i].Campo1 + " - " + listaNORMA[i].Campo2 + " - " + listaNORMA[i].Campo3, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }

                var listaArAdjunt = _AuditoriaService.listaObs_ArAdjunto(ExpedienteId, entidadid);


                for (int i = 0; i < listaArAdjunt.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell("EXPOSICION DE MOTIVOS Y DC", "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaArAdjunt[i].Campo1, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }
                var listaNORMALISTA = _AuditoriaService.listaObs_NORMALISTA(ExpedienteId, entidadid);


                for (int i = 0; i < listaNORMALISTA.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell("EXPOSICION DE MOTIVOS Y DC", "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaNORMALISTA[i].Campo1 + " - " + listaNORMALISTA[i].Campo2 + " - " + listaNORMALISTA[i].Campo3, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }



                row = shMaestros.Table.Rows.Add();
                row = shMaestros.Table.Rows.Add();

                row.Cells.Add(new WorksheetCell("II. SECCIÓN: INFORMACIÓN AL CIUDADANO", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("CODIGO DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 2 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 3, MergeAcross = 4 });

                var listaCiudadano = _AuditoriaService.listaObs_ciudadano(ExpedienteId, entidadid);


                for (int i = 0; i < listaCiudadano.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaCiudadano[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaCiudadano[i].Campo2, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaCiudadano[i].Campo3, "Default_Font8_Borde") { Index = 3, MergeAcross = 4 });
                }

                row = shMaestros.Table.Rows.Add();
                row = shMaestros.Table.Rows.Add();

                row.Cells.Add(new WorksheetCell("III. SECCIÓN: DATOS GENERALES", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("CODIGO DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 2 });
                row.Cells.Add(new WorksheetCell("SUBSECCION - CAMPO OBSERVADO", "Cabecera_Celeste") { Index = 3 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 4, MergeAcross = 3 });



                var listaDatosGenerales = _AuditoriaService.listaObs_DatoGenerales(ExpedienteId, entidadid);


                for (int i = 0; i < listaDatosGenerales.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaDatosGenerales[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaDatosGenerales[i].Campo2, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaDatosGenerales[i].Campo3, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaDatosGenerales[i].Campo4, "Default_Font8_Borde") { Index = 4, MergeAcross = 3 });
                }


                row = shMaestros.Table.Rows.Add();
                row = shMaestros.Table.Rows.Add();

                row.Cells.Add(new WorksheetCell("IV. SECCIÓN: SUSTENTO TÉCNICO LEGAL", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("CODIGO DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 2 });
                row.Cells.Add(new WorksheetCell("SUBSECCION - CAMPO OBSERVADO", "Cabecera_Celeste") { Index = 3 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 4, MergeAcross = 3 });





                var listastl = _AuditoriaService.listaObs_STL(ExpedienteId, entidadid);





                for (int i = 0; i < listastl.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listastl[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listastl[i].Campo2, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listastl[i].Campo3, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listastl[i].Campo4, "Default_Font8_Borde") { Index = 4, MergeAcross = 3 });
                }




                row = shMaestros.Table.Rows.Add();
                row = shMaestros.Table.Rows.Add();

                row.Cells.Add(new WorksheetCell("V. SECCIÓN: TABLA ASME", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("CODIGO DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 2 });
                row.Cells.Add(new WorksheetCell("SUBSECCION - CAMPO OBSERVADO", "Cabecera_Celeste") { Index = 3 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 4, MergeAcross = 3 });

                var listaAsme = _AuditoriaService.listaObs_TablaAsme(ExpedienteId, entidadid);


                for (int i = 0; i < listaAsme.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaAsme[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaAsme[i].Campo2, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaAsme[i].Campo3, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaAsme[i].Campo4, "Default_Font8_Borde") { Index = 4, MergeAcross = 3 });
                }




                row = shMaestros.Table.Rows.Add();
                row = shMaestros.Table.Rows.Add();


                row.Cells.Add(new WorksheetCell("VI. SECCIÓN: SUSTENTO DE COSTOS: RESUMEN DE COSTOS", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("CODIGO DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 2 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 3, MergeAcross = 4 });

                var listaResumenCosto = _AuditoriaService.listaObs_ResumenCosto(ExpedienteId, entidadid);


                for (int i = 0; i < listaResumenCosto.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaResumenCosto[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaResumenCosto[i].Campo2, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaResumenCosto[i].Campo3, "Default_Font8_Borde") { Index = 3, MergeAcross = 4 });
                }



                row = shMaestros.Table.Rows.Add();
                row = shMaestros.Table.Rows.Add();


                row.Cells.Add(new WorksheetCell("VII. SECCIÓN: COSTOS E INDUCTORES", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("RECURSO PERSONAL", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 2, MergeAcross = 5 });

                var listaPersonal = _AuditoriaService.listaObs_PersonalCosto(ExpedienteId, entidadid);


                for (int i = 0; i < listaPersonal.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaPersonal[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaPersonal[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }



                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("MATERIAL FUNGIBLE", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 2, MergeAcross = 5 });


                var listaMATERIALFUNGIBLE = _AuditoriaService.listaObs_MATERIALFUNGIBLE(ExpedienteId, entidadid);


                for (int i = 0; i < listaMATERIALFUNGIBLE.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaMATERIALFUNGIBLE[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaMATERIALFUNGIBLE[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }




                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("SERVICIO IDENTIFICABLE", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 2, MergeAcross = 5 });



                var listaSERVICIOIDENTIFICABLE = _AuditoriaService.listaObs_SERVICIOIDENTIFICABLE(ExpedienteId, entidadid);


                for (int i = 0; i < listaSERVICIOIDENTIFICABLE.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaSERVICIOIDENTIFICABLE[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaSERVICIOIDENTIFICABLE[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }



                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("MATERIAL NO FUNGIBLE", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 2, MergeAcross = 5 });


                var listaMATERIALNOFUNGIBLE = _AuditoriaService.listaObs_MATERIALNOFUNGIBLE(ExpedienteId, entidadid);


                for (int i = 0; i < listaMATERIALNOFUNGIBLE.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaMATERIALNOFUNGIBLE[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaMATERIALNOFUNGIBLE[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }



                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("SERVICIO DE TERCEROS", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 2, MergeAcross = 5 });

                var listaSERVICIOTERCEROS = _AuditoriaService.listaObs_SERVICIOTERCEROS(ExpedienteId, entidadid);


                for (int i = 0; i < listaSERVICIOTERCEROS.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaSERVICIOTERCEROS[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaSERVICIOTERCEROS[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }


                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("DEPRECIACIÓN Y AMORIZACIÓN", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 2, MergeAcross = 5 });

                var listaDEPRECIACIONAMORIZACION = _AuditoriaService.listaObs_DEPRECIACIONAMORIZACION(ExpedienteId, entidadid);


                for (int i = 0; i < listaDEPRECIACIONAMORIZACION.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaDEPRECIACIONAMORIZACION[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaDEPRECIACIONAMORIZACION[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }

                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("COSTOS FIJOS", "Cabecera_Celeste") { MergeAcross = 6 });
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("NOMBRE DEL PA/SPE", "Cabecera_Celeste") { Index = 1 });
                row.Cells.Add(new WorksheetCell("DETALLE DE LA OBSERVACIÓN", "Cabecera_Celeste") { Index = 2, MergeAcross = 5 });

                var listaCOSTOSFIJOS = _AuditoriaService.listaObs_COSTOSFIJOS(ExpedienteId, entidadid);


                for (int i = 0; i < listaCOSTOSFIJOS.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaCOSTOSFIJOS[i].Campo1, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaCOSTOSFIJOS[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }





                row = shMaestros.Table.Rows.Add();
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("VALORES INDUCTORES", "Cabecera_Celeste") { Index = 1 });

                var listaVALORESINDUCTORES = _AuditoriaService.listaObs_VALORESINDUCTORES(ExpedienteId, entidadid);


                for (int i = 0; i < listaVALORESINDUCTORES.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaVALORESINDUCTORES[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }

                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("INDUCTOR DE ASIGNACIÓN DE COSTOS", "Cabecera_Celeste") { Index = 1 });

                var listaINDUCTORSIGNACIONCOSTOS = _AuditoriaService.listaObs_INDUCTORSIGNACIONCOSTOS(ExpedienteId, entidadid);


                for (int i = 0; i < listaINDUCTORSIGNACIONCOSTOS.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaINDUCTORSIGNACIONCOSTOS[i].Campo2, "Default_Font8_Borde") { Index = 2, MergeAcross = 5 });
                }


                row = shMaestros.Table.Rows.Add();
                row = shMaestros.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("VIII. OBSERVACIONES COMPLEMENTARIAS", "Cabecera_Celeste") { MergeAcross = 6 });
                var listageneral = _AuditoriaService.listaObs_General(ExpedienteId, entidadid);


                for (int i = 0; i < listageneral.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listageneral[i].Campo3, "Default_Font8_Borde") { Index = 1, MergeAcross = 6 });
                }






                ////rowMaestros.Cells.Add(new WorksheetCell("Centro de Actividad", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Cargo", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Escala de ingresos", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo mensual", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Horas efectivas al día", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Número de dias laborables", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Tiempo mensual efectivo", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo de personal por minuto", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add();
                ////rowMaestros.Cells.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("Escala de ingresos", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo anual", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo mensual = Costo anual / 12", "Titulo_Maestros"));

                ////// Maestro Costo Personal por Minuto

                //////AnexoPersonal listaPD = AnexoPersonal. .ListarByArchivo(id_entidad, id_archivo);

                ////var costPersonal = _reporteService.GetRecursoCostoLista(ExpedienteId);

                ////var personal = _reporteService.GetActividadRecursoLista(ExpedienteId);

                ////var listaPD = personal.Join(costPersonal,
                ////                        p => p.Actividad.UnidadOrganicaId + "_" + p.RecursoId,
                ////                        c => c.UnidadOrganicaId + "_" + c.RecursoId,
                ////                        (p, c) => new { Personal = p, Actividad = p.Actividad, Costo = c, UnidadOrganica = p.Actividad.UnidadOrganica, Recurso = p.Recurso })
                ////                        .Distinct()
                ////                        .ToList();

                ////string nom1 = "";
                ////string nom2 = "";
                ////int contlistaPD = 0;
                ////for (int i = 0; i < listaPD.Count; i++)
                ////{
                ////    if (nom1 != listaPD[i].UnidadOrganica.Nombre || nom2 != listaPD[i].Recurso.Nombre)
                ////    {
                ////        rowMaestros = shMaestros.Table.Rows.Add();
                ////        rowMaestros.Cells.Add(new WorksheetCell(listaPD[i].UnidadOrganica.Nombre, "Default_Font8_Borde"));
                ////        rowMaestros.Cells.Add(new WorksheetCell(listaPD[i].Recurso.Nombre, "Default_Font8_Borde"));
                ////        rowMaestros.Cells.Add(new WorksheetCell("", "Default_Font8_Borde") { Formula = "=RC[+8]" });
                ////        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[+9]" });
                ////        rowMaestros.Cells.Add(new WorksheetCell("8", DataType.Number, "Default_Font10_Borde"));
                ////        rowMaestros.Cells.Add(new WorksheetCell("30", DataType.Number, "Default_Font10_Borde"));
                ////        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]*RC[-2]*60" });
                ////        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=TRUNC(RC[-4] / RC[-1],2)" });
                ////        rowMaestros.Cells.Add();
                ////        rowMaestros.Cells.Add();
                ////        rowMaestros.Cells.Add(new WorksheetCell("", "Default_Font10_Borde"));
                ////        rowMaestros.Cells.Add(new WorksheetCell((listaPD[i].Costo.CostoAnual).ToString(), DataType.Number, "Default_Font10_Borde"));
                ////        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]/12" });
                ////        nom1 = listaPD[i].UnidadOrganica.Nombre;
                ////        nom2 = listaPD[i].Recurso.Nombre;
                ////        contlistaPD = contlistaPD++;
                ////    }

                ////}
                ////cuadro["Maestros"].Add("Personal", new CuadroCalculo() { Inicio = 6, Filas = contlistaPD });


                //////Maestro Material Fungible

                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.AutoFitHeight = true;
                ////rowMaestros.Cells.Add(new WorksheetCell("CUADRO M2", "Titulo") { MergeAcross = 2 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("COSTO DE MATERIAL FUNGIBLE", "Titulo") { MergeAcross = 2 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("Material Fungible", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo unitario (S/)", "Titulo_Maestros"));

                //////ABC_TA_EC_ARCHIVOList listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 2);

                ////var listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.MaterialFungible);


                ////cuadro["Maestros"].Add(tipo[2], new CuadroCalculo() { Inicio = cuadro["Maestros"]["Personal"].Inicio + cuadro["Maestros"]["Personal"].Filas + 4, Filas = listaECArchivo.Count });
                ////for (int i = 0; i < listaECArchivo.Count; i++)
                ////{
                ////    rowMaestros = shMaestros.Table.Rows.Add();
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////}

                //////Maestro Servicio Directo

                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.AutoFitHeight = true;
                ////rowMaestros.Cells.Add(new WorksheetCell("CUADRO M3", "Titulo") { MergeAcross = 2 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("COSTO DE SERVICIO DIRECTO IDENTIFICABLE", "Titulo") { MergeAcross = 2 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("Servicio Directo Identificable", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo unitario (S/)", "Titulo_Maestros"));

                //////listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 3);
                ////listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.ServicioIdentificable);
                ////cuadro["Maestros"].Add(tipo[3], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[2]].Inicio + cuadro["Maestros"][tipo[2]].Filas + 4, Filas = listaECArchivo.Count });
                ////for (int i = 0; i < listaECArchivo.Count; i++)
                ////{
                ////    rowMaestros = shMaestros.Table.Rows.Add();
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////}

                //////Maestro Material No Fungible

                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.AutoFitHeight = true;
                ////rowMaestros.Cells.Add(new WorksheetCell("CUADRO M4", "Titulo") { MergeAcross = 4 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("COSTO DE MATERIAL NO FUNGIBLE", "Titulo") { MergeAcross = 4 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("Material No Fungible", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Cantidad Anual", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo Anual (S/)", "Titulo_Maestros"));


                //////listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 4);
                ////listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.MaterialNoFungible);
                ////cuadro["Maestros"].Add(tipo[4], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[3]].Inicio + cuadro["Maestros"][tipo[3]].Filas + 4, Filas = listaECArchivo.Count });

                ////for (int i = 0; i < listaECArchivo.Count; i++)
                ////{
                ////    rowMaestros = shMaestros.Table.Rows.Add();
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAnual.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////}

                //////Maestro Servicios de Terceros

                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.AutoFitHeight = true;
                ////rowMaestros.Cells.Add(new WorksheetCell("CUADRO M5", "Titulo") { MergeAcross = 4 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("COSTO DE SERVICIOS DE TERCEROS", "Titulo") { MergeAcross = 4 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("Servicios de Terceros", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Cantidad Anual", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo Anual (S/)", "Titulo_Maestros"));


                //////listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 5);
                ////listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.ServicioTerceros);
                ////cuadro["Maestros"].Add(tipo[5], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[4]].Inicio + cuadro["Maestros"][tipo[4]].Filas + 4, Filas = listaECArchivo.Count });
                ////for (int i = 0; i < listaECArchivo.Count; i++)
                ////{
                ////    rowMaestros = shMaestros.Table.Rows.Add();
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAnual.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////}

                //////Maestro Depreciacion y Amortizacion

                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.AutoFitHeight = true;
                ////rowMaestros.Cells.Add(new WorksheetCell("CUADRO M6", "Titulo") { MergeAcross = 4 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("COSTO DE DEPRECIACION Y AMORTIZACION", "Titulo") { MergeAcross = 4 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("Activos e Intangibles", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Cantidad Anual", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo de Adquisición (S/)", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("% Depreciación", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo Anual (S/)", "Titulo_Maestros"));



                //////listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 6);
                ////listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.Depreciacion);
                ////cuadro["Maestros"].Add(tipo[6], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[5]].Inicio + cuadro["Maestros"][tipo[5]].Filas + 4, Filas = listaECArchivo.Count });
                ////for (int i = 0; i < listaECArchivo.Count; i++)
                ////{
                ////    rowMaestros = shMaestros.Table.Rows.Add();
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAdquisicion.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.TipoDepreciacion.Valor02.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAnual.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////}

                //////Maestro Costos Fijos

                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.AutoFitHeight = true;
                ////rowMaestros.Cells.Add(new WorksheetCell("CUADRO M7", "Titulo") { MergeAcross = 4 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("COSTOS FIJOS", "Titulo") { MergeAcross = 4 });
                ////rowMaestros = shMaestros.Table.Rows.Add();
                ////rowMaestros.Cells.Add(new WorksheetCell("Costos Fijos", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Cantidad Anual", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Titulo_Maestros"));
                ////rowMaestros.Cells.Add(new WorksheetCell("Costo Anual (S/)", "Titulo_Maestros"));


                //////listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 7);
                ////listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.Fijos);
                ////cuadro["Maestros"].Add(tipo[7], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[6]].Inicio + cuadro["Maestros"][tipo[6]].Filas + 4, Filas = listaECArchivo.Count });
                ////for (int i = 0; i < listaECArchivo.Count; i++)
                ////{
                ////    rowMaestros = shMaestros.Table.Rows.Add();
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAnual.ToString(), DataType.Number, "Default_Font10_Borde"));
                ////}
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void AnexoTotalFormula(long ExpedienteId, long entidadid)
        {
            try
            {

                tipo[0] = "";
                tipo[1] = "Personal";
                tipo[2] = "Material Fungible";
                tipo[3] = "Servicio Directo";
                tipo[4] = "Material No Fungible";
                tipo[5] = "Servicio de Terceros";
                tipo[6] = "Depreciacion y Amortizacion";
                tipo[7] = "Costos Fijos";

                Workbook book = new Workbook();
                book.ExcelWorkbook.ActiveSheetIndex = 9;
                book.Properties.Created = DateTime.Now;

                DefinirEstilos(book);
                GenerarMaestros(book, ExpedienteId);
                GenerarInductores(book, ExpedienteId, entidadid);
                GenerarCosteoPersonal(book, ExpedienteId);
                GenerarCosteoIdentificable(book, 2, ExpedienteId, TipoRecurso.MaterialFungible);
                GenerarCosteoIdentificable(book, 3, ExpedienteId, TipoRecurso.ServicioIdentificable);
                GenerarCosteoNoIdentificable(book, 4, ExpedienteId, TipoRecurso.MaterialNoFungible, entidadid);
                GenerarCosteoNoIdentificable(book, 5, ExpedienteId, TipoRecurso.ServicioTerceros, entidadid);
                GenerarCosteoNoIdentificable(book, 6, ExpedienteId, TipoRecurso.Depreciacion, entidadid);
                GenerarCosteoNoIdentificable(book, 7, ExpedienteId, TipoRecurso.Fijos, entidadid);
                GenerarResumenCostos(book, ExpedienteId);

                //ABC_TA_ENTIDAD oEntidad = RuleEntidad.GetOne(id_entidad);
                string file = string.Format("CalculoCostos{0}.xls", "FormulaCompleta");

                Response.Clear();
                Response.ContentType = "application/vnd.ms-excel";
                Response.AddHeader("Content-Disposition", string.Format("attachment; filename={0}", file));
                book.Save(Response.OutputStream);
                Response.End();
            }
            catch (Exception ex)
            {
                var mensaje = "Error message: " + ex.Message;
                _log.Error(ex);
                throw ex;
            }
        }
        public void DefinirEstilos(Workbook book)
        {
            WorksheetStyle style = book.Styles.Add("String");
            style.Font.FontName = "Calibri";
            style.Font.Size = 10;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");
            style.Alignment.Vertical = StyleVerticalAlignment.Center;

            // Create the Default Style to use for everyone
            style = book.Styles.Add("Default");
            style.Interior.Color = "White";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Left;

            style = book.Styles.Add("DosDecimal");
            style.Font.FontName = "Calibri";
            style.Font.Size = 10;
            style.NumberFormat = "#,##0.00";
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");
            style.Alignment.Vertical = StyleVerticalAlignment.Center;

            style = book.Styles.Add("Titulo");
            style.Font.FontName = "Calibri";
            style.Font.Size = 14;
            style.Font.Color = "Black";
            style.Font.Bold = true;
            style.Alignment.WrapText = true;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;

            style = book.Styles.Add("UnDecimal");
            style.Font.FontName = "Calibri";
            style.Font.Size = 10;
            style.NumberFormat = "#,##0.0";
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");
            style.Alignment.Vertical = StyleVerticalAlignment.Center;

            style = book.Styles.Add("Rotulo");
            style.Font.FontName = "Calibri";
            style.Font.Size = 10;
            style.Font.Color = "Black";
            style.Font.Bold = true;
            style.Alignment.WrapText = true;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Titulo_Maestros");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Font.Color = "Black";
            style.Font.Bold = true;
            style.Interior.Color = "#F4B084";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.WrapText = true;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Default_Font8_Borde");
            style.Font.Size = 8;
            style.Interior.Color = "White";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Left;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Default_Font10_Borde");
            style.Font.Size = 10;
            style.Interior.Color = "White";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Right;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.NumberFormat = "#,##0.00";
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Cabecera_Amarillo");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Interior.Color = "Yellow";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Cabecera_Verde");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Interior.Color = "#00FF00";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Cabecera_Celeste");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Interior.Color = "#8EA9DB";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Cabecera_Plomo");
            style.Font.FontName = "Arial";
            style.Font.Size = 8;
            style.Interior.Color = "#D9D9D9";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Center;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.Alignment.WrapText = true;
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");

            style = book.Styles.Add("Default_Font10_Borde_Porcentaje");
            style.Font.Size = 10;
            style.Interior.Color = "White";
            style.Interior.Pattern = StyleInteriorPattern.Solid;
            style.Alignment.Horizontal = StyleHorizontalAlignment.Right;
            style.Alignment.Vertical = StyleVerticalAlignment.Center;
            style.NumberFormat = "#,##0.00%";
            style.Borders.Add(StylePosition.Top, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Bottom, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Left, LineStyleOption.Continuous, 1, "Black");
            style.Borders.Add(StylePosition.Right, LineStyleOption.Continuous, 1, "Black");
        }
        public void GenerarMaestros(Workbook book, long ExpedienteId)
        {
            try
            {
                Worksheet shMaestros = book.Worksheets.Add("Maestros");
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 160 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 70 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 25 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 25 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 80 });

                cuadro.Add("Maestros", new Dictionary<string, CuadroCalculo>());

                WorksheetRow rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("CUADROS MAESTROS", "Titulo") { MergeAcross = 7 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("CUADRO M1", "Titulo") { MergeAcross = 7 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("COSTO DE PERSONAL DIRECTO POR MINUTO", "Titulo") { MergeAcross = 7 });
                rowMaestros.Cells.Add();
                rowMaestros.Cells.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Cuadro 1a", "Titulo") { MergeAcross = 2 });

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Centro de Actividad", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Cargo", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Escala de ingresos", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo mensual", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Horas efectivas al día", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Número de dias laborables", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Tiempo mensual efectivo", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo de personal por minuto", "Titulo_Maestros"));
                rowMaestros.Cells.Add();
                rowMaestros.Cells.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Escala de ingresos", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo anual", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo mensual = Costo anual / 12", "Titulo_Maestros"));

                // Maestro Costo Personal por Minuto

                //AnexoPersonal listaPD = AnexoPersonal. .ListarByArchivo(id_entidad, id_archivo);

                var costPersonal = _reporteService.GetRecursoCostoLista(ExpedienteId);

                var personal = _reporteService.GetActividadRecursoLista(ExpedienteId);


                var asdasd = personal.Join(costPersonal,
                                        p => p.Actividad.UnidadOrganicaId + "_" + p.RecursoId,
                                        c => c.UnidadOrganicaId + "_" + c.RecursoId,
                                        (p, c) => new { Personal = p, Actividad = p.Actividad, Costo = c, UnidadOrganica = p.Actividad.UnidadOrganica, Recurso = p.Recurso })
                                        .OrderBy(x => x.UnidadOrganica.Nombre).OrderBy(x => x.Recurso.Nombre);

                var listaPD = personal.Join(costPersonal,
                                        p => p.Actividad.UnidadOrganicaId + "_" + p.RecursoId,
                                        c => c.UnidadOrganicaId + "_" + c.RecursoId,
                                        (p, c) => new { Personal = p, Actividad = p.Actividad, Costo = c, UnidadOrganica = p.Actividad.UnidadOrganica, Recurso = p.Recurso })
                                        .OrderBy(x => x.UnidadOrganica.Nombre).OrderBy(x => x.Recurso.Nombre)
                                        .Distinct()
                                        .ToList();

                string nom1 = "";
                string nom2 = "";
                int contlistaPD = 0;
                for (int i = 0; i < listaPD.Count; i++)
                {
                    if (nom1 != listaPD[i].UnidadOrganica.Nombre || nom2 != listaPD[i].Recurso.Nombre)
                    {
                        rowMaestros = shMaestros.Table.Rows.Add();
                        rowMaestros.Cells.Add(new WorksheetCell(listaPD[i].UnidadOrganica.Nombre, "Default_Font8_Borde"));
                        rowMaestros.Cells.Add(new WorksheetCell(listaPD[i].Recurso.Nombre, "Default_Font8_Borde"));
                        rowMaestros.Cells.Add(new WorksheetCell("", "Default_Font8_Borde") { Formula = "=RC[+8]" });
                        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[+9]" });
                        rowMaestros.Cells.Add(new WorksheetCell("8", DataType.Number, "Default_Font10_Borde"));
                        rowMaestros.Cells.Add(new WorksheetCell("30", DataType.Number, "Default_Font10_Borde"));
                        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]*RC[-2]*60" });
                        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=TRUNC(RC[-4] / RC[-1],2)" });
                        rowMaestros.Cells.Add();
                        rowMaestros.Cells.Add();
                        rowMaestros.Cells.Add(new WorksheetCell("", "Default_Font10_Borde"));
                        rowMaestros.Cells.Add(new WorksheetCell((listaPD[i].Costo.CostoAnual).ToString(), DataType.Number, "Default_Font10_Borde"));
                        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]/12" });
                        nom1 = listaPD[i].UnidadOrganica.Nombre;
                        nom2 = listaPD[i].Recurso.Nombre;
                        contlistaPD = contlistaPD++;
                    }

                }
                cuadro["Maestros"].Add("Personal", new CuadroCalculo() { Inicio = 6, Filas = contlistaPD });


                //Maestro Material Fungible

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros.Cells.Add(new WorksheetCell("CUADRO M2", "Titulo") { MergeAcross = 2 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("COSTO DE MATERIAL FUNGIBLE", "Titulo") { MergeAcross = 2 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Material Fungible", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo unitario (S/)", "Titulo_Maestros"));

                //ABC_TA_EC_ARCHIVOList listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 2);

                var listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.MaterialFungible);


                cuadro["Maestros"].Add(tipo[2], new CuadroCalculo() { Inicio = cuadro["Maestros"]["Personal"].Inicio + cuadro["Maestros"]["Personal"].Filas + 4, Filas = listaECArchivo.Count });
                for (int i = 0; i < listaECArchivo.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                }

                //Maestro Servicio Directo

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros.Cells.Add(new WorksheetCell("CUADRO M3", "Titulo") { MergeAcross = 2 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("COSTO DE SERVICIO DIRECTO IDENTIFICABLE", "Titulo") { MergeAcross = 2 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Servicio Directo Identificable", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo unitario (S/)", "Titulo_Maestros"));

                //listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 3);
                listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.ServicioIdentificable);
                cuadro["Maestros"].Add(tipo[3], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[2]].Inicio + cuadro["Maestros"][tipo[2]].Filas + 4, Filas = listaECArchivo.Count });
                for (int i = 0; i < listaECArchivo.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                }

                //Maestro Material No Fungible

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros.Cells.Add(new WorksheetCell("CUADRO M4", "Titulo") { MergeAcross = 4 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("COSTO DE MATERIAL NO FUNGIBLE", "Titulo") { MergeAcross = 4 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Material No Fungible", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Cantidad Anual", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo Anual (S/)", "Titulo_Maestros"));


                //listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 4);
                listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.MaterialNoFungible);
                cuadro["Maestros"].Add(tipo[4], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[3]].Inicio + cuadro["Maestros"][tipo[3]].Filas + 4, Filas = listaECArchivo.Count });

                for (int i = 0; i < listaECArchivo.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAnual.ToString(), DataType.Number, "Default_Font10_Borde"));
                }

                //Maestro Servicios de Terceros

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros.Cells.Add(new WorksheetCell("CUADRO M5", "Titulo") { MergeAcross = 4 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("COSTO DE SERVICIOS DE TERCEROS", "Titulo") { MergeAcross = 4 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Servicios de Terceros", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Cantidad Anual", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo Anual (S/)", "Titulo_Maestros"));


                //listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 5);
                listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.ServicioTerceros);
                cuadro["Maestros"].Add(tipo[5], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[4]].Inicio + cuadro["Maestros"][tipo[4]].Filas + 4, Filas = listaECArchivo.Count });
                for (int i = 0; i < listaECArchivo.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAnual.ToString(), DataType.Number, "Default_Font10_Borde"));
                }

                //Maestro Depreciacion y Amortizacion

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros.Cells.Add(new WorksheetCell("CUADRO M6", "Titulo") { MergeAcross = 4 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("COSTO DE DEPRECIACION Y AMORTIZACION", "Titulo") { MergeAcross = 4 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Activos e Intangibles", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Cantidad Anual", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo de Adquisición (S/)", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("% Depreciación", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo Anual (S/)", "Titulo_Maestros"));



                //listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 6);
                listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.Depreciacion);
                cuadro["Maestros"].Add(tipo[6], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[5]].Inicio + cuadro["Maestros"][tipo[5]].Filas + 4, Filas = listaECArchivo.Count });
                for (int i = 0; i < listaECArchivo.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAdquisicion.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.TipoDepreciacion.Valor02.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAnual.ToString(), DataType.Number, "Default_Font10_Borde"));
                }

                //Maestro Costos Fijos

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros.Cells.Add(new WorksheetCell("CUADRO M7", "Titulo") { MergeAcross = 4 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("COSTOS FIJOS", "Titulo") { MergeAcross = 4 });
                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Costos Fijos", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Cantidad Anual", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Unidad de Medida", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Titulo_Maestros"));
                rowMaestros.Cells.Add(new WorksheetCell("Costo Anual (S/)", "Titulo_Maestros"));


                //listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, 7);
                listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, TipoRecurso.Fijos);
                cuadro["Maestros"].Add(tipo[7], new CuadroCalculo() { Inicio = cuadro["Maestros"][tipo[6]].Inicio + cuadro["Maestros"][tipo[6]].Filas + 4, Filas = listaECArchivo.Count });
                for (int i = 0; i < listaECArchivo.Count; i++)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.Nombre, "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].Recurso.UnidadMedida.Nombre.ToString(), "Default_Font8_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoUnitario.ToString(), DataType.Number, "Default_Font10_Borde"));
                    rowMaestros.Cells.Add(new WorksheetCell(listaECArchivo[i].CostoAnual.ToString(), DataType.Number, "Default_Font10_Borde"));
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void GenerarInductores(Workbook book, long ExpedienteId, long entidadid)
        {
            try
            {

                Worksheet shMaestros = book.Worksheets.Add("Inductores");
                cuadro.Add("Inductores", new Dictionary<string, CuadroCalculo>());


                //var listaInd = _inductorService.GetByExpediente(ExpedienteId);
                var listaInd = _inductorService.GetValoresByInductorEntidadid(entidadid, ExpedienteId);

                //ABC_TA_INDUCTOR_VALORList listaInd = RuleCalculo.ListValorInductores(id_entidad, id_archivo);
                var CentrosActividad = (from ca in listaInd select ca.UnidadOrganica).Distinct();
                //var CentrosActividad = _inductorService.GetAll(entidadid).Distinct();


                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 200 });
                foreach (UnidadOrganica a in CentrosActividad)
                {
                    shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 85 });
                }
                shMaestros.Table.Columns.Add(new WorksheetColumn() { Width = 85 });

                WorksheetRow rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.AutoFitHeight = true;
                rowMaestros = shMaestros.Table.Rows.Add();

                WorksheetCell celda = rowMaestros.Cells.Add();
                celda.Data.Text = "Inductores";
                celda.StyleID = "Titulo";
                celda.MergeAcross = 7;
                //rowMaestros.Cells.Add(new WorksheetCell("Inductores", "Titulo") { MergeAcross = 7 });

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros.Cells.Add(new WorksheetCell("Inductor", "Cabecera_Verde"));
                foreach (UnidadOrganica ca in CentrosActividad)
                {
                    if (ca != null)
                    {
                        rowMaestros.Cells.Add(new WorksheetCell(ca.Nombre, "Cabecera_Amarillo"));
                    }
                }
                rowMaestros.Cells.Add(new WorksheetCell("Total", "Cabecera_Amarillo"));

                //var listaInductor = _inductorService.GetAll(entidadid).Distinct();
                var Inductores = (from ind in listaInd select ind.Inductor.Nombre).Distinct();
                foreach (string inductor in Inductores)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(inductor, "Default_Font8_Borde"));
                    foreach (UnidadOrganica ca in CentrosActividad)
                    {
                        if (ca != null)
                        {
                            var value = listaInd.Where<InductorValor>(x => x.UnidadOrganica.Nombre == ca.Nombre && x.Inductor.Nombre == inductor);
                            if (value.Count<InductorValor>() > 0)
                            {
                                rowMaestros.Cells.Add(new WorksheetCell(value.First<InductorValor>().Valor.ToString(), DataType.Number, "Default_Font10_Borde"));
                            }
                            else
                            {
                                rowMaestros.Cells.Add(new WorksheetCell("0", DataType.Number, "Default_Font10_Borde"));
                            }
                        }

                    }
                    rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = string.Format("=SUM(RC[-{0}]:RC[-1])", CentrosActividad.Count<UnidadOrganica>()) });
                }

                cuadro["Inductores"].Add("Valores", new CuadroCalculo() { Inicio = 5, Columnas = 2 + CentrosActividad.Count(), Filas = Inductores.Count() });

                // Porcentajes

                rowMaestros = shMaestros.Table.Rows.Add();
                rowMaestros = shMaestros.Table.Rows.Add();

                rowMaestros.Cells.Add(new WorksheetCell("Inductor", "Cabecera_Verde"));
                foreach (UnidadOrganica ca in CentrosActividad)
                {
                    rowMaestros.Cells.Add(new WorksheetCell(ca.Nombre, "Cabecera_Celeste"));
                }

                foreach (string inductor in Inductores)
                {
                    rowMaestros = shMaestros.Table.Rows.Add();
                    rowMaestros.Cells.Add(new WorksheetCell(inductor, "Default_Font8_Borde"));
                    int i = 0;
                    foreach (UnidadOrganica ca in CentrosActividad)
                    {
                        rowMaestros.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde_Porcentaje")
                        {
                            Formula = string.Format("=R[-{0}]C/R[-{0}]C[+{1}]", 2 + cuadro["Inductores"]["Valores"].Filas, cuadro["Inductores"]["Valores"].Columnas - i - 2)
                        });
                        i++;
                    }
                }
                cuadro["Inductores"].Add("Dedicacion", new CuadroCalculo() { Inicio = cuadro["Inductores"]["Valores"].Inicio + cuadro["Inductores"]["Valores"].Filas + 2, Columnas = 2 + CentrosActividad.Count(), Filas = Inductores.Count() });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void GenerarCosteoPersonal(Workbook book, long ExpedienteId)
        {
            try
            {
                Worksheet sheet = book.Worksheets.Add("Personal Directo");
                cuadro.Add("Personal Directo", new Dictionary<string, CuadroCalculo>());

                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 45 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 200 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 60 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });

                WorksheetRow row = sheet.Table.Rows.Add();
                row.AutoFitHeight = true;
                row = sheet.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Calculo del Costo de Personal Directo", "Titulo") { MergeAcross = 9 });
                row = sheet.Table.Rows.Add();
                row = sheet.Table.Rows.Add();

                int ini = cuadro["Maestros"]["Personal"].Inicio;
                int cant = cuadro["Maestros"]["Personal"].Filas;
                //string fx = string.Format("=VLOOKUP(RC[-5],Maestros!R{0}C2:R{1}C8,7,FALSE)", ini + 1, ini + cant);
                //string fx = string.Format("=SUMIFS('{0}'!R{1}C12:R{2}C12,RC[-3],'{0}'!R{1}C13:R{2}C13)", "Personal Directo", ini, ini + cant);
                string fx = string.Format("=SUMIFS(Maestros!R{0}C8:R{1}C8,Maestros!R{0}C1:R{1}C1,RC[-8],Maestros!R{0}C2:R{1}C2,RC[-5])", ini + 1, ini + cant);



                var listaResumen = _tablaAsmeService.GetByExpedienteSinEliminados(ExpedienteId);
                int c = 0;

                foreach (TablaAsme proc in listaResumen)
                {
                    row = sheet.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(proc.Procedimiento.CodigoCorto.ToString() + "-" + proc.TablaAsmeId.ToString(), "Titulo"));
                    row = sheet.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell("Centro de Actividad", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Actividad No.", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Actividad", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Cargo", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Escala de Ingresos", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Cantidad de Personas", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Tiempo por Actividad (min.)", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Tiempo Total (min.)", "Cabecera_Celeste"));
                    row.Cells.Add(new WorksheetCell("Costo de Personal por Minuto", "Cabecera_Amarillo"));
                    row.Cells.Add(new WorksheetCell("Costo Total", "Cabecera_Celeste"));

                    //var ListaAnexo1 = _.ReporteAnexo(id_entidad, id_archivo, proc.IN_ID_OBJETO_COSTO);
                    var ListaAnexo1 = _reporteService.GetAnexoPeronalByExpedienteTablaASMEId(ExpedienteId, proc.TablaAsmeId);
                    foreach (AnexoPersonal act in ListaAnexo1)
                    {
                        row = sheet.Table.Rows.Add();
                        row.Cells.Add(new WorksheetCell(act.UnidadOrganica, "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(proc.Procedimiento.CodigoCorto.ToString() + "-" + act.TablaAsmeId.ToString(), "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(act.Actividad, "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(act.Cargo, "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(act.EscalaIngreso, "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(act.Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                        row.Cells.Add(new WorksheetCell(act.Duracion.ToString(), DataType.Number, "Default_Font10_Borde"));
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]*RC[-2]" });
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fx });
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]*RC[-2]" });
                    }

                    row = sheet.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell("Duración por Prestación (min.)", "Default_Font8_Borde") { Index = 7 });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Index = 8, Formula = string.Format("=SUM(R[-{0}]C:R[-1]C)", ListaAnexo1.Count) });
                    row.Cells.Add(new WorksheetCell("Costo de Personal por prestación (S/)", "Default_Font8_Borde") { Index = 9 });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Index = 10, Formula = string.Format("=SUM(R[-{0}]C:R[-1]C)", ListaAnexo1.Count) });

                    row.Cells.Add(new WorksheetCell(proc.Procedimiento.CodigoCorto.ToString() + "-" + proc.TablaAsmeId.ToString(), "Default") { Index = 12 });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default") { Index = 13, Formula = "=RC[-3]" });

                    row = sheet.Table.Rows.Add();
                    c += 4 + ListaAnexo1.Count;

                }
                cuadro["Personal Directo"].Add("Personal", new CuadroCalculo() { Inicio = 5, Filas = c });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void GenerarCosteoIdentificable(Workbook book, int k, long ExpedienteId, TipoRecurso tiporecurso)
        {
            try
            {
                Worksheet sheet = book.Worksheets.Add(tipo[k]);
                cuadro.Add(tipo[k], new Dictionary<string, CuadroCalculo>());

                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });

                WorksheetRow row = sheet.Table.Rows.Add();
                row.AutoFitHeight = true;
                row = sheet.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Calculo del Costo de " + tipo[k], "Titulo") { MergeAcross = 6 });
                row = sheet.Table.Rows.Add();
                row = sheet.Table.Rows.Add();

                int ini = cuadro["Maestros"][tipo[k]].Inicio;
                int cant = cuadro["Maestros"][tipo[k]].Filas;
                string fx = string.Format("=VLOOKUP(RC[-3],Maestros!R{0}C1:R{1}C3,3,FALSE)", ini + 1, ini + cant);

                //ABC_TA_RESUMENList listaResumen = RuleResumen.Listar(id_entidad, id_archivo);
                var listaResumen = _tablaAsmeService.GetByExpedienteSinEliminados(ExpedienteId);
                int c = 0;
                foreach (TablaAsme proc in listaResumen)
                {
                    row = sheet.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(proc.Procedimiento.CodigoCorto.ToString() + "-" + proc.TablaAsmeId.ToString(), "Titulo"));
                    row = sheet.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell("Centro de Actividad", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Actividad No.", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell(tipo[k], "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Unidad", "Cabecera_Amarillo"));
                    row.Cells.Add(new WorksheetCell("Cantidad", "Cabecera_Verde"));
                    row.Cells.Add(new WorksheetCell("Costo Unitario (S/)", "Cabecera_Amarillo"));
                    row.Cells.Add(new WorksheetCell("Costo Total", "Cabecera_Celeste"));

                    //ABC_TA_ANEXO_DETALLEList ListaAnexo2 = RuleResumen.ReporteAnexo23(id_entidad, id_archivo, proc.IN_ID_OBJETO_COSTO, k);
                    var ListaAnexo2 = _reporteService.GetAnexoIdentificableByExpedienteTablaASMEId(ExpedienteId, tiporecurso, proc.TablaAsmeId);

                    foreach (AnexoIdentificable rec in ListaAnexo2)
                    {
                        row = sheet.Table.Rows.Add();
                        row.Cells.Add(new WorksheetCell(rec.UnidadOrganica, "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(rec.Nro.ToString(), "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(rec.Nombre, "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(rec.UnidadMedida, "Default_Font8_Borde"));
                        row.Cells.Add(new WorksheetCell(rec.Cantidad.ToString(), DataType.Number, "Default_Font10_Borde"));
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fx });
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]*RC[-2]" });

                    }


                    row = sheet.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(string.Format("Costo de {0} por Prestación (S/)", tipo[k]), "Default_Font8_Borde") { Index = 6 });
                    if (ListaAnexo2.Count > 0) row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Index = 7, Formula = string.Format("=SUM(R[-{0}]C:R[-1]C)", ListaAnexo2.Count) });
                    else row.Cells.Add(new WorksheetCell("0", DataType.Number, "Default_Font10_Borde"));

                    row.Cells.Add(new WorksheetCell(proc.Procedimiento.CodigoCorto.ToString() + "-" + proc.TablaAsmeId.ToString(), "Default") { Index = 9 });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default") { Index = 10, Formula = "=RC[-3]" });
                    row = sheet.Table.Rows.Add();

                    c += 4 + ListaAnexo2.Count();
                }
                cuadro[tipo[k]].Add("Calculo", new CuadroCalculo() { Inicio = 5, Filas = c });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void GenerarCosteoNoIdentificable(Workbook book, int k, long ExpedienteId, TipoRecurso tiporecurso, long entidadid)
        {
            try
            {
                Worksheet sheet = book.Worksheets.Add(tipo[k]);
                cuadro.Add(tipo[k], new Dictionary<string, CuadroCalculo>());

                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 100 });

                WorksheetRow row = sheet.Table.Rows.Add();
                row.AutoFitHeight = true;
                row = sheet.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Calculo del Costo de " + tipo[k], "Titulo") { MergeAcross = 6 });
                row = sheet.Table.Rows.Add();
                row = sheet.Table.Rows.Add();

                //Dedicacion por inductor

                //ABC_TA_INDUCTOR_VALORList listaInd = RuleCalculo.ListValorInductores(id_entidad, id_archivo);
                //var CentrosActividad = (from ca in listaInd select ca.NOM_CA).Distinct();

                var listaInd = _inductorService.GetValoresByInductorEntidadid(entidadid, ExpedienteId);
                var CentrosActividad = (from ca in listaInd select ca.UnidadOrganica).Distinct();


                row = row.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Elemento de Costo", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Inductor", "Cabecera_Verde"));
                foreach (UnidadOrganica ca in CentrosActividad)
                {
                    row.Cells.Add(new WorksheetCell(ca.Nombre, "Cabecera_Amarillo"));
                }

                //ABC_TA_EC_ARCHIVOList listaECArchivo = RuleElementoCosto.ListarByArchivo(id_entidad, id_archivo, k);
                //ABC_TA_INDUCTORList Inductores = RuleInductor.GetByEntidad(id_entidad);

                var Inductores = (from ca in listaInd select ca.Inductor).Distinct();
                var listaECArchivo = _recursoCostoService.GetRecursoCosto(ExpedienteId, tiporecurso);

                //var ECInd = from ind in Inductores
                //            join ec in listaECArchivo on ind.IN_ID_INDUCTOR equals ec.IN_ID_INDUCTOR
                //            select new ABC_TA_EC_ARCHIVO() { VC_NOMBRE = ec.VC_NOMBRE, NOMBRE_IND = ind.VC_NOMBRE };


                var ECInd = from ind in Inductores
                            join ec in listaECArchivo on ind.InductorId equals ec.InductorId
                            select new RecursoCosto() { Recurso = ec.Recurso, Inductor = ind };


                int ini = cuadro["Inductores"]["Dedicacion"].Inicio;
                int cant = cuadro["Inductores"]["Dedicacion"].Filas;
                string fxInd = string.Format("=INDEX({0}!R{1}C2:R{2}C{4},MATCH(RC[-{5}],{0}!R{1}C1:R{2}C1,0),MATCH(R[-{6}]C,{0}!R{3}C2:R{3}C{4},0))",
                        "Inductores", ini + 1, ini + cant, ini, CentrosActividad.Count() + 1, "{0}", "{1}"
                    );
                int idxEc = 1;
                int idxCa = 1;
                foreach (var ec in ECInd)
                {
                    row = row.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(ec.Recurso.Nombre, "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(ec.Inductor.Nombre, "Default_Font8_Borde"));
                    idxCa = 1;
                    foreach (UnidadOrganica ca in CentrosActividad)
                    {
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde_Porcentaje") { Formula = string.Format(fxInd, idxCa, idxEc) });
                        idxCa++;
                    }
                    idxEc++;
                }
                cuadro[tipo[k]].Add("Dedicacion", new CuadroCalculo() { Inicio = 5, Filas = ECInd.Count() });

                ////Proceso 1

                row = row.Table.Rows.Add();
                row = row.Table.Rows.Add();
                row = row.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Elemento de Costo", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Costo Anual", "Cabecera_Verde"));
                foreach (UnidadOrganica ca in CentrosActividad)
                {
                    row.Cells.Add(new WorksheetCell(ca.Nombre, "Cabecera_Celeste"));
                }

                ini = cuadro["Maestros"][tipo[k]].Inicio;
                cant = cuadro["Maestros"][tipo[k]].Filas;
                string fxCostoAnual = "";
                if (tiporecurso == TipoRecurso.Depreciacion)
                {
                    fxCostoAnual = string.Format("=VLOOKUP(RC[-1],Maestros!R{0}C1:R{1}C7,7,FALSE)", ini + 1, ini + cant);
                }
                else
                {
                    fxCostoAnual = string.Format("=VLOOKUP(RC[-1],Maestros!R{0}C1:R{1}C5,5,FALSE)", ini + 1, ini + cant);
                }
                idxEc = 1;
                foreach (var ec in ECInd)
                {
                    row = row.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(ec.Recurso.Nombre, "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fxCostoAnual });
                    idxCa = 1;
                    foreach (UnidadOrganica ca in CentrosActividad)
                    {
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = string.Format("RC[-{0}]*R[-{1}]C", idxCa, ECInd.Count() + 3) });
                        idxCa++;
                    }
                    idxEc++;
                }
                cuadro[tipo[k]].Add("Proceso1", new CuadroCalculo() { Inicio = cuadro[tipo[k]]["Dedicacion"].Inicio + cuadro[tipo[k]]["Dedicacion"].Filas + 3, Filas = ECInd.Count() });

                //Factor TUPA

                row = row.Table.Rows.Add();
                row = row.Table.Rows.Add();
                row = row.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Centro de Actividad", "Cabecera_Plomo"));
                row.Cells.Add(new WorksheetCell("Elemento de Costo", "Cabecera_Plomo"));
                row.Cells.Add(new WorksheetCell("Costo por Centro de Actividad", "Cabecera_Plomo"));
                row.Cells.Add(new WorksheetCell("Inductor", "Cabecera_Plomo"));
                row.Cells.Add(new WorksheetCell("Tipo", "Cabecera_Plomo"));
                row.Cells.Add(new WorksheetCell("Valor del Inductor", "Cabecera_Plomo"));
                row.Cells.Add(new WorksheetCell("Valor total del Inductor", "Cabecera_Plomo"));
                row.Cells.Add(new WorksheetCell("Costo (S/)", "Cabecera_Plomo"));

                //ABC_TA_FACTOR_TUPAList listaFactorTupa = RuleCalculo.ListarFactorTupa(id_entidad, id_archivo, k);

                var listaFactorTupa = _factorDedicacionService.GetValoresByUndOrganicaLista(ExpedienteId, tiporecurso);


                //var listaFactorTupa = _ac.GetValoresByUndOrganicaLista(ExpedienteId, tiporecurso);


                ini = cuadro[tipo[k]]["Proceso1"].Inicio;
                cant = cuadro[tipo[k]]["Proceso1"].Filas;
                string fx = string.Format("=INDEX(R{1}C3:R{2}C{4},MATCH(RC[-1],R{1}C1:R{2}C1,0),MATCH(RC[-2],R{3}C3:R{3}C{4},0))",
                        "", ini + 1, ini + cant, ini, CentrosActividad.Count() + 2
                    );
                foreach (FactorDedicacion ft in listaFactorTupa)
                {
                    row = row.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(ft.UnidadOrganica.Nombre, "Default_Font8_Borde") { MergeDown = 1 });
                    if (ft.Recurso != null)
                    {
                        row.Cells.Add(new WorksheetCell(ft.Recurso.Nombre, "Default_Font8_Borde") { MergeDown = 1 });
                    }
                    else
                    {
                        row.Cells.Add(new WorksheetCell("", "Default_Font8_Borde") { MergeDown = 1 });
                    }

                    row.Cells.Add(new WorksheetCell("", "Default_Font8_Borde") { MergeDown = 1, Formula = fx });
                    row.Cells.Add(new WorksheetCell("Factor de Dedicacion", "Default_Font8_Borde") { MergeDown = 1 });
                    row.Cells.Add(new WorksheetCell("Actividades relacionadas P.A.", "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(ft.ValorTupa.ToString(), DataType.Number, "Default_Font10_Borde"));
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { MergeDown = 1, Formula = "=SUM(RC[-1]:R[+1]C[-1])" });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-5]*RC[-2]/RC[-1]" });
                    row = row.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell("Actividades NO relacionadas P.A.", "Default_Font8_Borde") { Index = 5 });
                    row.Cells.Add(new WorksheetCell(Convert.ToString(100 - ft.ValorTupa), DataType.Number, "Default_Font10_Borde") { Index = 6 });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Index = 8, Formula = "=R[-1]C[-5]*RC[-2]/R[-1]C[-1]" });
                }
                cuadro[tipo[k]].Add("FactorTupa", new CuadroCalculo() { Inicio = cuadro[tipo[k]]["Proceso1"].Inicio + cuadro[tipo[k]]["Proceso1"].Filas + 3, Filas = listaFactorTupa.Count * 2 });

                //Proceso 2
                row = row.Table.Rows.Add();
                row = row.Table.Rows.Add();
                row = row.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Elemento de Costo", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Centro de Actividad", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Actividad", "Cabecera_Amarillo") { MergeAcross = 1 });
                row.Cells.Add(new WorksheetCell("Identificacion de USO", "Cabecera_Verde"));
                row.Cells.Add(new WorksheetCell("Tiempo consumido en la Actividad (para todos los Objetos de Costo)", "Cabecera_Celeste"));
                row.Cells.Add(new WorksheetCell("Duracion TOTAL", "Cabecera_Verde"));
                row.Cells.Add(new WorksheetCell("Tiempo total de Actividades por Centro de Actividad", "Cabecera_Celeste"));
                row.Cells.Add(new WorksheetCell("% Dedicacion", "Cabecera_Celeste"));
                row.Cells.Add(new WorksheetCell("Costo por Centro de Actividad (S/)", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Costo por Actividad (S/)", "Cabecera_Celeste"));

                //ABC_TA_ANEXO_DETALLEList listaProceso2 = RuleCalculo.ListarProceso2(id_entidad, id_archivo, k);
                //var listaProceso2 = _factorDedicacionService.GetValoresByUndOrganicaLista(ExpedienteId, tiporecurso);

                var listaProceso2 = _reporteService.GetActividadRecursoListaProceso1(ExpedienteId, tiporecurso);
                //var data = _reporteService.GetAnexoNoIdentificableByExpediente(ExpedienteId, tipo);


                var asignacion = listaProceso2
                                .Select(x => new
                                {
                                    Recurso = x.Recurso,
                                    nombre = x.Recurso.Nombre,
                                    UnidadOrganica = x.Actividad.UnidadOrganica,
                                    Actividad = x.Actividad,
                                    CodigoCorto = x.Actividad.TablaAsme.Procedimiento.CodigoCorto,
                                    Denominacion = x.Actividad.TablaAsme.Procedimiento.Denominacion,
                                    Duracion = x.Actividad.Duracion,
                                    RecursoCosto = x.Recurso.RecursoCosto,


                                }).
                               GroupBy(x => new { Recurso = x.Recurso, UnidadOrganica = x.Actividad.UnidadOrganica },
                                    (x, g) => new ItemCACULO()
                                    {
                                        textNombrerecurso = x.Recurso.Nombre,
                                        textNombreUnidadOrganica = x.UnidadOrganica.Nombre,
                                        //textCodigoCorto = Convert.ToString(x.TablaAsme.TablaAsmeId),
                                        //textDenominacion = x.TablaAsme.Descripcion.ToString(),
                                        UnidadOrganica = x.UnidadOrganica,
                                        Recurso = x.Recurso,
                                        textDuracion = g.Sum(h => h.Duracion),
                                    })
                               .ToList();





                ini = cuadro[tipo[k]]["FactorTupa"].Inicio;
                cant = cuadro[tipo[k]]["FactorTupa"].Filas;
                fx = string.Format("=SUMIFS(R{0}C6:R{1}C6,R{0}C1:R{1}C1,RC[-7],R{0}C2:R{1}C2,RC[-6])", ini + cant + 4, ini + cant + asignacion.Count + 3);
                string fxFT = string.Format("=SUMIFS(R{0}C8:R{1}C8,R{0}C2:R{1}C2,RC[-9],R{0}C1:R{1}C1,RC[-8],R{0}C5:R{1}C5,\"Actividades relacionadas P.A.\")", ini + 1, ini + cant);
                foreach (ItemCACULO rec in asignacion)
                {


                    row = row.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(rec.textNombrerecurso, "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.textNombreUnidadOrganica, "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell("-", "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell("-", "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell("SI", "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.textDuracion.ToString(), DataType.Number, "Default_Font10_Borde"));
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde"));
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fx });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde_Porcentaje") { Formula = "=RC[-3]/RC[-1]" });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fxFT });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]*RC[-2]" });
                }
                cuadro[tipo[k]].Add("Proceso2", new CuadroCalculo() { Inicio = ini + cant + 3, Filas = asignacion.Count });

                //Proceso 5
                row = row.Table.Rows.Add();
                row = row.Table.Rows.Add();
                row = row.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Elemento de Costo", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Centro de Actividad", "Cabecera_Amarillo"));
                //row.Cells.Add(new WorksheetCell("Actividad", "Cabecera_Amarillo") { MergeAcross = 1 });
                row.Cells.Add(new WorksheetCell("Codigo TABLA Asme", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Prestaciones", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Procedimiento Administrativo", "Cabecera_Amarillo") { MergeAcross = 1 });
                row.Cells.Add(new WorksheetCell("Tiempo de consumo por procedimiento administrativo", "Cabecera_Celeste"));
                row.Cells.Add(new WorksheetCell("Tiempo X Prestación", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Tiempo Total de Consumo", "Cabecera_Celeste"));
                row.Cells.Add(new WorksheetCell("Costo por Actividad", "Cabecera_Amarillo"));
                row.Cells.Add(new WorksheetCell("Costo por procedimiento administrativo (S/)", "Cabecera_Celeste"));

                //ABC_TA_ANEXO_DETALLEList listaProceso5 = RuleCalculo.ListarProceso5(id_entidad, id_archivo, k);


                var listaProceso5 = _reporteService.GetActividadRecursoListaProceso1(ExpedienteId, tiporecurso);

                var proceso2 = asignacion
                             .Join(listaProceso2,
                             p => new { p.Recurso.RecursoId, p.UnidadOrganica.UnidadOrganicaId },
                             a => new { a.RecursoId, a.Actividad.UnidadOrganicaId },
                             (p, a) => new { Proceso1 = p, Actividad = a.Actividad, ActividadRecurso = a })
                             .Select(x => new
                             {
                                 Recurso = x.Proceso1.Recurso,
                                 UnidadOrganica = x.Proceso1.UnidadOrganica,
                                 Actividad = x.Actividad,
                                 UnidadMedida = x.ActividadRecurso.Recurso.UnidadMedida,
                                 RecursoCosto = x.Proceso1.Recurso.RecursoCosto,
                                 Duracion = x.Actividad.Duracion
                             }).GroupBy(x => new { x.Actividad, x.Recurso, x.UnidadMedida, x.RecursoCosto, x.UnidadOrganica },
                                 (Y, g) => new AnexoNoIdentificable()
                                 {
                                     ExpedienteId = ExpedienteId,
                                     TablaAsmeId = Y.Actividad.TablaAsme.TablaAsmeId,
                                     TablaAsme = Y.Actividad.TablaAsme,
                                     TipoRecurso = Y.Recurso.TipoRecurso,
                                     TipoRecursoNom = Y.Recurso.TipoRecurso.ToString(),
                                     Codigo = Y.Recurso.Codigo,
                                     Nombre = Y.Recurso.Nombre,
                                     UnidadMedida = Y.UnidadMedida.Abreviatura,
                                     UnidadOrganicaID = Y.UnidadOrganica.UnidadOrganicaId,
                                     UnidadOrganicanombre = Y.UnidadOrganica.Nombre,
                                     CostoTotal = g.Sum(h => h.Duracion),
                                     Duraciontotal = g.Sum(h => h.Duracion * Y.Actividad.TablaAsme.Prestaciones),
                                 }
                             ).ToList();


                ini = cuadro[tipo[k]]["Proceso2"].Inicio;
                cant = cuadro[tipo[k]]["Proceso2"].Filas;
                //fx = string.Format("=SUMIFS(R{0}C7:R{1}C7,R{0}C1:R{1}C1,RC[-7],R{0}C2:R{1}C2,RC[-6], R{0}C3:R{1}C3,RC[-5])", ini + cant + 4, ini + cant + proceso2.Count + 3);
                //fx = string.Format("=SUMIFS(R{0}C8:R{1}C8,R{0}C1:R{1}C1,RC[-7],R{0}C2:R{1}C2,RC[-6], R{0}C3:R{1}C3,RC[-5])", ini + cant + 4, ini + cant + proceso2.Count + 3);
                fx = string.Format("=SUMIFS(R{0}C8:R{1}C8,R{0}C1:R{1}C1,RC[-8],R{0}C2:R{1}C2,RC[-7])", ini + cant + 4, ini + cant + proceso2.Count + 3);
                //string fxProc5 = string.Format("=SUMIFS(R{0}C11:R{1}C11,R{0}C1:R{1}C1,RC[-9],R{0}C2:R{1}C2,RC[-8],R{0}C3:R{1}C3,RC[-7])", ini + 1, ini + cant);
                string fxProc5 = string.Format("=SUMIFS(R{0}C11:R{1}C11,R{0}C1:R{1}C1,RC[-9],R{0}C2:R{1}C2,RC[-8])", ini + 1, ini + cant);
                foreach (AnexoNoIdentificable rec in proceso2)
                {
                    row = row.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(rec.Nombre, "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.UnidadOrganicanombre, "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.TablaAsme.TablaAsmeId.ToString(), "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.TablaAsme.Prestaciones.ToString(), "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.TablaAsme.Procedimiento.CodigoCorto.ToString() + "-" + rec.TablaAsmeId.ToString(), "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.TablaAsme.Procedimiento.Denominacion, "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.CostoTotal.ToString(), DataType.Number, "Default_Font10_Borde"));
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-4]*RC[-1]" });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fx });
                    //row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde_Porcentaje") { Formula = "=RC[-2]/RC[-1]" });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fxProc5 });
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=RC[-1]*RC[-4]*RC[-7]/RC[-2]" });
                }
                cuadro[tipo[k]].Add("Proceso5", new CuadroCalculo() { Inicio = ini + cant + 3, Filas = proceso2.Count });



            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void GenerarResumenCostos(Workbook book, long ExpedienteId)
        {
            try
            {
                Worksheet sheet = book.Worksheets.Add("Resumen");

                cuadro.Add("Resumen", new Dictionary<string, CuadroCalculo>());

                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 90 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 60 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 400 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 96 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 85 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 96 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 92 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 80 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 117 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 91 });
                sheet.Table.Columns.Add(new WorksheetColumn() { Width = 94 });

                WorksheetRow row = sheet.Table.Rows.Add();
                row.AutoFitHeight = true;
                row = sheet.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("RESUMEN DE COSTOS DE PROCEDIMIENTOS ADMINISTRATIVOS SEGÚN METODOLOGÍA DS 064-2010-PCM", "Titulo") { MergeAcross = 11 });
                row = sheet.Table.Rows.Add();
                row = sheet.Table.Rows.Add();
                row = sheet.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("Cod. TABLAASME", "Cabecera_Celeste") { MergeDown = 1 });
                row.Cells.Add(new WorksheetCell("Cod.", "Cabecera_Celeste") { MergeDown = 1 });
                row.Cells.Add(new WorksheetCell("PROCEDIMIENTO ADMINISTRATIVO", "Cabecera_Celeste") { MergeDown = 1 });
                row.Cells.Add(new WorksheetCell("CANT. DE PRESTACIONES ANUALES", "Cabecera_Celeste") { MergeDown = 1 });
                row.Cells.Add(new WorksheetCell("COSTOS UNITARIOS POR PRESTACION (S/)", "Cabecera_Celeste") { MergeAcross = 6 });
                row.Cells.Add(new WorksheetCell("COSTO UNITARIO", "Cabecera_Celeste") { MergeDown = 1 });
                row = sheet.Table.Rows.Add();
                row.Cells.Add(new WorksheetCell("PERSONAL", "Cabecera_Celeste") { Index = 5 });
                row.Cells.Add(new WorksheetCell("MATERIAL FUNGIBLE", "Cabecera_Celeste") { Index = 6 });
                row.Cells.Add(new WorksheetCell("SERVICIOS IDENTIFICABLES", "Cabecera_Celeste") { Index = 7 });
                row.Cells.Add(new WorksheetCell("MATERIAL NO FUNGIBLE", "Cabecera_Celeste") { Index = 8 });
                row.Cells.Add(new WorksheetCell("SERVICIO DE TERCEROS", "Cabecera_Celeste") { Index = 9 });
                row.Cells.Add(new WorksheetCell("DEPRECIACION Y AMORTIZACION", "Cabecera_Celeste") { Index = 10 });
                row.Cells.Add(new WorksheetCell("FIJOS", "Cabecera_Celeste") { Index = 11 });

                //ABC_TA_RESUMENList listaResumen = RuleResumen.Listar(id_entidad, id_archivo);
                //foreach (ABC_TA_RESUMEN rec in listaResumen)
                var listaResumen = _tablaAsmeService.GetByExpedienteSinEliminados(ExpedienteId);

                foreach (TablaAsme rec in listaResumen)
                {
                    row = sheet.Table.Rows.Add();
                    row.Cells.Add(new WorksheetCell(rec.TablaAsmeId.ToString(), "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.Procedimiento.CodigoCorto.ToString() + "-" + rec.TablaAsmeId.ToString(), "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.Procedimiento.Denominacion, "Default_Font8_Borde"));
                    row.Cells.Add(new WorksheetCell(rec.Prestaciones.ToString(), DataType.Number, "Default_Font10_Borde"));

                    int ini = cuadro["Personal Directo"]["Personal"].Inicio;
                    int cant = cuadro["Personal Directo"]["Personal"].Filas;
                    string fx = string.Format("=SUMIF('{0}'!R{1}C12:R{2}C12,RC[-3],'{0}'!R{1}C13:R{2}C13)", "Personal Directo", ini, ini + cant);
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fx });

                    for (int k = 2; k <= 3; k++)
                    {
                        ini = cuadro[tipo[k]]["Calculo"].Inicio;
                        cant = cuadro[tipo[k]]["Calculo"].Filas;
                        fx = string.Format("=SUMIF('{0}'!R{1}C9:R{2}C9,RC[-{3}],'{0}'!R{1}C10:R{2}C10)", tipo[k], ini, ini + cant, k + 2);
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fx });
                    }

                    for (int k = 4; k <= 7; k++)
                    {
                        ini = cuadro[tipo[k]]["Proceso5"].Inicio;
                        cant = cuadro[tipo[k]]["Proceso5"].Filas;
                        fx = string.Format("=TRUNC(SUMIF('{0}'!R{1}C5:R{2}C5,RC[-{3}], '{0}'!R{1}C11:R{2}C11)/RC[-{4}],2)", tipo[k],
                                            ini + 1, ini + cant, k + 2, k);
                        row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = fx });
                    }
                    row.Cells.Add(new WorksheetCell("", DataType.Number, "Default_Font10_Borde") { Formula = "=SUM(RC[-7]:RC[-1])" });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public class CuadroCalculo
        {
            public int Filas { get; set; }
            public int Columnas { get; set; }
            public int Inicio { get; set; }
        }
    }


    class ItemIndice
    {
        public Procedimiento Procedimiento { get; set; }
        public byte[] Byte { get; set; }
        public int NumPaginas { get; set; }
    }

    class ItemCACULO
    {

        public string textNombrerecurso { get; set; }
        public Recurso Recurso { get; set; }
        public UnidadOrganica UnidadOrganica { get; set; }

        public string textNombreUnidadOrganica { get; set; }
        public string textCodigoCorto { get; set; }
        public string textDenominacion { get; set; }
        public decimal textDuracion { get; set; }
        public decimal DuracionTotal { get; set; }


    }

    //  class ListaRecurso
    //{  
    //    public string RecursoId { get; set; }
    //    public string Nombre { get; set; }
    //    public string Tipo { get; set; }
    //    public string TipoId { get; set; }
    //    public string numero { get; set; }
    //}


}

