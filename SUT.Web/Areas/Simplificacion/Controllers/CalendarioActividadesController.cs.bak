using Newtonsoft.Json;
using Sut.Entities;
using Sut.IApplicationServices;
using Sut.Log;
using Sut.Security;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web.Mvc;

namespace Sut.Web.Areas.Simplificacion.Controllers
{
    [Authorize]
    public class CalendarioActividadesController : Controller
    {
        private readonly ILogService<CalendarioActividadesController> _log;
        private readonly ICalendarioActividadesService _CalendarioActividadesService;
        private readonly IAuditoriaService _AuditoriaService;
        private readonly IMetaDatoService _metaDatoService;
        private readonly IDepartamentoService _departamentoService;
        Auditoria objauditoria = new Auditoria();
        public CalendarioActividadesController(IAuditoriaService AuditoriaService,
                                IMetaDatoService metaDatoService,
                                IDepartamentoService departamentoService, ICalendarioActividadesService CalendarioActividadesService)
        {
            _log = new LogService<CalendarioActividadesController>();
            _CalendarioActividadesService = CalendarioActividadesService;
            _metaDatoService = metaDatoService;
            _AuditoriaService = AuditoriaService;
            _departamentoService = departamentoService;
        }

        //[AutorizacionRol(Roles = "Administrador")]
        public ActionResult Lista()
        {
            ViewBag.TipoRecurso = 4;
            return View();
        }

        public string GetAllLikePagin(CalendarioActividades filtro, int pageIndex, int pageSize)
        {
            int totalRows = 0;
            List<CalendarioActividades> lista = _CalendarioActividadesService.GetAllLikePagin(filtro, pageIndex, pageSize, ref totalRows);

            return JsonConvert.SerializeObject(new
            {
                lista = lista.Select(x => new
                {


                    CalendarioActividadesId = x.CalendarioActividadesId,
                    EquipoSubId = x.EquipoSubId,
                    AsisTecId = x.AsisTecId,
                    ModalidadId = x.ModalidadId,
                    ResponsableId = x.ResponsableId,
                    LugarEjecucion = x.LugarEjecucion,
                    FecProgramada = x.FecProgramada == null ? "" : x.FecProgramada.Value.ToString("dd/MM/yyyy"),
                    FecEjecucion = x.FecEjecucion == null ? "" : x.FecEjecucion.Value.ToString("dd/MM/yyyy"),
                    Cumplimiento = x.Cumplimiento,
                    Observaciones = x.Observaciones,
                    MateriaId = x.MateriaId,
                    TipoRango = x.TipoRango,
                    EquipoSub = x.EquipoSub,
                    AsisTec = x.AsisTec,
                    Modalidad = x.Modalidad,
                    Responsable = x.Responsable,
                    Materia = x.Materia,
                    Cantidad = x.Cantidad,


                }),
                totalRows = totalRows
            });
        }

        //[AutorizacionRol(Roles = "Administrador")]
        public ActionResult Editar(long id)
        {
            try
            {
                CalendarioActividades item; 


                if (id == 0)
                {
                    item = new CalendarioActividades();
                    ViewBag.Title = "Nueva Calendario de Actividades";
                }
                else
                {
                    item = _CalendarioActividadesService.GetOne(id);
                    ViewBag.Title = "Editar  Calendario de Actividades";
                }


                List<Departamento> listaDepartamento = _departamentoService.GetAll();
                listaDepartamento = listaDepartamento.OrderBy(x => x.Nombre).ToList();
                listaDepartamento.Insert(0, new Departamento() { DepartamentoId = 0, Nombre = " - Seleccionar - " });

                ViewBag.ListaDepartamento = listaDepartamento.Select(x => new SelectListItem()
                {
                    Value = x.DepartamentoId.ToString(),
                    Text = x.Nombre
                })
               .ToList();

                ViewBag.ListaDepartamento.RemoveAt(1);


                List<MetaDato> listEquipoSub = _metaDatoService.GetByParent(183);

                listEquipoSub.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.EquipoSub = listEquipoSub.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();




                List<MetaDato> listAsisTec = _metaDatoService.GetByParent(188);

                listAsisTec.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.AsisTec = listAsisTec.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();


                List<MetaDato> listModalidad = _metaDatoService.GetByParent(192);

                listModalidad.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.Modalidad = listModalidad.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();

                List<MetaDato> listResponsable = _metaDatoService.GetByParent(215);

                listResponsable.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.Responsable = listResponsable.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();


                List<MetaDato> listMateria = _metaDatoService.GetByParent(195);

                listMateria.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.Materia = listMateria.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();

                ViewBag.Cumplimientos = new List<SelectListItem>()
                {
                    new SelectListItem() { Text = " - Seleccionar - ", Value = "0" },
                    new SelectListItem() { Text = "Por iniciar", Value = "1", Selected = item.Cumplimiento == 1 ? true:false  },
                    new SelectListItem() { Text = "En proceso", Value = "2", Selected = item.Cumplimiento == 2 ? true:false  },
                    new SelectListItem() { Text = "Concluido", Value = "3", Selected = item.Cumplimiento == 2 ? true:false  },
                    new SelectListItem() { Text = "Fuera de plazo", Value = "4", Selected = item.Cumplimiento == 2 ? true:false  },
                    new SelectListItem() { Text = "Cancelado", Value = "5", Selected = item.Cumplimiento == 2 ? true:false  },
                };

                ViewBag.tipRango = new List<SelectListItem>()
                {
                    new SelectListItem() { Text = " - Seleccionar - ", Value = "0" },
                    new SelectListItem() { Text = "Fecha Programada", Value = "1", Selected = item.TipoRango == 1 ? true:false  },
                    new SelectListItem() { Text = "Rango Fecha", Value = "2", Selected = item.TipoRango == 2 ? true:false  },
                    new SelectListItem() { Text = "Fecha Multiple", Value = "3", Selected = item.TipoRango == 3 ? true:false  },
                };



                return PartialView("_Editar", item);
            }
            catch (Exception ex)
            {
                Response.StatusCode = (int)HttpStatusCode.BadRequest;
                ModelState.AddModelError("", ex.Message);
                return PartialView("_Error");
            }
        }

        public ActionResult EditarDetalle(long id)
        {
            try
            {
                CalendarioActividades item;





                if (id == 0)
                {
                    item = new CalendarioActividades();
                    ViewBag.Title = "Nueva Calendario de Actividades";
                }
                else
                {
                    item = _CalendarioActividadesService.GetOne(id);
                    ViewBag.Title = "Editar  Calendario de Actividades";
                }


                List<Departamento> listaDepartamento = _departamentoService.GetAll();
                listaDepartamento = listaDepartamento.OrderBy(x => x.Nombre).ToList();
                listaDepartamento.Insert(0, new Departamento() { DepartamentoId = 0, Nombre = " - Seleccionar - " });

                ViewBag.ListaDepartamento = listaDepartamento.Select(x => new SelectListItem()
                {
                    Value = x.DepartamentoId.ToString(),
                    Text = x.Nombre
                })
               .ToList();

                ViewBag.ListaDepartamento.RemoveAt(1);


                List<MetaDato> listEquipoSub = _metaDatoService.GetByParent(183);

                listEquipoSub.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.EquipoSub = listEquipoSub.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();




                List<MetaDato> listAsisTec = _metaDatoService.GetByParent(188);

                listAsisTec.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.AsisTec = listAsisTec.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();


                List<MetaDato> listModalidad = _metaDatoService.GetByParent(192);

                listModalidad.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.Modalidad = listModalidad.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();

                List<MetaDato> listResponsable = _metaDatoService.GetByParent(215);

                listResponsable.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.Responsable = listResponsable.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();


                List<MetaDato> listMateria = _metaDatoService.GetByParent(195);

                listMateria.Insert(0, new MetaDato() { MetaDatoId = 0, Nombre = " - Seleccionar - " });
                ViewBag.Materia = listMateria.Select(x => new SelectListItem()
                {
                    Value = x.MetaDatoId.ToString(),
                    Text = x.Nombre
                })
                .ToList();

                ViewBag.Cumplimientos = new List<SelectListItem>()
                {
                    new SelectListItem() { Text = " - Seleccionar - ", Value = "0" },
                    new SelectListItem() { Text = "Por iniciar", Value = "1", Selected = item.Cumplimiento == 1 ? true:false  },
                    new SelectListItem() { Text = "En proceso", Value = "2", Selected = item.Cumplimiento == 2 ? true:false  },
                    new SelectListItem() { Text = "Concluido", Value = "3", Selected = item.Cumplimiento == 2 ? true:false  },
                    new SelectListItem() { Text = "Fuera de plazo", Value = "4", Selected = item.Cumplimiento == 2 ? true:false  },
                    new SelectListItem() { Text = "Cancelado", Value = "5", Selected = item.Cumplimiento == 2 ? true:false  },
                };

                ViewBag.tipRango = new List<SelectListItem>()
                {
                    new SelectListItem() { Text = " - Seleccionar - ", Value = "0" },
                    new SelectListItem() { Text = "Fecha Programada", Value = "1", Selected = item.TipoRango == 1 ? true:false  },
                    new SelectListItem() { Text = "Rango Fecha", Value = "2", Selected = item.TipoRango == 2 ? true:false  },
                    new SelectListItem() { Text = "Fecha Multiple", Value = "3", Selected = item.TipoRango == 3 ? true:false  },
                };



                return PartialView("_Detalle", item);
            }
            catch (Exception ex)
            {
                Response.StatusCode = (int)HttpStatusCode.BadRequest;
                ModelState.AddModelError("", ex.Message);
                return PartialView("_Error");
            }
        }


 




        [HttpPost]
        //[AutorizacionRol(Roles = "Administrador")]
        public ActionResult Guardar(CalendarioActividades model, UsuarioInfo user)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    string mensaje = model.CalendarioActividadesId == 0 ? "Calendario Actividades fue registrada satisfactoriamente."
                                                : "Calendario Actividades fue modificada satisfactoriamente.";

                    CalendarioActividades obj;

                    if (model.CalendarioActividadesId == 0)
                    {
                        obj = new CalendarioActividades();
                        CalendarioActividades prueba = _CalendarioActividadesService.GetOne(model.CalendarioActividadesId);
                        if (prueba != null)
                        {
                            prueba.TipoRango = 0;
                            _CalendarioActividadesService.Save(prueba);
                        }
                        obj.UserCreacion = user.NroDocumento;
                        obj.FecCreacion = DateTime.Now;

                        /*auditoria agregar*/
                        objauditoria.EntidadId = user.EntidadId;
                        objauditoria.SectorId = user.Sector;
                        objauditoria.ProvinciaId = user.Provincia;
                        objauditoria.Usuario = user.NombreCompleto;
                        objauditoria.Actividad = "Agregar calendario actividades ";
                        objauditoria.Pantalla = "calendario actividades";
                        objauditoria.UserCreacion = user.NroDocumento;
                        objauditoria.FecCreacion = DateTime.Now;
                        /*auditoria*/
                    }
                    else
                    {
                        obj = _CalendarioActividadesService.GetOne(model.CalendarioActividadesId);

                        /*auditoria actualizar*/
                        objauditoria.EntidadId = user.EntidadId;
                        objauditoria.SectorId = user.Sector;
                        objauditoria.ProvinciaId = user.Provincia;
                        objauditoria.Usuario = user.NombreCompleto;
                        objauditoria.Actividad = "Modificar calendario actividades ";
                        objauditoria.Pantalla = "calendario actividades ";
                        objauditoria.UserCreacion = user.NroDocumento;
                        objauditoria.FecCreacion = DateTime.Now;
                        /*auditoria*/

                    }

                    obj.EquipoSubId = model.EquipoSubId;
                    obj.AsisTecId = model.AsisTecId;
                    obj.ModalidadId = model.ModalidadId;
                    obj.ResponsableId = model.ResponsableId;
                    obj.LugarEjecucion = model.LugarEjecucion;
                    obj.FecProgramada = model.FecProgramada;
                    obj.FecEjecucion = model.FecEjecucion;
                    obj.Cumplimiento = model.Cumplimiento;
                    obj.Observaciones = model.Observaciones;
                    obj.MateriaId = model.MateriaId;
                    obj.DepartamentoId = model.DepartamentoId;
                    obj.FecInicio = model.FecInicio;
                    obj.FecFin = model.FecFin;
                    obj.Cantidad = model.Cantidad;



                    obj.TipoRango = model.TipoRango;

                    obj.UserModificacion = user.NroDocumento;
                    obj.FecModificacion = DateTime.Now;
                    _CalendarioActividadesService.Save(obj);
                    /*auditoria Grabar*/
                    _AuditoriaService.Save(objauditoria);
                    /*auditoria Grabar*/

                    return Json(new
                    {
                        mensaje = mensaje
                    });
                }
                else
                {
                    Response.StatusCode = (int)HttpStatusCode.BadRequest;
                    return PartialView("_Error");
                }
            }
            catch (Exception ex)
            {
                Response.StatusCode = (int)HttpStatusCode.BadRequest;
                ModelState.AddModelError("editarCalendarioActividades", ex.Message);

                _log.Error(ex);
                return PartialView("_Error");
            }
        }

    }
}